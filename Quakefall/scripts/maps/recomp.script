namespace map_recomp
{

//----------------------------------------------------------
//
// Recomp.script
//
// Scripting events for the entirety of Recomp
//
//  General Functions
//
//  Used to check when both barrel rooms are activated.
	void checkBothRooms();
//	
//	Recomp Track			#recomp_track
//		void activateLeftTrack()
//		void activateRightTrack()
//
//	A mid-level set piece that shows barrels in motion depending on the activation of
//  the two process rooms.
//	
//	---
//
//	Recomp Introduction:	#recomp_intro
		void openPrison();
		void setPrisonCells();
		void prisonerScreaming();
//		void sustainSasaki();
//
//	A gunner strogg places a marine on a hook to be carted away. There
//  is a second marine (sasaki) trapped in a cell, which the player can free.
//
//	---
//
//	Recomp Process1			#recomp_process1
//		void setRandomProcessOneLightParmsTo(vector vParm)	
//		void setAllProcessOneLightParmsTo(vector vParm)
//		void fadeInAllProcessOneLights()
//		void powerUpProcessOne()
//
//	This room begins the first of the three barrel processes. The barrels are dipped in a 
//	corrosive "programmer blue" cleaning fluid and then sent off to the rest of the level.
//
//	---
//
//	Recomp Process2			#recomp_process2
//		void powerUpProcessTwo()
//
//	This is the second room, which transfers the barrels from one place to another.
//
//	---
//
//	Recomp Chain			#recomp_chain
		void setupCraneRoom();
		void setSasakiAtConsole();
		void killSasaki();
		void lockChainRoom();
		void unlockChainRoom();
//
//	The final "chain-drag" puzzle. Once the main control section has been activated, the player
//  can use a gui to move a platform and some barrels into position to allow him to escape the level.
//
//	Jim Shepard April 2004
//
// (c) Raven Software
//----------------------------------------------------------

//the number of lights in the first barrel process room
#define NUM_LIGHTS_IN_PROCESS_ONE 8

//globals ----------------------------------------------------------------------------------

//booleans for the two process rooms
float	gvar_P1Active = 0;
float	gvar_P2Active = 0;

//boolean for the main control room
float	gvar_ControlActive = 0;

//boolean for the prison cell
float	gvar_PrisonOpen = 0;

//booleans for the chain drag puzzle
float	gvar_paletteArmInMotion = 0;
float	gvar_platformConnected = 0;
float   gvar_barrelsInMotion = 0;

//booleans for keeping track of Sasaki
float	gvar_sasakiIsAlive = 1;
float	gvar_sasakiCanTalk = 1;

//boolean for the main system gui
float	gvar_storageSystemAlreadyFailed = 0;

void setGladiatorFree()
{
	sys.trigger($ai_tether_none_gladiatorFree);
}

//spinny red rotating lights
void setupWarningLights()
{
	$corey_warning_light_2.rotate('0 360 0');
	$corey_warning_light_3.rotate('0 360 0');
	$corey_warning_light_4.rotate('0 360 0');
	$corey_warning_light_5.rotate('0 360 0');
}

void shutdownWarningLights()
{
	$corey_warning_light_2.rotate('0 0 0');	//rotatey bit
	$corey_warning_light_2.setColor(0,0,0);
	sys.trigger($func_fx_37); //light haze
	sys.trigger($func_static_10287); //flare
	sys.trigger($light_4503); //red light
	sys.trigger($speaker_68); //speaker
	
	$corey_warning_light_3.rotate('0 0 0'); //rotatey bit
	$corey_warning_light_3.setColor(0,0,0);
	sys.trigger($func_fx_38); //light haze
	sys.trigger($func_static_53453); //flare
	sys.trigger($light_8486); //red light

	$corey_warning_light_4.rotate('0 0 0'); //rotatey bit
	$corey_warning_light_4.setColor(0,0,0);
	sys.trigger($func_fx_39); //light haze
	sys.trigger($func_static_53457); //flare
	sys.trigger($light_8489); //red light
	
	$corey_warning_light_5.rotate('0 0 0'); //rotatey bit
	$corey_warning_light_5.setColor(0,0,0);
	sys.trigger($func_fx_45); //light haze
	sys.trigger($func_static_53459); //flare
	sys.trigger($light_8493); //red light
}

void swapOfflineSystems()
{
	//guis near chain drag puzzle room
	sys.trigger($func_static_10702);	//online hide
	sys.trigger($func_static_10258);	//online hide
	sys.trigger($func_static_53452);	//offline show
	sys.trigger($func_static_53451);	//offline show
	
	//offline/online signage
	sys.trigger($static_warnboard_online_1); //chain drag room
	sys.trigger($static_warnboard_offline_1);
	$light_8484.setColor(0.92, 0.69, 0.06);
	
	sys.trigger($static_warnboard_online_2); //cell room
	sys.trigger($static_warnboard_offline_2);
	$light_8483.setColor(0.92, 0.69, 0.06);

	sys.trigger($static_warnboard_online_3); //cell room
	sys.trigger($static_warnboard_offline_3);
	$light_8485.setColor(0.92, 0.69, 0.06);

	
	sys.trigger($static_warnboard_online_4); //outside chain drag room
	sys.trigger($static_warnboard_offline_4);
	$light_8488.setColor(0.92, 0.69, 0.06);

	sys.trigger($static_warnboard_online_5); //outside chain drag room
	sys.trigger($static_warnboard_offline_5);
	$light_8490.setColor(0.92, 0.69, 0.06);

	sys.trigger($static_warnboard_online_7); //outside of process1
	sys.trigger($static_warnboard_offline_7);
	$light_8492.setColor(0.92, 0.69, 0.06);
}


//------------------------------------------------------------------------------
// void playRadioChatter and void playRadioChatterFromScript
//
// Since Sasaki might radio in with messages about Kane's health at any time, 
// use gvar_sasakiCanTalk to keep track of whether the radio is currently in
// use or not.
//------------------------------------------------------------------------------

// use this function to play radio chatter from a trigger in the map
void playRadioChatter(entity tgr)
{
	if (sys.getEntity(tgr.getKey("radio")) == $nullEntity)
		sys.println("radio key value on " + tgr.getName() + " is invalid, cannot play radiochatter");

	entity radio = sys.getEntity(tgr.getKey("radio"));

	while (gvar_sasakiCanTalk == 0)
	{
		if (gvar_sasakiIsAlive == 0)
			return;
		//sys.println("sasaki can't talk yet");
		// sasaki is already using the radio, don't let him cut himself off
		sys.wait(2);
	}
	//sys.println("sasaki can talk");

	gvar_sasakiCanTalk = 0;
	radioChatterPlayWait(radio, "");
	gvar_sasakiCanTalk = 1;
}

// use this function to play radio chatter without a trigger in the map
void playRadioChatterFromScript(entity radio)
{
	while (gvar_sasakiCanTalk == 0)
	{
		if (gvar_sasakiIsAlive == 0)
			return;
		//sys.println("sasaki can't talk yet");
		// sasaki is already using the radio, don't let him cut himself off
		sys.wait(2);
	}

	//sys.println("sasaki can talk");
	gvar_sasakiCanTalk = 0;
	radioChatterPlayWait(radio, "");
	gvar_sasakiCanTalk = 1;
}
/*UNUSED
//-------------------------------------------------------------------------------
// void sasakiConcerned()
//
// Causes Sasaki to respond when Kane gets injured
//
// gcarlson | Apr 2005
//-------------------------------------------------------------------------------

void sasakiConcerned()
{
	float currentHealth = $player1.getHealth(); // keeps track of Kane's health
	float timeIncrement = 30; // seconds between checking the health
	float index = 0; // which vo to play
	float speakOnce = 0; //sasaki should say a line only once

	while (gvar_sasakiIsAlive > 0)
	{
		sys.wait(timeIncrement);
		// talk if Kane took damage and Sasaki is at the radio
		if (currentHealth > $player1.getHealth() && gvar_sasakiCanTalk > 0) 
		{
			// Kane has taken damage.  Make Sasaki talk.
			gvar_sasakiCanTalk = 0; // don't allow other vo to overlap this
			index = sys.randomInt(3);
			if (index == 0 && speakOnce == 0)
			{
				radioChatterPlayWait($radio_sasaki_concern_3, ""); // "don't go dying on me" must be said just once
				speakOnce = 1; //never say this line again
			}
			else if (index == 1)
			{
				radioChatterPlayWait($radio_sasaki_concern_2, "");
			}
			else
			{
				radioChatterPlayWait($radio_sasaki_concern_1, ""); 
			}
			
			gvar_sasakiCanTalk = 1; // other vo can be played now
		}
		currentHealth = $player1.getHealth();
	}
}
*/


void sasakiLeavesRadio()
{
	while (gvar_sasakiCanTalk == 0)
	{
		// sasaki is already saying something, so wait for him to finish
		sys.wait(2);
	}

	gvar_sasakiCanTalk = 0; // don't allow Sasaki to talk about Kane getting hurt while he's away
	radioChatterPlayWait($radio_sasaki_brb, "");
	sys.wait(60);
	radioChatterPlayWait($radio_sasaki_back, "");
	gvar_sasakiCanTalk = 1; // Sasaki can talk again
}

/* UNUSED
//allow Sasaki to radio you when you get hurt
void sasakiCheckUp()
{
	thread sasakiConcerned();
}
END UNUSED */

//------------------------------------------------------------------------------------------
//	#recomp_track
//------------------------------------------------------------------------------------------


//------------------------------------------------------------
// void activateLeftTrack
//
// Activates the left track of barrels in the track room. Should 
// be threaded.
//------------------------------------------------------------
void activateLeftTrack()
{
	//this is a simple activation function, should 
	//have the barrel moving down the track, and repeating.
	//sys.println("left track active");
	//the right track will need multiple barrels.

	//grab the barrel
	entity entBarrel = $mvr_barrel_ltrack_1;

	//set up it's movement speed.
	entBarrel.time(8);

	//bind the light to it
	$lgt_ltrack_1.setOrigin(entBarrel.getOrigin());
	$lgt_ltrack_1.bind(entBarrel);

	//move it along
	while(1)
	{
		//move it to the beginning
		//entBarrel.setOrigin($spline_ltrack.getOrigin());

		//push it along
		//entBarrel.startSpline($spline_ltrack);
		
		//wait
		sys.wait(10);
	}

}

//------------------------------------------------------------
// void activateRightTrack
//
// Activates the right track of barrels in the track room. Should 
// be threaded.
//------------------------------------------------------------
void activateRightTrack()
{
//	sys.println("right track active");
	//grab the two barrels
	entity entBarrel1 = $mvr_barrel_rtrack_1;
	entity entBarrel2 = $mvr_barrel_rtrack_2;

	entBarrel1.setOrigin($spline_rtrack.getOrigin());
	entBarrel2.setOrigin($spline_rtrack.getOrigin());

	//set speeds and bind lights
	entBarrel1.time(18);
	entBarrel2.time(18);

	$lgt_rtrack_1.setOrigin(entBarrel1.getOrigin());
	$lgt_rtrack_2.setOrigin(entBarrel2.getOrigin());

	$lgt_rtrack_1.bind(entBarrel1);
	$lgt_rtrack_2.bind(entBarrel2);

	//this loop is a little more complex.
	while(1)
	{
		//move the first barrel into position, set it on it's way.
		entBarrel1.setOrigin($spline_rtrack.getOrigin());
		entBarrel1.startSpline($spline_rtrack);

		//10 seconds later, move the second barrel
		sys.wait(10);
		entBarrel2.setOrigin($spline_rtrack.getOrigin());
		entBarrel2.startSpline($spline_rtrack);

		//wait 10 more seconds, and repeat with the first barrel
		sys.wait(10);
	}
}

//After being released from the prison cell, Sasaki will ask Kane for his nailgun and mod it.
void sasakiGiveMod()
{
//	sys.println("sasakiGiveMod called");

	// ask for the nailgun
	aiScriptedFaceWait($npc_sasaki, $player1, true);
	aiSpeak($npc_sasaki, "lipsync_vo_2_2_4_75_1");
	aiScriptedAnimWait($npc_sasaki, "weaponless_point_front", 3, true);
	
	// wait for kane to be nearby
	vector playerPos = $player1.getWorldOrigin();
	vector sasakiPos = $npc_sasaki.getWorldOrigin();
	float displacementSquared = (playerPos_x - sasakiPos_x)*(playerPos_x - sasakiPos_x) + (playerPos_y - sasakiPos_y)*(playerPos_y - sasakiPos_y); 
	while (displacementSquared > 4096) // using the square of the displacement to avoid a slow square root calculation
	{
		// 4096 = 64 squared -> wait until the player is within 64 units.
		sys.wait(.5);
		playerPos = $player1.getWorldOrigin();
		sasakiPos = $npc_sasaki.getWorldOrigin();
		displacementSquared = (playerPos_x - sasakiPos_x)*(playerPos_x - sasakiPos_x) + (playerPos_y - sasakiPos_y)*(playerPos_y - sasakiPos_y);
	}
	$player1.bind($light_prisonCell); // bind him to whatever, as long as it doesn't move
	
	// get sasaki in position
	// sys.println("get sasaki in position");
	aiScriptedFaceWait($npc_sasaki, $player1, true);

	// animate some fidgeting
	$player1.selectWeapon("weapon_nailgun");
	aiScriptedAnimWait($npc_sasaki, "recomp_mod_hyper", 10, true);

	// give kane the mod and let him go
	sys.trigger($tgr_give_mod);
	aiSpeak($npc_sasaki, "lipsync_vo_2_2_4_75_2");
	$player1.unbind();
}

void openCell1()
{
	sys.trigger($speaker_cell1);
	sys.trigger($target_light_fadeout_cell1);
	sys.trigger($target_entity_fadeout_cell1);
	$mover_prisonCell_1.move(-1,120);
		
	sys.waitFor($mover_prisonCell_1);
	$func_static_54197.remove();
}

void openCell4()
{
	sys.trigger($speaker_cell4);
	sys.trigger($target_light_fadeout_cell4);
	sys.trigger($target_entity_fadeout_cell4);
	$mover_prisonCell_4.move(-1,120);
		
	sys.waitFor($mover_prisonCell_4);
	$func_static_54199.remove();	
}


//----------------------------------------------------------
// void openPrison
// opens cell2
//----------------------------------------------------------
void openPrison()
{
	//if the prison has already been opened, then quit this function.
	if(gvar_PrisonOpen == 1)
		return;

	//set the success var
	gvar_PrisonOpen = 1;

	//fade out the prison cell
	
	//the current time
	float fCurrentTime;
	float fTempTime;

	//the difference bewteen time checks
	float fDifference;

	//how many seconds we want to fade over
	float FADE_TIME = 2;

	//values for the parms
	float fRed   = 0.92;
	float fGreen = 0.45;
	float fBlue = 0.09;
	float fLog = 0.01;
	string s;
	
	//NOTE, not really blue.
	vector vecBlue = ('0.92 0.45 0.09');
	vector vecNormal = ('1 0.81 0.49');
	//we want to bounce the light and the shell to blue, then fade them out.

	//set the light and gate to blue:
	$static_prisonGate_1.setShaderParms(fRed,fGreen,fBlue,1);
	$static_prisonGate_1.setShaderParms(fRed,fGreen,fBlue,1);
	//sys.println("Should be bright/light blue...");

	//start playing the sasaki release anim
//	sys.killthread( "prisonerScreaming");
//	aiScriptedAnim($npc_sasaki, "prison_release", 4, 1); anim is on the wrong rig
	
	sys.wait(1);
	
	$recomp_boombox_1.setOrigin($static_prisonGate_1.getOrigin());
	//sys.println("At  " + $recomp_boombox_1.getOrigin());

	float t= 0;
	float fFlip = 0;
	//flicker for a bit
	for(t = 0; t < 20; t++)
	{
		if(fFlip == 0)
		{
			//turn 'em off
			$light_prisonCell.setLightParms(vecNormal_x,vecNormal_y,vecNormal_z,1);
			$static_prisonGate_1.setShaderParms(0,0,0,1);
			//sys.startSound("bzzt");
			$recomp_boombox_1.startSound( "snd_drop_forcefield", SND_CHANNEL_ANY, false  );
			fFlip = 1;
		}
		else
		{
			$light_prisonCell.setLightParms(vecBlue_x,vecBlue_y,vecBlue_z,1);
			$static_prisonGate_1.setShaderParms(fRed,fGreen,fBlue,1);
			//turn 'em on
			fFlip = 0;
		}

		sys.wait(sys.random(0.15));
	}

	$light_prisonCell.setLightParms(vecBlue_x,vecBlue_y,vecBlue_z,1);
	$static_prisonGate_1.setShaderParms(0,3,3,1);

	//fade the lamp to normal colors
	thread crossFadeEnt($light_prisonCell,vecBlue,vecNormal,1.5);
	
	//fade out the force field
	while(fBlue > 0)
	{
		//set the parms
		$static_prisonGate_1.setShaderParms(fRed,fGreen,fBlue,1);

		s = fBlue;
		//sys.println("fBlue = " + s);
		
		//subtractify
		fGreen = fGreen - fLog;
		fBlue = fBlue - fLog;
		fRed = fRed - fLog;
		
		//trying here for a non-linear fall off.
		fLog+= (fLog * .03);
		sys.wait(.01);
	
	};

	//sasaki looks at the player
	$npc_sasaki.lookAt($player1);

	$static_prisonGate_1.remove();
	//sys.println("Faded!");

	//raise the mighty elevator
	//$mvr_prisonElevator.time(1);
	$mvr_prisonElevator.move(-1,120);

	//wait for the elevator to finish moving
	sys.waitFor($mvr_prisonElevator);

	aiSpeak($npc_sasaki, "lipsync_vo_2_2_4_40_1");
	aiScriptedAnimWait($npc_sasaki, "weaponless_idle5_loop", 8, 0);
	aiScriptedAnimWait($npc_sasaki, "weaponless_idle5_end", 0, 1);	
	
	sys.wait(4);
	sys.trigger($objective_exit_level_1);
	sys.wait(1);
	
	//once he's done with his thing, have him give you the mod
	sasakiGiveMod();

	//assign sasaki to the player
	$npc_sasaki.setLeader($player1);
	$npc_sasaki.lookAt($null_entity);
	
	$npc_sasaki.enableHeal(); //make it so sasaki can give armor again. (disabled on spawn)

	//unlock the chain drag door.
	$door_frame_chainroom_intro.setShaderParm(7, 1);
	$door_chainroom_intro.lock(0);
	

}

//--------------------------------------------------------------------
//	void setPrisonCells()
//--------------------------------------------------------------------
void setPrisonCells()
{
	//set script global to locked for this
	gvar_PrisonOpen = 0;
}

void lightTankCin()
{
	//fade in
	sys.fadeIn('0 0 0', 2);
	
	$lighttank_barrel_cin.show();
		
	sys.trigger($cin_recomp_cam_1);
	
	sys.trigger($func_door_14);
				
	sys.trigger($cinematic_music);
	aiScriptedAnim($lighttank_cin, "cinematic_lttank", 0, 1);
	aiScriptedAnim($strgmrn_cin, "cinematic_strogg_marine", 0, 1);

	aiScriptedAnim($recomp_character_kane_1, "cinematic_kane", 0,1);

	//$lighttank_barrel_cin.playAnim( ANIMCHANNEL_ALL, "crush" );
	$lighttank_cin.setEnemy($player1);
	//sys.wait(6);
		
	//barrels share same number of frames as other anims, after it ends, continue with the rest of the action
	playAnimWait($lighttank_barrel_cin, ANIMCHANNEL_ALL, "crush");
	
	//kill strogg marine
	$strgmrn_cin.kill();
	
	$player1.damageEffect("dmg_shellshock" , $target_null_explosion_origin);
	
	//remove kane after cinematic -corey
	$recomp_character_kane_1.remove();
	$lighttank_barrel_cin.remove();
	$foomable_barrel_red_stroyent_20.show();
}

//------------------------------------------------------------------------------------------
//	#recomp_process1
//------------------------------------------------------------------------------------------

//-------------------------------------------------------------------
//	void setAllProcessOneLightParmsTo(vector vParm)
//
//  This is a helper function designed to make the code a bit more clean
//  in the powerUp function for process room on.
//-------------------------------------------------------------------
void setAllProcessOneLightParmsTo(vector vParm)
{
	//this will loop through the list of lights and change them 
	//to this color defined by vParm

	float t;
	for(t = 1; t < NUM_LIGHTS_IN_PROCESS_ONE + 1; t++)
	{
		entity light = sys.getEntity("light_p1_" + t);
		if (light != $nullEntity)
			light.setLightParms(vParm_x,vParm_y,vParm_z,1);
	}
}

/*
void setRandomProcessOneLightParmsTo(vector vParm)
{
	//this will loop through the list of lights and change them 
	//to this color defined by vParm

	float t;
	for(t = 1; t < NUM_LIGHTS_IN_PROCESS_ONE + 1; t++)
	{
		if(sys.random(10) < 5)
		{
			entity light = sys.getEntity("light_p1_" + t);
			light.setLightParms(vParm_x,vParm_y,vParm_z,1);
		}
	}
} UNUSED */

//-------------------------------------------------------------------
//	void fadeInAllProcessOneLights()
//
//  This function will fade in all process room 1 lights, from off to 
//  on.
//-------------------------------------------------------------------
void fadeInAllProcessOneLights()
{
	//this will loop through the list of lights and change them 
	//to this color defined by vParm
	vector vStart;
	
	entity temp = sys.getEntity("light_p1_1");

	//vStart_x = temp.getLightParm(0);
	//vStart_y = temp.getLightParm(1);
	//vStart_z = temp.getLightParm(2);
	
	float t;
	float fLightVal = 0.0;
	float fAddVal = 0.001;

	//On^2... sorry :(
	while(fLightVal <= 1.0)
	{
		for(t = 1; t < NUM_LIGHTS_IN_PROCESS_ONE + 1; t++)
		{
			entity light = sys.getEntity("light_p1_" + t);
			if (light != $nullEntity)
				light.setLightParms(fLightVal,fLightVal,fLightVal,1);
		}
		
		//increment
		fAddVal *= 1.05;
		fLightVal += fAddVal;

		//turn up the fog -- jersey wants 162, 72, 27
		$light_p1_fog.setLightParms((162/255) * fLightVal,(72/255) * fLightVal,(27/255) * fLightVal, 1);
		sys.wait(0.015);
	}

}


/*
//------------------------------------------------------------------------------------------
//	#recomp_process2
//------------------------------------------------------------------------------------------
//-------------------------------------------------------------------
//	void powerUpProcessTwo()
//
//	This script activates the ProcessTwo room. The triple barrel arm will
//	be activated, and not much else.
//-------------------------------------------------------------------
void powerUpProcessTwo()
{
	//if the first process isn't active, quit out
	//TODO: Make a cool "no-go" sound play here
	//if(gvar_P1Active == 0)
	//{
	//	sys.println("Activate p1 first!");	
	//	return;
	//}
	
	//if we've already done this, quit out
	if(gvar_P2Active == 1)
	{
//		sys.println("Activated already!");	
		return;
	}
	//turn on the machine
	$env_generic_barrel_arm_1.playCycle( ANIMCHANNEL_ALL ,"test");

	//set the variable
	gvar_P2Active = 1;
//	sys.println("P2 is a go!");	
//	$gui_barrel_station_2.setGuiParm( "gui_parm1", 1);
	$gui_barrel_station_2.guiEvent( "gui_online" );
	$light_8475.setColor(0, 0.84, 0.01);
	
	//turn on right track
	thread activateRightTrack();

	//wake up this villain here
	//$mon_grunt_p2_1.activate($player1); 4/17/05 gc:  mon_grunt_p2_1 is a null entity

	//finish the objective
	sys.trigger($complete_objective_assembly);
	
	//play the sounds
	playRadioChatterFromScript($radio_barrelroom2_2);
	sys.wait(.5);
	thread checkBothRooms();
	
	//setup monsters on the way back
	sys.print("monster pass on way back activated");
	sys.trigger($trigger_once_process2_activated);
}

*/

//-------------------------------------------------------------------------------
// void checkBothRooms()
//
// Checks barrel room 1 and 2 for activation
//
// jshepard | Nov 2004
//-------------------------------------------------------------------------------
void checkBothRooms()
{
	$gui_main_barrel_control.guiEvent( "gui_ready" );
	playRadioChatterFromScript($radio_barrelroom2_3);

} //-------------- End void checkBothRooms ---------------


//called after control room is active and player is on way back to meet sasaki.
void saskineedshelp()
{
	playRadioChatterFromScript($radio_sasaki_help);
}


//-------------------------------------------------------------------------------
// void sasakiSpotlight()
//
// Manipulates a light near Sasaki to draw attention to him as he's dragged away.
//
// gcarlson | Apr 2005
//-------------------------------------------------------------------------------
void sasakiSpotlight()
{
	while (1)
	{
		$lgt_sasaki_spotlight.On();
		sys.wait(sys.random(0.75));
		$lgt_sasaki_spotlight.Off();
		sys.wait(sys.random(0.25));
	}
}

void stopSasakiSpotlight()
{
	// If the player gets too close to the light, they'll see how horrible that fake room looks.
	// And besides, if they get that close they will definitely notice the grunt.  So just shut
	// off the light and leave it off.

//	sys.println("stopSasakiSpotlight");

	sys.killthread("sasakiSpotlight");
	$lgt_sasaki_spotlight.Off();
}

void makeSasakiBleed()
{
	sys.trigger($func_static_sasakiblood); //show blood
	sys.wait(.25);
	sys.trigger($func_fx_gruntmashsasaki_1); //explode blood
	sys.wait(.5);
	sys.trigger($func_fx_gruntmashsasaki_2);
}

//-------------------------------------------------------------------------------
// void killSasaki()
//
// Kill npc_sasaki.
//
// jshepard | Nov 2004
//-------------------------------------------------------------------------------
void killSasaki()
{
	gvar_sasakiCanTalk = 0;
	gvar_sasakiIsAlive = 0;

	thread makeSasakiBleed(); //bleed!
	
	aiScriptedAnim($npc_sasaki_dying, "ad_marine_dragged", 4, 0);
	aiScriptedAnimWait($mon_sasaki_dragger, "ad_grunt_drags", 4, 0);

	//close the door and lock it so the player can't follow
	$door_abduct_sasaki.lock(1);
	sys.wait(1);
	sys.killthread("sasakiSpotlight");
	$npc_sasaki_dying.remove();
	$mon_sasaki_dragger.remove();
	
	sys.trigger($speaker_sasakidoom_1);
	sys.wait(.5);
	sys.trigger($speaker_sasakidoom_2);

	//trigger sasaki is dead objective
	sys.wait(2);
	sys.trigger($recomp_sasdead);

} //-------------- End void killSasaki ---------------


//-------------------------------------------------------------------------------
// void killSasakiSetup()
//
// Set up the death scene so it's ready to fire when the player walks into view.
//
// gcarlson | Apr 2005
//-------------------------------------------------------------------------------
void killSasakiSetup()
{
	gvar_sasakiCanTalk = 0; 
//	sys.trigger($mon_sasaki_dragger);

	sys.trigger($door_abduct_sasaki);
	sys.waitFrame();
	$door_abduct_sasaki.open();
	thread sasakiSpotlight(); // start the light flickering to draw attention to this area

	$npc_sasaki.remove();  // get rid of the old Sasaki

	//place him at the kill spot
	$npc_sasaki_dying.setWorldOrigin($mon_sasaki_dragger.getWorldOrigin());
	$npc_sasaki_dying.setAngles($mon_sasaki_dragger.getAngles());
	$mon_sasaki_dragger.show();
}


//-------------------------------------------------------------------------------
// void lockChainRoom()
//
// Lock the doors to the chain drag puzzle room
//
// jshepard | Nov 2004
//-------------------------------------------------------------------------------
void lockChainRoom()
{
//	sys.println("void lockChainRoom::begin");

	$static_doorframe_chain_1.setShaderParm(7,0);
	$static_doorframe_chain_2.setShaderParm(7,0);
	$door_chain.lock(1);
		
//	sys.println("void lockChainRoom::end");

} //-------------- End void lockChainRoom ---------------

void unlockChainRoom()
{
//	sys.println("void unlockChainRoom::begin");

	$static_doorframe_chain_1.setShaderParm(7,1);
	$static_doorframe_chain_2.setShaderParm(7,1);
	$door_chain.lock(0);
	sys.trigger($speaker_60);

//	sys.println("void unlockChainRoom::end");

}


//------------------------------------------------------------------------------------------
//	#recomp_outdoor
//------------------------------------------------------------------------------------------


//------------------------------------------------------------
// void moveHereAndRappel(entity entMover, string strTarget)
//
// Moves the entity to the target location, then calls the rappel 
// animation. The hack here is in the facing, as we are forcing it to 
// face the towers for lack of a better method.
//------------------------------------------------------------

void moveHereAndRappel(entity entMover, string strTarget)
{
	entity entTarget = sys.getEntity(strTarget + "_look");
	
	// added this for the rope -corey
	entity entRope = sys.getEntity(strTarget + "_rope");
	
	//move to the location
//		entMover.disableClip(); This makes them fall through the floor.
		aiScriptedMoveWait ( entMover, sys.getEntity(strTarget), 0, true );
		//sys.println(entMover.getName() + " is at location!");

	//move to the exact location and face the tower
		entMover.setOrigin(entTarget.getOrigin());
		entMover.setAngles('0 -90 0');
		//sys.println(entMover.getName() + " is rappeling!");
	
	//rope it up
		entRope.playAnim( ANIMCHANNEL_ALL, "chain_rappel");
	
	//rappel down
		entMover.disableClip();
		aiScriptedAnimWait ( entMover, "recomp_rapel_a", 0, true );
		entMover.enableClip();
	
	//blast the player
		entMover.activate($player1);
}

//------------------------------------------------------------
// void spawnOutdoorTransfers
//
// Spawns a quintet of tactical transfers to jump, rappel, and 
// sneak into the outdoor battlefield. Is good times.
//------------------------------------------------------------
void spawnOutdoorTransfers()
{
	//open the door
		//sys.println("opening door");
		$door_outdoor_plat.open();
		sys.wait(2);
		//sys.println("showing transfers");

	//activate the stealth transfers
		$tact_outdoor_2.show();
		$tact_outdoor_3.show();

	//move them to position
		thread moveHereAndRappel($tact_outdoor_2,"tgt_rappel_2");
		aiScriptedMove ( $tact_outdoor_3, $tgt_shoot_1, 0, true );
		sys.wait(2);

	//activate and send out the last one
		$tact_outdoor_1.show();
		thread moveHereAndRappel($tact_outdoor_1,"tgt_rappel_1");

	//wait a couple of seconds, then close the door
		sys.wait(4);
		$door_outdoor_plat.close();

	//just activate 4 and 5, let them go and attack after the rappeling is done
//		$tact_outdoor_4.show();
//		$tact_outdoor_5.show();
		
//		$tact_outdoor_4.activate($player1);
//		$tact_outdoor_5.activate($player1);

	//wait a few tics, then drop in that gladiator
	//	sys.wait(4);
	//	sys.trigger($mon_outdoor_gladiator_1); This monster no longer exists.

}

//------------------------------------------------------------------------------------------
//	#recomp_control
//------------------------------------------------------------------------------------------

//--------------------------------------------------------
//
// void powerUpCentralControlLights()
//
// This function activates the lights in barrel hall in the central
// control room. They activate, from right to left, over the course
// of about four seconds. 
//--------------------------------------------------------

void powerUpCentralControlLights()
{
	//this is how many lights we'll power
	float NUM_LIGHTS;
	NUM_LIGHTS = 8;
	
	//the array
	string arLights;

	//a temp entity
	entity entTemp;

	//a counter
	float t;

	/*
	//here's our array of lights
	arLights = sys.createEntityArray(NUM_LIGHTS);

	for(t = 1; t <= NUM_LIGHTS; t++)
	{	//this is the smooveness.
		sys.arraySetEntity(arLights,t - 1,sys.getEntity("lgt_control_" + t));
	}
	*/

	t = 1;

	//turn all the lights on in the loop ahead
	while(t <= 8)
	{
		//turn on two lights by changing them from green to red.
		entTemp = sys.getEntity("lgt_control_" + t);
		entTemp.setLightParms(0,1,0.2,1);
		entTemp.setShader("lights/round");
		t++;
		
		entTemp = sys.getEntity("lgt_control_" + t);
		entTemp.setLightParms(0,1,0.2,1);
		entTemp.setShader("lights/round");
		t++;
		
		$recomp_boombox_1.setOrigin(entTemp.getOrigin());
		$recomp_boombox_1.startSound("snd_lights_on",SND_CHANNEL_ANY, false );
		//wait a bit
		sys.wait(1.2);
	}

	//lights should be up!

}

//--------------------------------------------------------
//
// void activateMovingBarrelsInControlRoom()
//
// This will turn on the barrel line in the control room
//--------------------------------------------------------
void activateMovingBarrelsInControlRoom()
{
	//this is a pretty mundane pattern
	/*
		barrel1 goes to point1 and gets filled, barrel2 sets origin to point3.

		barrel1 moves to point2, barrel2 moves to point1.

		barrel1 setsOrigin to point3, barrel2 gets filled.

		barrel2 moves to point2, barrel1 moves to point1.

		rinse and repeat.

	*/

	//get the barrels
	entity entBarrel1 = $static_center_barrel_1;
	entity entBarrel2 = $static_center_barrel_2;

	//get the destination points
	entity entDest1 = $tgt_barrel_go_here_1;
	entity entDest2 = $tgt_barrel_go_here_2;
	entity entDest3 = $tgt_barrel_go_here_3;

	//move the barrels to the starting positions
	entBarrel1.setOrigin(entDest1.getOrigin());
	entBarrel2.setOrigin(entDest3.getOrigin());

	//set times for movement
	entBarrel1.time(3);
	entBarrel2.time(3);

	//special effects
	vector vecFxAngle;
	vecFxAngle = ('0 0 1');

	//begin!
	while(1)
	{
		//step 1: fill barrel 1
		//sys.println("Fillin that barrel1, oh yeah!");
		sys.playWorldEffect("effects/smoke_steam/green_steam_large",entDest1.getOrigin(),vecFxAngle);
		sys.playWorldEffect("effects/ambient/spark_green",entDest1.getOrigin(),vecFxAngle);

		$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_start");
		sys.wait(5);
		sys.playWorldEffect("effects/ambient/spark_green",entDest1.getOrigin(),vecFxAngle);
		$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_end");
		sys.wait(3);
		$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_idle");
		//step 2: move barrels
		entBarrel1.setLinearVelocity(calcMoveSpeedByEntity(entDest1,entDest2,3));
		entBarrel2.setLinearVelocity(calcMoveSpeedByEntity(entDest3,entDest1,3));
		//sys.playWorldEffect("effects/smoke_steam/green_steam_large",entDest1.getOrigin(),vecFxAngle);


		sys.wait(3);

		entBarrel1.setLinearVelocity('0 0 0');
		entBarrel2.setLinearVelocity('0 0 0');


		//step 3: fill barrel2, move barrel1
		entBarrel1.setOrigin(entDest3.getOrigin());

		//sys.println("Barrel2's turn...");
		sys.playWorldEffect("effects/smoke_steam/hi_pressure_fade_out",entDest1.getOrigin(),vecFxAngle);
		sys.playWorldEffect("effects/ambient/spark_green",entDest1.getOrigin(),vecFxAngle);
		$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_start");
		sys.wait(5);
		sys.playWorldEffect("effects/ambient/spark_green",entDest1.getOrigin(),vecFxAngle);
		$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_end");
		sys.wait(3);
		$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_idle");

		//step 4: move barrels
		entBarrel1.setLinearVelocity(calcMoveSpeedByEntity(entDest3,entDest1,3));
		entBarrel2.setLinearVelocity(calcMoveSpeedByEntity(entDest1,entDest2,3));

		sys.wait(3);

		entBarrel1.setLinearVelocity('0 0 0');
		entBarrel2.setLinearVelocity('0 0 0');

		//remix barrels
		entBarrel2.setOrigin(entDest3.getOrigin());
	}

}
//--------------------------------------------------------
//
// void controlRoomNotReady()
//
// This plays if the control room is not ready and the gui is activated.
//--------------------------------------------------------
void controlRoomNotReady()	
{
	if (gvar_storageSystemAlreadyFailed > 0) // only do this once
		return;

	//complete objective at this time instead of end of level now
	sys.trigger($complete_objective_main_complete);

	gvar_storageSystemAlreadyFailed = 1;
		
	//lock door so player can't return without completing objective.
	$func_static_9373.setShaderParm(7, 0);
	$func_door_7.lock(1);		//lock door
	sys.trigger($speaker_140); 	//lock sound
		
	playRadioChatterFromScript($radio_controlroom_2);
//	sys.trigger($objective_assembly); moved after sanitation is complete to force linear path.
	sys.wait(2);
	sys.trigger($objective_sanitation);
	sys.wait(1.5);
	//unlock doors out of room
	sys.trigger($trigger_relay_9);
}

//--------------------------------------------------------
//
// void powerUpControlRoom
//
// This will fully power up the control room if both the
// other barrel movers have been activated. 
//--------------------------------------------------------
void powerUpControlRoom()
{
	//check to see if both the globals have been set
	//
	// if both barrel movers are on:
	//   turn gui to accept:
	//   activate this room
	// else
	//   turn gui to deny
	//   chill
	// end if

	if(gvar_P1Active == 0)
	{
		//tell the player through a VO.
		
	//	sys.println("First activate the two barrel processing machines, then come back here.");
		return;
	}
	if(gvar_P2Active == 0)
	{
	//	sys.println("You've only activated one barrel machine, you have to turn the other one on too.");
		return;
	}
	if(gvar_ControlActive == 1)
	{
		//already activated!
		return;
	}

	//so, power-up the lights
	powerUpCentralControlLights();

	//play the working sound
	playRadioChatterFromScript($radio_controlroom_3);

	sys.wait(1);

	//activate return trigger for monster pass on way back to saski
//	sys.println("objectives complete, return to saski");
	sys.trigger($trigger_once_returntosaski);
		
	//shut down the spinner lights
	shutdownWarningLights();
	
	//swap all the offline guis/lights with.
	swapOfflineSystems();

	//move barrel1 into position
	$static_center_barrel_1.setLinearVelocity(calcMoveSpeedByEntity($tgt_barrel_go_here_3,$tgt_barrel_go_here_1,3));
	sys.wait(3);
	$static_center_barrel_1.setLinearVelocity('0 0 0');

	//now we can begin the sequence
	thread activateMovingBarrelsInControlRoom();
	
	//system online!
	sys.trigger($spkr_pa_online);

	// allow the chain room end sequence to occur
	sys.trigger($tgr_chain_room);
	sys.trigger($tgr_sasaki_scream);
	$gui_chaindrag.setGuiParm("noninteractive", "0");
	unlockChainRoom();
	
	$func_static_9373.setShaderParm(7, 1);	//set shaderparm
	$func_door_7.lock(0);					//unlock door
	sys.trigger($speaker_139); 				//unlock sound

	//that should do.
	gvar_ControlActive = 1;
}

//-------------------------------------------------------------------
//	void powerUpProcessOne()
//
//	This script activates the ProcessOne room. It will cause the lights
//  to flicker and then fade, simulating a power outage. 
//-------------------------------------------------------------------
void powerUpProcessOne()
{
	//first make sure it's not already powered up.
	//
	//then, we begin the good times:
	/*
	
		Once the gui is activated, the room will power up slightly, then quickly
		flicker and black out, leaving the player in darkness.

		After a couple of seconds of that, the sound of machinery will begin and
		the lights will power back up (into a different color or state).

		Sounds to play- thanks to the zackness:
	
		recomp_lights_powerup01 - first light power up
		recomp_lights_flicker - when the player thinks the lights broke
		recomp_lights_powerup02 - 2nd power up.
	
	*/

	//if we've already activated the room, quit out
	if(	gvar_P1Active == 1)
		return;
	//flip the var
	gvar_P1Active = 1;
	$func_static_1848.setGuiParm( "noninteractive", "1" ); //no need to interact any more
	
	$p1_door_1.lock(1);
	sys.trigger($speaker_158);
	
	//activate monster pass for trip back to control room.
	sys.trigger($trigger_once_process1_activated);
	
	//move the boombox to the center of the room
	$recomp_boombox_1.setOrigin($light_p1_fog.getOrigin());

	//set them all to the brightness
	setAllProcessOneLightParmsTo('1 1 1');
	$recomp_boombox_1.startSound("snd_lights_powerup01", SND_CHANNEL_ANY, false );
	sys.wait(2.5);
		
	//kill the fog lights
	$light_p1_fog.setLightParms(0,0,0, 1);

	float t;
	$recomp_boombox_1.startSound("snd_lights_flicker", SND_CHANNEL_ANY, false );

	for (t =0; t< 8; t++)
	{
		setAllProcessOneLightParmsTo('1 1 1');
		sys.wait(sys.random(.1));
		setAllProcessOneLightParmsTo('0 0 0');
		sys.wait(sys.random(.4));
	}
	
	//darken the room
	setAllProcessOneLightParmsTo('0 0 0');
	
	//radio chatter
	playRadioChatterFromScript($radio_barrelroom_2);

	sys.wait(2);
	
	//turn on the fog again and turn up the lights...
	$recomp_boombox_1.startSound("snd_lights_powerup02", SND_CHANNEL_ANY, false );
	fadeInAllProcessOneLights();
	$env_generic_4barrel_arm_1.playCycle( ANIMCHANNEL_ALL ,"idle");
	sys.trigger ( $sanitation_barreldipfx );

	//turn on one of the barrel tracks
	//thread activateLeftTrack();

	//turn on the gui in the main control room
	//$gui_barrel_station_1.setGuiParm( "gui_parm1", 1);
	$gui_barrel_station_1.guiEvent( "gui_online" );
	$gui_barrel_station_2.guiEvent( "gui_online" );
	$light_8476.setColor(0, 0.84, 0.01);
	
	/////////Things needed since Process2 was cut. -Chad///////
	gvar_P2Active = 1;
	//finish the objective
	sys.trigger($complete_objective_sanitation);
	$gui_main_barrel_control.guiEvent( "gui_ready" );
	$light_8475.setColor(0, 0.84, 0.01);
	/////////////////End -Chad//////////////////////
	
	//sasaki line here
	playRadioChatterFromScript($radio_barrelroom_3);
		
	//let player out of the room
	$p1_door_1.lock(0);
	sys.trigger($speaker_159);
	
	/* there is no second objective now -corey
	
	//trigger off second objective.
	sys.trigger($trigger_relay_11); //unlock and set shaderparm7 on door
	sys.trigger($objective_assembly); //trigger objective
	
	//setup monsters on the way back
	sys.print("monster pass on way back activated");
	sys.trigger($trigger_once_process2_activated);
	sys.wait(.5);
	thread checkBothRooms();
	
	*/
	
	//activate it all in one fell swoop.
	thread powerUpControlRoom();
	
	//swap the gui since the button no longer is functional
	$gui_main_barrel_control.hide();
	$gui_main_barrel_control_online.show();
}

//------------------------------------------------------------------------------------------
//	#recomp_chain
//------------------------------------------------------------------------------------------

void setupCraneRoom()
{
	//disable gui
	$gui_chaindrag.setGuiParm("noninteractive", "1");
}

void barrelPuzzleForwardButton()
{
	if ($mvr_catch.getKey("curNode") == "tgt_palette_pos_1") 
	{
		$mvr_catch.time(3);
		sys.trigger($speaker_153);
		$mvr_catch.moveTo($tgt_palette_pos_2);
		$mvr_catch.setKey("curNode", "tgt_palette_pos_2");
		sys.waitFor($mvr_catch);
		$gui_chaindrag.guiEvent("barrelsInPlace");
	}
}


void barrelPuzzleBackwardButton()
{
	if ($mvr_catch.getKey("curNode") == "tgt_palette_pos_2") 
	{
		$gui_chaindrag.guiEvent("disableBarrels"); // don't let the user push this button again
		
		$mvr_catch.time(3);
		sys.trigger($speaker_153);
		$mvr_catch.moveTo($tgt_palette_pos_1);
		$mvr_catch.setKey("curNode", "tgt_palette_pos_1");
	}
}

//lights on ceiling blink in pattern
void barrelLightSequence()
{
	sys.wait(2);
	sys.trigger($light_barrelrun_1a);
	sys.trigger($light_barrelrun_1b);
	sys.wait(1);	
	sys.trigger($light_barrelrun_2a);
	sys.trigger($light_barrelrun_2b);
	sys.wait(1);	
	sys.trigger($light_barrelrun_3a);
	sys.trigger($light_barrelrun_3b);
	sys.wait(1);	
	sys.trigger($light_barrelrun_4a);
	sys.trigger($light_barrelrun_4b);
	sys.wait(1);	
	sys.trigger($light_barrelrun_5a);
	sys.trigger($light_barrelrun_5b);
	sys.wait(1);	
	sys.trigger($light_barrelrun_6a);
	sys.trigger($light_barrelrun_6b);
}	

void barrelPuzzleBarrelsButton()
{
	$gui_chaindrag.guiEvent("disableBarrels"); // don't let the user push this button again
	$gui_chaindrag.guiEvent("disableArrows"); // don't let the user move the catch while dropping barrels
		
	sys.trigger($speaker_161); //warning sound for start up
	
	//trigger light sequence
	thread barrelLightSequence();
		
	sys.trigger($speaker_152); //track sound (timed to event)
	//setNewTimes($crane_mover , 10 , 0 , 1 );
	//$crane_mover.time(10); time doesn't work on splines
	$crane_mover.setSpeed(150); //was 90
	$crane_mover.setAccel(50);
	$crane_mover.setDecel(50);
	$crane_mover.setSpline($crane_arm_path);
	sys.waitFor($crane_mover);

	//lower crane
	sys.wait(.5);
	sys.trigger($speaker_lowerbarrels); //lower sound
	$mvr_crane_hook.time(2); //was 4, adjusted for accel/decel times set on mover.
	$mvr_crane_hook.moveTo($tgt_cranepath_3);
	sys.waitFor($mvr_crane_hook);
	$mvr_crane_barrel_1.unbind();

	//bind barrels to palette
	sys.wait(.2);
	$mvr_crane_barrel_1.bind($mvr_palette);

	$gui_chaindrag.guiEvent("enableArrows"); // it is safe to use the arrow buttons again

	//raise crane
	$mvr_crane_hook.moveTo($tgt_cranepath_2);
	sys.wait(4);
}

void barrelPuzzlePaletteButton()
{
//	sys.println("barrelPuzzlePaletteButton called");

	// don't do anything if the controls haven't been activated
	if(gvar_ControlActive == 0)
	{
		//sys.println("You must activate the main filling station before this can be operated.");
		return; 
	}

	// don't do anything if the catch is in the wrong position
	if($mvr_catch.getKey("curNode") != "tgt_palette_pos_1")
	{
		//sys.println("The palette mover is not in position.");
		//sys.println($mvr_palette.getKey("curNode"));
		return;
	}

	// don't do anything if the palette has already been dropped
	if(gvar_platformConnected == 1)
		return;

	// everything is in order, and this button should function

	gvar_platformConnected = 1; 

	$gui_chaindrag.guiEvent("disableArrows"); // don't let the user move the catch while dropping barrels

	//sys.println("animating chain arm");
	$env_chain_arm.playAnim( ANIMCHANNEL_ALL, "pickup_pallet");
	sys.wait(1.25);
	$mvr_paletterelease_1.move(90,12);
	$mvr_paletterelease_2.move(270,12);
	sys.wait(1.00); // frame 54
	$mvr_palette.bindToJoint( $env_chain_arm, "arm_3", 0);
	sys.wait(0.58); // frame 68
	$mvr_palette.bindToJoint( $env_chain_arm, "arm_3", 1);
	sys.wait(1.33); // frame 106
	$mvr_paletterelease_1.move(270,12);
	$mvr_paletterelease_2.move(90,12);
	$mvr_palette_reload.move(-1,120);
	$mvr_palette.bindToJoint( $env_chain_arm, "arm_3", 0);
	$mvr_palette.rotateTo('-90 0 0');
	while(!$env_chain_arm.animDone( ANIMCHANNEL_ALL, 0))
	{
		sys.wait(1);
	}

	$mvr_palette.unbind();
	$mvr_palette.bind($mvr_catch);
	//sys.println("finished animating chain arm");

	$env_chain_arm.playAnim( ANIMCHANNEL_ALL, "return_pallet");

	$gui_chaindrag.guiEvent("enableArrows"); // it is safe to use the arrow buttons again
}


//-------------------------------------------------------------------------------
// void rotatePalette()
//
// Rotates the palette from the original vertical position to horizontal.
// Called from frame 85 in the palette arm's animation.
//
// gcarlson | Jan 2005
//-------------------------------------------------------------------------------
void rotatePalette()
{
	// In the animation, there is a pause from frame 85 to frame 135 set aside
	// specifically for this rotation. 

//	sys.println( "void rotatePalette called");
	vector vAngles = $mvr_palette.getAngles();
//	$mvr_palette.unbind();
//	sys.waitFrame();
	$mvr_palette.time( 1);
	$mvr_palette.move( NORTH, 16); // shift during the rotate to avoid gap
	$mvr_palette.rotateDownTo( 2, 270);
	sys.waitFor( $mvr_palette);
	$mvr_palette.bindToJoint( $env_chain_arm, "arm_3", 0);

}

//-------------------------------------------------------------------------------
// void dropPalette()
//
// Removes the palette from the arm and attaches it to the catch.
// Called from frame 135 in the palette arm's animation.
//
// gcarlson | Jan 2005
//-------------------------------------------------------------------------------
void dropPalette()
{
//	sys.println("dropPalette called");
//	$mvr_palette.unbind();
	$mvr_palette.bind($mvr_catch);
//	sys.println("dropPalette return");
}

float usePostHeal = 0;

void sasakiHeal()
{
	if ( usePostHeal == 1 )
	{
		sys.println("use post heal");
		aiScriptedFaceWait($npc_sasaki, $gui_chaindrag, 1);
		aiScriptedAnimLoop($npc_sasaki, "console_idle", 18);
	}
}

//-------------------------------------------------------------------------------
// void setSasakiAtConsole()
//
// Moves npc_sasaki to the console where he'll be guiding the player
//
// jshepard | Nov 2004
//-------------------------------------------------------------------------------
void setSasakiAtConsole()
{
	//make sure the door for him is open
	$door_frame_chainroom_intro.setShaderParm(7, 1);
	$door_chainroom_intro.lock(0);

	$npc_sasaki.disableHeal();
	$npc_sasaki.setLeader($null_entity);

	//look at his destination
	$npc_sasaki.lookAt($gui_chaindrag);
	
	//move to the console
	aiScriptedMoveWait($npc_sasaki, $tgt_sasaki_console, 1, 0);
	aiScriptedFaceWait($npc_sasaki, $gui_chaindrag, 1);
	
	//cannot leave this spot but can still heal
	$npc_sasaki.disableMovement();
	
	$npc_sasaki.lookAt($tgt_sasaki_lookhere_escape);

	aiSpeak($npc_sasaki, "lipsync_vo_2_2_4_50_1");
	sys.wait(.5);
	aiScriptedAnimWait($npc_sasaki, "weaponless_point_up", 8, 1);
	
	//complete the objective
	sys.trigger($complete_objective_exit_level_1);
		
	$npc_sasaki.lookAt($tgt_sasaki_lookhere_barrels);
	sys.wait(1.9);
	aiScriptedAnimWait($npc_sasaki, "weaponless_point_front", 8, 1);
	
	sys.wait(1);
	
	aiScriptedAnim($npc_sasaki, "console_idle", 18, 1);
	
	$npc_sasaki.lookAt($null_entity);

	
	aiSpeakWait($npc_sasaki, "lipsync_vo_2_2_4_50_2");

	unlockChainRoom();
	sys.trigger($objective_main_1);

	//$npc_sasaki.setTalkState(TALK_OK);
	usePostHeal = 1;
	$npc_sasaki.enableHeal();
	
	$npc_sasaki.setPassivePrefix("working");
}



//-------------------------------------------------------------------------------
// void prisonerScreaming()
//
// Allows the prisoner (Sasaki) to make random complaints
//
// jshepard | Nov 2004
//-------------------------------------------------------------------------------
void prisonerScreaming()
{
	//sys.println("void prisonerScreaming::begin");
	
	//note: make sure to kill this thread when Sasaki is released

	//pause for a bit
	//sys.println("sasaki is waiting to speak...");
	sys.wait(1);

	sys.trigger($npc_sasaki);

	while($npc_sasaki != $null_entity)	{

		if(gvar_PrisonOpen == 1)
			return;

		aiSpeakWait($npc_sasaki, "lipsync_vo_2_2_4_30_1");
		sys.wait (4);

		if(gvar_PrisonOpen == 1)
			return;

		aiSpeakWait($npc_sasaki, "lipsync_vo_2_2_4_30_2");
		sys.wait (4);

		if(gvar_PrisonOpen == 1)
			return;

		aiSpeakWait($npc_sasaki, "lipsync_vo_2_2_4_30_3");
		sys.wait (4);

		//don't say anything for a while 
		sys.wait (8);
	
	}

	//sys.println("void prisonerScreaming::end");

} //-------------- End void prisonerScreaming ---------------


//-------------------------------------------------------------------------------
// void prisonerAbuse()
//
// Makes the gunner put a marine on a hook and ship him off into a tube
//
// gcarlson | Apr 2005
//-------------------------------------------------------------------------------
void prisonerAbuse()
{
	// copied from main... 4/5/05 gc
	//start the beginning animation
	aiScriptedAnim ( $gunner_hook, "recomp_gunner_intro", 0, true );
	// Note: We could turn this into an idanimated - we'll have to change the function call here if so.
	//thread scriptedAIAnimWait($marine_hook, "recomp_intro_tube_mar", 1);
	$marine_hook.playAnim( ANIMCHANNEL_ALL, "recomp_intro_tube_mar");
}

//lightning gun torture sequence.

//on a trigger near lightning gun which will give the gun to the player
void givePlayerLightningGun()
{

	//pickup a lightning gun off screen
	sys.trigger($trigger_give_lightninggun);
	
	//remove props and select the weapon as if it was a normal pick up
	$func_static_lightgun_prop.remove();
	sys.waitFrame();
	$player1.selectWeapon("weapon_lightninggun");
	
	//unlock new route
	sys.wait(1.25);
	$func_door_lightningroom2.lock(0);
	sys.trigger($speaker_154); //unlock sound
}


//apparently this is checked while the torture sequence is going on.
float variable = 1;

void giveWeapon()
{
	//play open sound
	sys.trigger($speaker_lightning_servo);
	
	//open clasps
	$func_mover_claspBaseLeft.rotateOnce('-25 0 0');
	$func_mover_claspBaseRight.rotateOnce('25 0 0');
	sys.waitFor($func_mover_claspBaseLeft);
	
	//allow weapon to be picked up	
	sys.trigger($torture_pickupweapon);
}

void shockTortureMarine()
{
	
	// declaring a hack of a variable to make sure the first happens immediately.
	float hackForFirstTime;
	
	while (variable == 1) 
	{
		// Only do this after the first time.
		if( hackForFirstTime > 1 ) {
			sys.wait( 5 );
		}
	
		// Start the torture
		sys.trigger ( $tortureroom_lightfadeout );
		sys.trigger ( $torture_gunfx );
		sys.trigger ( $putra_torture_lightninglight );
		sys.trigger ( $torture_muzzlefx );
		sys.trigger($torture_muzzlefx_contact);
		sys.trigger ( $lightning_speaker );
		
		//trigger hurt
		sys.trigger($trigger_hurt_lightning);

		// make the marine spark and generally freak out
		sys.trigger ( $scream_speaker );
		$putra_torture_marine.jointCrawlEffect( "fx_crawl", 3 );
		aiScriptedAnimWait ( $putra_torture_marine , "lightning_pain_start" , 4 , 0 );
		aiScriptedAnimLoop ( $putra_torture_marine , "lightning_pain_loop", 4 );
		sys.wait( 2 );
		
		// turn off the gun and end the spazzing.
		sys.trigger ( $torture_gunfx );		
		sys.trigger ( $putra_torture_lightninglight );		
		sys.trigger ( $torture_muzzlefx );
		sys.trigger($torture_muzzlefx_contact);
		sys.trigger ( $lightning_speaker );

		//trigger hurt turns off
		sys.trigger($trigger_hurt_lightning);
		
		//marine stops wiggling
		aiScriptedAnimWait($putra_torture_marine, "lightning_pain_end", 4, 1);

		// lights		
		sys.trigger ( $tortureroom_lightfadein );
						
		// This will relax the marine into a heavy breathing state until the next shock cycle.
		aiScriptedAnimLoop ( $putra_torture_marine, "lightning_idle", 4 );
		
		// And once this is set the 5 second delay can continue normally.
		// This makes sure that the cycle breaks with no delay after the sequence has ended to release the gun.
		hackForFirstTime=2;
  	}
  	
  	thread giveWeapon();
  	
	//marine dies
	$putra_torture_marine.setTalkState(TALK_DEAD);
	$putra_torture_marine.takeDamage(0);
	$putra_torture_marine.getHead().playCycle(ANIMCHANNEL_ALL, "emotion_sleep");
	$putra_torture_marine.disableBlinking();
	aiScriptedAnimLoop($putra_torture_marine , "lightning_dead", 4);
		
	/*	
	//play open sound
	sys.trigger($speaker_lightning_servo);
	
	//open clasps
	$func_mover_claspBaseLeft.rotateOnce('-25 0 0');
	$func_mover_claspBaseRight.rotateOnce('25 0 0');
	sys.waitFor($func_mover_claspBaseLeft);
	
	//allow weapon to be picked up	
	sys.trigger($torture_pickupweapon);
*/
}

void endTorture()
{
	//next loop will shut down torture device
	variable = 0;
	
	//torture room is now offline
	sys.trigger($func_static_54176); //hide left console gui
	sys.trigger($func_static_54184); //unhide left console gui (offline)
	
	//hide monitors
	sys.trigger($func_static_54185);
	sys.trigger($func_static_54186);
	
	//unhide offline monitors
	sys.trigger($func_static_54187);
	sys.trigger($func_static_54188);
}


//------------------------------------------------------------------------------------------
//	#main
//------------------------------------------------------------------------------------------

void main()
{
	//global variables
	gvar_P1Active = 0;
	gvar_P2Active = 0;
	gvar_ControlActive = 0;

	//activate the prison gate and set the global value to locked.
	setPrisonCells();

	$npc_sasaki.becomePassive(1);
	//thread sustainSasaki();
	$npc_sasaki.disableTarget();
	$npc_sasaki.setTalkState(TALK_BUSY);
	
	//$fx_pipesteam.hide();

	//for the first process room set all the lights to .75 intensity
	setAllProcessOneLightParmsTo('.35 .10 .05');

	//turn off fog
	$light_p1_fog.setLightParms(.1,.1,.1, 1);

	//for the control room
	$env_dispersal_injector_arm_1.playAnim( ANIMCHANNEL_ALL, "recomp_idle");

	//chain drag puzzle
	setupCraneRoom();
	lockChainRoom();

	$door_frame_chainroom_intro.setShaderParm(7, 0);
	$door_chainroom_intro.lock(1);
}

}	//end namespace