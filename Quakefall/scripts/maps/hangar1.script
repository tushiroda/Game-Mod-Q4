//------------------------------------------------------------------------------------
// hangar1.script
//
// (C) Raven Software 2005
//------------------------------------------------------------------------------------

namespace map_hangar1
{

// globals
float  elgarDied = 0;
float  pucciniDied = 0;

// Functions

// Music fadin'
void fadeCombatLoop()	{
	$shotgunMusic.fadeSound( SND_CHANNEL_ANY, -80, 10);
	sys.wait(10);
	$shotgunMusic.remove();
}

//--
// Simplified disc door		aweldon Jun 05
//--

void discDoor( entity disc )	{

	float isClamped = disc.getFloatKey( "clamped" );
	entity door = disc.getEntityKey( "bind" );
		
	// Make sure the door isn't locked at the moment.
	if( !door.getFloatKey("locked") == 1 )	{
		
		// Setting times in the function for easy swaps anywhere
		setNewTimes( disc , .25 , .1 , .05 );
	
		if( isClamped )	{
			//disc.rotateOnce( '0 0 90' );
			disc.rotateTo( '0 0 90' );
			disc.setKey( "clamped" , 0 );
		} else	{
			//disc.rotateOnce( '0 0 -90' );
			disc.rotateTo( '0 0 0' );
			disc.setKey( "clamped" , 1 );
		}
	}	
}

//--
// End new disc door

//--
// Simple version of Shepard's big gun script for light and sound action	aweldon Aug 05
//--

// Which sound to play
float gunDistance = 0;

// Use this to set the 'distance' from the gun. Controls what speaker/sound is fired.
void setDistanceFromGun()	{
	gunDistance++;	
	//sys.println("PLAYER NOW AT GUN DISTANCE #" + gunDistance );
}

// Hangar-specific version of gun dusting. Only 12 fx entities here.
void triggerBigGunDust()
{
	entity ent;
	float fCt;

	for ( fCt=1; fCt<=12; fCt=fCt+1 )
	{
		ent = sys.getEntity( "func_fx_cannondust_" + fCt );
		if ( ent == $null_entity )
		{
			break;
		}
		sys.trigger(ent);
	}
}

// Pretend the gun is firing! (this is set to have a greater random wait for sanity's sake)
void loopGun()	{
	
	// Do a little random wait
	sys.wait( sys.random( 2 ) + 2 );
	
	while( 1 )	{

		// Trigger the appropriate speaker based on distance.
		if( gunDistance == 0 )	{
			//sys.println( "FIRING GUN FROM DISTANCE #" + gunDistance );
			sys.trigger( $ad_biggun_fire_close );
		} else if( gunDistance == 1 )	{
			//sys.println( "FIRING GUN FROM DISTANCE #" + gunDistance );
			sys.trigger( $ad_biggun_fire_mid );
		} else if( gunDistance == 2 )	{
			//sys.println( "FIRING GUN FROM DISTANCE #" + gunDistance );
			sys.trigger( $ad_biggun_fire_far );
		}


		// set global lighting change, create some dust...
		if( gunDistance==1 ){
			sys.setShaderParm(1, sys.getTime());
		}
		
		// Dust!
		thread triggerBigGunDust();
		
		if( gunDistance != 2 )	{
			// Always do this in case the player steps through an inside/outside trigger during the fire sequence
			//sys.println( "WAITING 4 SECONDS" );
			sys.wait(4);
			//sys.println( "REVERTING LIGHTS" );
			sys.setShaderParm(1, 0);
		} else	{
			// Maintain the same wait even if ignoring the shaderparm stuff.
			sys.wait( 4 );
		}
	
		// add a small amount of additional wait.
		sys.wait( sys.random(3)+ 4 );
	}
}

//--
// End simple gun loop

//--
// Simplified version of Bob's old platform script with new error handling	aweldon Aug 05
//--

// Keep all the guis in sync. A mess of hackery follows, but it solves problems!
void syncRepairPlatGUIs( string triggeredBy , string state )	{
	
	// If triggered by the South gui, do this.
	if( triggeredBy == "repairPlatTrigger_fromSouth" )	{
		// If triggered by the south gui and the platforms are down, play "open" guiEvent.
		if( state == "down" )	{
			$repairPlatGui_north.guiEvent( "open" );
		}
		// If triggered by the south gui and the platforms are up, play "close" guiEvent.
		else if( state == "up" )	{
			$repairPlatGui_north.guiEvent( "close" );
		}
	} 
	
	// If triggered by the North gui, do this.
	else if( triggeredBy == "repairPlatTrigger_fromNorth" )	{
		// If triggered by the south gui and the platforms are down, play "open" guiEvent.
		if( state == "down" )	{
			$repairPlatGui_south.guiEvent( "open" );
		}
		// If triggered by the south gui and the platforms are up, play "close" guiEvent.
		else if( state == "up" )	{
			$repairPlatGui_south.guiEvent( "close" );
		}
	}
	
	// If not triggered by either gui, do this
	else if( triggeredBy == "repairPlatGUI_fromNone" )	{
		// If the plats are down, play the "open" event on both GUIs.
		if( state == "down" )	{
			$repairPlatGui_north.guiEvent( "open" );
			$repairPlatGui_south.guiEvent( "open" );
		}
		// If the plats are up, play the "close event" on both GUIs.
		else if( state == "up" )	{
			$repairPlatGui_north.guiEvent( "close" );
			$repairPlatGui_south.guiEvent( "close" );
		}
	}
}

// Repair platform movement
void repairPlat( entity triggerRelay )
{
	// Variable declaration
	string triggeredBy = triggerRelay.getName();
	string state = $target_hangarPlatMaster.getKey( "platState" );
	
	// Sync up the GUIs
	thread syncRepairPlatGUIs( triggeredBy , state );

	// Sounds are on entities now.

	if ( state == "down" )	{
		// Fade lights
		$repairLightNorth_1.fadeInLight( 4 );
		$repairLightSouth_1.fadeInLight( 4 );
		//sys.wait( 1 );

		// Move all the pieces		
		$repairArmsNorth_1.rotateOnce( '0 0 -55' );
		$repairPlatNorth_1.rotateOnce( '0 0 180' );
		$repairArmsSouth_1.rotateOnce( '0 0 55' );
		$repairPlatSouth_1.rotateOnce( '0 0 -180' );
		$repairPlatWest_1.rotateOnce( '-45 0 0' );
		
		// Set status to "up" for the next move
		$target_hangarPlatMaster.setKey( "platState" , "up" );
		
	} else if ( state == "up" )	{
		// Move all the pieces		
		$repairArmsNorth_1.rotateOnce( '0 0 55' );
		$repairPlatNorth_1.rotateOnce( '0 0 -180' );
		$repairArmsSouth_1.rotateOnce( '0 0 -55' );
		$repairPlatSouth_1.rotateOnce( '0 0 180' );
		$repairPlatWest_1.rotateOnce( '45 0 0' );

		// Wait a while, then fade out the lights.
		sys.wait( 8 );
		$repairLightNorth_1.fadeOutLight( 4 );
		$repairLightSouth_1.fadeOutLight( 4 );

		// Set status to "down" for the next move
		$target_hangarPlatMaster.setKey( "platState" , "down" );
	}
}

//////////////////////////////////////////////////////////
///to make the dead marines not spawn in the next lvl////
////////////////////////////////////////////////////////
			
// hangar1 functions
void marine1Died()
{			
	elgarDied = 1;
}			
			
void marine2Died()
{			
	pucciniDied = 1;
}			
		
void updateDeathStatus()
{			
	if ( elgarDied || pucciniDied )
	{			
		string temp;
		temp = "remove_";
			
		if ( elgarDied)
		{
			temp = temp + "elgar_";
		}
		if ( pucciniDied)
		{
			temp = temp + "puccini";
		}
				
		$marine_remover.setKey("triggerName", temp);
		sys.trigger($marine_remover);
	}			
			
	// do end of level
}

// --------------------------------------------
// End the level
// --------------------------------------------

void endLevel()
{

	sys.trigger( $elevNorthPass1FadeView );

	sys.wait( 1 );
	updateDeathStatus();
	sys.trigger( $elevNorthPass1GoToHangar2 );
}

///////////////////////////////////////////////////////////////////////////////////////
////////////////////////Start of script additions by Chad/////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/* nuked for new bridge
/////////////////////////////////////////////////
//////bridge unfolding & folding////////////////
///////////////////////////////////////////////

void assemble_bridge()
{
	sys.trigger($bridge_1_arm_sound);
	$bridge_1_arm.time(7.5);
	$bridge_1_arm.moveTo($bridge_1_point_2);
	
	sys.trigger($bridge_2_sound);
	$bridge_2_arm.time(7.5);
	$bridge_2_arm.moveTo($bridge_2_arm_point_2);
	
	
	//$bridge_3.time(7.5);
	//$bridge_3.moveTo($bridge_3_point_2);
	sys.waitFor($bridge_2);
	
	sys.trigger($bridge_2_sound_2);
	$bridge_1_axis.time(7.5);
	$bridge_1_axis.rotateOnce('0 90 0');
	
	$bridge_2_axis.time(7.5);
	$bridge_2_axis.rotateOnce('0 90 0');
	sys.waitFor($bridge_2_axis);
	
	$bridge_2.time(7.5);
	sys.trigger($bridge_2_sound_3);
	$bridge_2.moveTo($bridge_2_point_2);
	sys.waitFor($bridge_2);
}
*/

//--
// The new folding bridge and associated combat stuff		aweldon Aug 05
//--

void lowerBridge() {
	
	// Establish all new times
	setNewTimes( $mover_hangarPlatBase , 5 , .5 , .5 );
	setNewTimes( $mover_hangarPlatExtension , 5 , .5 , .5 );
	setNewTimes( $mover_hangarPlatRaise , 5 , .5 , .5 );
	setNewTimes( $mover_hangarPlatRaiseB , 5 , .5 , .5 );
	//setNewTimes( $mover_hangarPlatRaise_topbars , 5 , .5 , .5 );
	setNewTimes( $mover_hangarPlatRaise_midbars , 10 , .5 , 0 );
	setNewTimes( $mover_hangarPlatRaise_botbars , 5 , .5 , 0 );
			
	// Rotate/extend main platform
	$mover_hangarPlatBase.rotateOnce( '0 0 90' );
	$mover_hangarPlatExtension.rotateOnce( ' 0 0 -180' );
	sys.wait( 2 );
		
	// Send forth the baddies! (give them a head start before everything is settled)
	sys.trigger( $spawner_southHangarPlats );
	
	// Extend connecting platform when the first platform stops
	sys.waitFor( $mover_hangarPlatExtension );
	$mover_hangarPlatRaise.move( EAST , 128 );
	sys.waitFor( $mover_hangarPlatRaise );
	$mover_hangarPlat_botBase.unbind();
	$mover_hangarPlatRaise_midbars.unbind();
	$mover_hangarPlatRaise_botbars.unbind();
	
	// Raise connecting platform
	setNewTimes( $mover_hangarPlatRaise , 15 , .5 , .5 );
	$mover_hangarPlatRaise.move( UP , 384 );
	$mover_hangarPlatRaise_midbars.move( UP , 256 );
	$mover_hangarPlatRaise_botbars.move( UP , 128);
	sys.waitFor( $mover_hangarPlatRaise );
	
	// Rotate connecting platform into place
	$mover_hangarPlatRaiseB.rotateOnce( '90 0 0' );
	sys.wait( 1.5 );
	
	// Trigger the berserker so he can get a clean start onto the platform when it's done moving
	sys.trigger( $berserker_hangarPlats );
	
	// Wait another 2 seconds, then open the gates
	sys.wait( 2 );
	$mover_bridgeBlock_1.rotateOnce( '0 90 0' );
	$mover_bridgeBlock_2.rotateOnce( '0 -90 0' );
	sys.waitFor( $mover_bridgeBlock_2 );
	$bridgeBlockClip.remove();
	
	// Wait for the final piece to finish rotating
	sys.waitFor( $mover_hangarPlatRaise );
	
	// Trigger (remove) the AAS obstacle to allow NPC pathing
	sys.trigger( $aas_blockHangarPlat );
	
	// Remove the spawner and make the marines follow again
	sys.trigger( $spawner_southHangarPlats );
	sys.trigger( $ai_tether_none_2 );
}


//--
// End new bridge

////////////////////////////////////////////////
////////unlock door after crane event//////////
//////////////////////////////////////////////

void release()
{
	sys.trigger( $clampDoorLock_7 );
	sys.trigger( $hangarbay_sm_2 );
	sys.trigger( $hangarbay_sm_3 );
}

////////////////////////////////////////////////
////////crane moving flyer in repair bay///////
//////////////////////////////////////////////

void crane_mover()
{
	sys.trigger($crane_sound_1);
	$crane_1.time(7.5);
	$crane_1.moveTo($crane_1_point_1);
	
	sys.trigger($rail_sound_1);
	$rail_2.time(7.5);
	$rail_2.moveTo($rail_2_point_2);
	
	sys.wait( 3 );
	thread release();
	
	sys.waitFor($rail_2);
	
	sys.trigger($base_sound_1);
	$base_2.time(7.5);
	$base_2.moveTo($base_2_point_2);
	sys.waitFor($base_2);
	
	$flyer_2.unbind();
	$flyer_2.bind($platform_1);
	
	sys.trigger($claw_sound_1);
	$axis_2.rotateOnce('-90 0 0');
	sys.waitFor($rail_2);
	
	sys.wait(1);
	sys.trigger($rail_sound_2);
	$rail_2.time(7.5);
	$rail_2.moveTo($rail_2_point_1);
	$base_2.time(7.5);
	$base_2.moveTo($base_2_point_1);
	sys.wait(5);
	
	sys.trigger($crane_sound_2);
	$crane_1.time(20);
	$crane_1.moveTo($crane_1_point_2);
	$platform_1.time(10);
	$platform_1.rotateOnce('0 90 0');
	
	sys.trigger($func_door_147);
	sys.trigger($func_door_148);
	
}

///////////////////////////////////////////////
/////effects in the sky///////////////////////
/////////////////////////////////////////////

void tracer_effects()
{
	while(1)
	{
		sys.wait(2);
		sys.trigger($tracer_relay_1);
		sys.trigger($tracer_relay_2);
		sys.trigger($tracer_relay_3);
	}
}

void tracer_1_moving()
{
	while(1)
	{
		$tracer_1_mover.time(5);
		$tracer_1_mover.moveTo($tracer_1_point_1);
		sys.waitFor($tracer_1_mover);
		$tracer_1_mover.time(5);
		$tracer_1_mover.moveTo($tracer_1_point_2);
		sys.waitFor($tracer_1_mover);
	}
}

void tracer_2_moving()
{
	while(1)
	{
		$tracer_2_mover.time(5);
		$tracer_2_mover.moveTo($tracer_2_point_1);
		sys.waitFor($tracer_2_mover);
		$tracer_2_mover.time(5);
		$tracer_2_mover.moveTo($tracer_2_point_2);
		sys.waitFor($tracer_2_mover);
	}
}

void tracer_3_moving()
{
	while(1)
	{
		$tracer_3_mover.time(5);
		$tracer_3_mover.moveTo($tracer_3_point_1);
		sys.waitFor($tracer_3_mover);
		$tracer_3_mover.time(5);
		$tracer_3_mover.moveTo($tracer_3_point_2);
		sys.waitFor($tracer_3_mover);
	}
}

void tracers()
{
	thread tracer_effects();
	thread tracer_1_moving();
	thread tracer_2_moving();
	thread tracer_3_moving();
}

//////////////////////////////////////////////
//Flyer Flying By in Generator Room /////////
////////////////////////////////////////////

// FIXME after alpha. Get better movement and timing; adjust skybox for better flight path.
void flyerLaunch()
{
	sys.trigger($flyer_fx);
	sys.trigger($flyer_fx_1);
	
	while( 1 )	{
		
		sys.trigger($take_off);
		
		// Use this wait to make sure people can react to the sound and still see the launch
		sys.wait(.25);
		
		$flyer_1.time(1.5);
		$flyer_1.moveTo($flyer_point_1);
		sys.waitFor($flyer_1);
		$flyer_1.restorePosition();
		
		sys.wait( 15 );
		
		sys.trigger($take_off);
		$flyer_4.time(1.5);
		$flyer_4.moveTo($flyer_point_2);
		sys.waitFor($flyer_4);
		$flyer_4.restorePosition();
		
		sys.wait( 15 );
	}	
	
}

/////////////////////////////////////////////
//Morris follws player to meet others///////
///////////////////////////////////////////
void morris_follow()
{
	$morris.setLeader($player1);
	$morris.lookAt($null_entity);
}


//--
// Gunner Cinematic
//--

void playerWalks()	{
	
	sys.trigger($cinematicPlayerA);
	sys.trigger($func_door_153 );
	$morris.becomePassive(1);
	aiScriptedAnimWait( $cinematicPlayerA , "gun_intro_walk" , 0 , 0 );
	//$cinematicPlayerA.remove();
}

void feedGunnerBackup()	{
	sys.trigger( $gunnerReinforcements );
}

void spawnPlayer()	{

	sys.fadeOut( '0 0 0' , .25 );
	sys.wait( .25 );
	$cinematicPlayerA.remove();
	sys.waitFrame();
	sys.trigger( $playerAfterGunner );
	sys.trigger( $ai_checkCinematicGuys );
	sys.fadeIn( '0 0 0' , .25 );
}

void gunner_intro()	{

	//make sure the player doesn't take damage here.
	float f = $player1.getHealth();

	sys.fadeOut( '0 0 0' , .25 );
	sys.wait(.25);
	$first_gunner.show();
	thread playerWalks();
	sys.trigger($cin_gunner_intro_cam);
	sys.fadeIn( '0 0 0' , .25 );
	sys.trigger($gunnerCinMusic);
	aiScriptedAnimWait($first_gunner,"gunner_intro", 4, true);

	$player1.setHealth( f);
	$morris.becomeAggressive();
	$morris.setEnemy( $first_gunner );
}

//--
// End gunner cinematic
//-- 

//////////////////////////////////////
///Grunt jumping in bridge area//////
////////////////////////////////////
void grunt_event()
{
	//sys.trigger($crane_2_sound);
	$crane_2.time(20);
	$crane_2.moveTo($crane_2_point_2);
	
	$grunt_jump.show();
	//sys.trigger($monster_berserker_3);
	aiScriptedMoveWait($grunt_jump, $grunt_jump_point_1, 4, true);
	aiScriptedMoveWait($grunt_jump, $grunt_jump_point_2, 4, true);
	aiScriptedAnim($grunt_jump,"jump128", 4, true);
	
	sys.wait(4);
	$platform_2.time(7.5);
	$platform_2.rotateOnce('0 90 0');
}

void grunt_death()
{
	sys.trigger($trigger_once_40);
}

//--
// Ambient flyer processing	aweldon Mar 05
// Room 1: Engine repair
//--

void engineFire( entity engineLight ) {

	float lightTime = sys.getTime();
	engineLight.setLightParm(4, lightTime);
	sys.wait(5);
	engineLight.setLightParm(4, 0);

}

void openEngineClamps( entity clampOne , entity clampTwo )	{

	// Set clamp times
	setNewTimes( clampOne , .1 , .05 , 0 );
	setNewTimes( clampTwo , .1 , .05 , 0 );
	
	// Initial counter-motion
	//clampOne.startSoundShader( "hangar_engine_seq_clamp", SND_CHANNEL_ANY );
	clampOne.rotateOnce( '0 0 1' );
	clampTwo.rotateOnce( '0 0 -1' );
	sys.waitFor( clampTwo );
	
	// Set clamp times for full move
	setNewTimes( clampOne , .9 , .5 , .25 );
	setNewTimes( clampTwo , .9 , .5 , .25 );
	
	// Open clamps
	clampOne.rotateOnce( '0 0 -86' );
	clampTwo.rotateOnce( '0 0 86' );
	sys.waitFor( clampTwo );
	
}

void closeEngineClamps( entity clampOne , entity clampTwo )	{

	// Set clamp times
	setNewTimes( clampOne , .1 , .05 , 0 );
	setNewTimes( clampTwo , .1 , .05 , 0 );
	
	// Initial counter-motion
	//clampOne.startSoundShader( "hangar_engine_seq_clamp", SND_CHANNEL_ANY );
	clampOne.rotateOnce( '0 0 -1' );
	clampTwo.rotateOnce( '0 0 1' );
	sys.waitFor( clampTwo );
	
	// Set clamp times for full move
	setNewTimes( clampOne , .9 , .5 , .25 );
	setNewTimes( clampTwo , .9 , .5 , .25 );
	
	// Close clamps
	clampOne.rotateOnce( '0 0 86' );
	clampTwo.rotateOnce( '0 0 -86' );
	sys.waitFor( clampTwo );
	
}

void dropFlyer()	{
	
	// Open doors
	sys.trigger( $engineOverhead );
	$flyerDoorSouth.move( SOUTH , 272);
	$flyerDoorNorth.move( NORTH , 272);
	$flyerDoorNorth.startSoundShader( "hangar_flyer_room_door_open", SND_CHANNEL_ANY );
	
	sys.wait( 2 );
	
	// Lower flyer
	setNewTimes( $flyerDrop , 8 , 4 , 2 );
	$flyerDrop.move( DOWN , 320 );
	$flyerDrop.startSoundShader( "hangar_flyer_room_lower_flyer", SND_CHANNEL_ANY );
	
}

void raiseLift()	{

	sys.wait( 2 );
	// Set initial times for flyer lift platform
	setNewTimes( $flyerLift , 4 , 2 , 1 );
	
	// Move up to position
	$flyerLift.move( UP , 128 );
	$flyerLift.startSoundShader( "hangar_flyer_room_lift_raise", SND_CHANNEL_ANY );
	
	sys.wait( 1 );
	
	// Set times for expanding wings
	setNewTimes( $flyerLiftWing_1 , 4 , 1 , 2 );
	setNewTimes( $flyerLiftWing_2 , 4 , 1 , 2 );
	
	// Expand wing sections
	$flyerLiftWing_1.rotateOnce( '0 -60 0' );
	$flyerLiftWing_2.rotateOnce( '0 60 0' );
	$flyerLiftWing_2.startSoundShader( "hangar_flyer_room_arms_fan_out", SND_CHANNEL_ANY );
	
	sys.wait( 2 );
	
	// Set times for corkscrew clamps
	setNewTimes( $flyerCorkscrewEast , 2 , .5 , .5 );
	setNewTimes( $flyerCorkscrewWest , 2 , .5 , .5 );
	setNewTimes( $flyerCorkscrewNorth , 2 , .5 , .5 );
	setNewTimes( $flyerCorkscrewSouth , 2 , .5 , .5 );

	// Raise corkscrew clamps
	$flyerCorkscrewEast.rotateOnce( '0 360 0' );
	$flyerCorkscrewEast.move( UP, 32 );
	
	$flyerCorkscrewNorth.rotateOnce( '0 360 0' );
	$flyerCorkscrewNorth.move( UP, 32 );
	
	$flyerCorkscrewSouth.rotateOnce( '0 -360 0' );
	$flyerCorkscrewSouth.move( UP, 32 );
	$flyerCorkscrewSouth.startSoundShader( "hangar_flyer_room_corkscrew", SND_CHANNEL_ANY );

	$flyerCorkscrewWest.rotateOnce( '0 -360 0' );
	$flyerCorkscrewWest.move( UP, 24 );
	
	sys.waitFor( $flyerCorkscrewWest );

	// Bind Flyer to lift for next function in the process
	$clampedFlyer.bind( $flyerLift );

	sys.wait( 1 );
	
}

void releaseClamps( entity clampOne , entity clampTwo )	{

	// Set initial times:
	setNewTimes( clampOne , .1 , .025, .025 );
	setNewTimes( clampTwo , .1 , .025, .025 );
	
	// Quick pop
	clampOne.rotateOnce( '0 0 1' );
	clampTwo.rotateOnce( '0 0 -1' );
	sys.waitFor( clampTwo );	
	
	sys.wait(.1);
	
	// Set full times
	setNewTimes( clampOne , 2 , 1, .5 );
	setNewTimes( clampTwo , 2 , 1, .5 );
	clampTwo.startSoundShader( "hangar_flyer_room_alcove_cover", SND_CHANNEL_ANY );
	
	// Open
	clampOne.rotateOnce( '0 0 89' );
	clampTwo.rotateOnce( '0 0 -89' );
	sys.waitFor( clampTwo );	
	
}

void lowerFlyer()	{
	
	// Open alcove piece and reveal engine clamp
	$engineAlcoveCover.move( DOWN , 112 );
	$engineAlcoveCover.startSoundShader( "hangar_flyer_room_alcove_cover", SND_CHANNEL_ANY );
	
	// Set new time on lift and move it back down.
	setNewTimes( $flyerLift , -1 , 2, -1 );
	$flyerLift.move( DOWN , 128 );
	$flyerLift.startSoundShader( "hangar_flyer_room_lift_raise", SND_CHANNEL_ANY );
	
	sys.wait( 2 );
	
	// Move grabber piece back up to holding position.
	$flyerDrop.move( UP , 320 );
	$flyerDrop.startSoundShader( "hangar_flyer_room_lower_flyer", SND_CHANNEL_ANY );
	
	sys.wait( 4 );
	
	$flyerDoorSouth.move( NORTH, 272);
	$flyerDoorNorth.move( SOUTH , 272);
	$flyerDoorNorth.startSoundShader( "hangar_flyer_room_door_close", SND_CHANNEL_ANY );
	sys.waitFor( $flyerDoorNorth );
	
	sys.trigger( $engineOverhead );
	

}

void removeEngine()	{

	// Set times for all involved pieces
	setNewTimes( $engineExtend , 5 , 2 , 1 );
	setNewTimes( $enginePlat , 5 , 2 , 1 );
	setNewTimes( $testEngineProxy , 1 , .25 , .25 );
	
	// Extend engine piece into position
	$engineExtend.move( NORTH , 640 );
	$engineExtend.startSoundShader( "hangar_flyer_room_engine_platform_extender", SND_CHANNEL_ANY );
	sys.wait( 2 );
	$enginePlat.move( NORTH , 640 );
	$enginePlat.startSoundShader( "hangar_flyer_room_engine_platform", SND_CHANNEL_ANY );
	thread openEngineClamps( $engineClampA_1 , $engineClampB_1 );
	sys.waitFor( $enginePlat );
	
	// Bind engine to plat
	$testEngineProxy.bind( $enginePlat );
	$testEngineProxy.move( DOWN , 24 );
	$testEngineProxy.startSoundShader( "hangar_flyer_room_engine_lowers", SND_CHANNEL_ANY );
	sys.waitFor( $testEngineProxy );
	sys.wait( 1 );
	
	// Set times to move to test firing zone
	setNewTimes( $engineExtend , 3 , 1 , 1 );
	setNewTimes( $enginePlat , 3 , 1 , 1 );

	// Move to test fire position	
	$enginePlat.move( SOUTH , 384 );
	$enginePlat.startSoundShader( "hangar_flyer_room_platform_testzone", SND_CHANNEL_ANY );
	sys.wait( 1 );
	$engineExtend.move( SOUTH , 384 );
	$engineExtend.startSoundShader( "hangar_flyer_room_extender_testzone", SND_CHANNEL_ANY );

	// Raise flyer to new position
	setNewTimes( $flyerLift , 1 , .25, .25 );
	$flyerLift.move( UP , 32 );	
	$flyerLift.startSoundShader( "hangar_flyer_flyer_raise", SND_CHANNEL_ANY );
}

// Set variable for botRepairs and botGag functions
float botsDone = 1336;

void botRepairs( entity bot , entity moveTarget )	{
	
	// Activate entity
	sys.trigger( bot );
	
	// Move to position
	aiScriptedMoveWait( bot , moveTarget , 0 , 1 );
	
	// Look!
	aiScriptedFaceWait( bot , moveTarget.getTarget(0) , 0 );
	
	// Repair!
	aiScriptedActionWait( bot , moveTarget , 0 );
	
	sys.wait( 1 );
	
	if( botsDone == 1337 )	{
		sys.trigger( $engineWarningLight );
	}
	
	botsDone++;
	
	// Move to safe position
	aiScriptedMoveWait( bot , moveTarget.getTarget(1) , 0 , 1 );
	
	// Look! Something funny's going to happen!
	aiScriptedFaceWait( bot , moveTarget.getTarget(0) , 0 );
	
}

void botGag()	{
	
	// Spawn in bots and have them do their repairing jive.
	thread botRepairs( $engineBot_1 , $engineBotMove_1 );
	botRepairs( $engineBot_2 , $engineBotMove_2 );
	
	// Close clamps over engine
	thread closeEngineClamps( $engineClampA_1 , $engineClampB_1 );
	
	sys.wait( 2 );
	
	// Fire broken engine effects. 
	$testEngineProxy.startSoundShader( "hangar_flyer_room_engine_misfire", SND_CHANNEL_ANY );
	sys.trigger( $engineSputter );
	sys.wait( .1 );
	sys.trigger( $engineSparks_1 );
	sys.wait( .05 );
	sys.trigger( $engineSparks_2 );
	sys.wait( .5 );
	sys.trigger( $engineSmoke );
	
	sys.wait( .5 );
	
	// So... that didn't work. Make the bots look confused.
	$engineBot_1.lookAt( $engineBot_2 );
	sys.wait (.5 );
	sys.trigger( $engineSmoke );
	$engineBot_2.lookAt( $engineBot_1 );
	sys.wait( 1 );
	
	// Look at the engine again.
	$engineBot_1.lookAt( $testEngine );
	$engineBot_2.lookAt( $testEngine );
	
	sys.wait( 1 );
	
	// And at each other again
	$engineBot_1.lookAt( $engineBot_2 );
	sys.wait( .2 );
	$engineBot_2.lookAt( $engineBot_1 );
	
	sys.wait( 1 );
	
	sys.trigger( $engineWarningLight );
	
	// And back to the engine.
	$engineBot_1.lookAt( $testEngine );
	sys.wait( .2 );
	$engineBot_2.lookAt( $testEngine );
}

void fixEngine()	{
	
	// Clear lookAt targets
	$engineBot_1.lookAt( $null_entity);
	$engineBot_2.lookAt( $null_entity);
	
	// Move bots back into repair area
	aiScriptedMove( $engineBot_1 , $botGoHide_1 , 0 , 1 );
	aiScriptedMove( $engineBot_2 , $botGoHide_2 , 0 , 1 );
	
	sys.wait( 2 );
	
	// Set times to retract engine and platform
	setNewTimes( $engineExtend , 3 , 1 , .5 );
	setNewTimes( $enginePlat , 3 , 1 , .5 );
	
	// Retract engine and platform
	$enginePlat.move( SOUTH , 256 );
	$enginePlat.startSoundShader( "hangar_flyer_room_platform_testzone", SND_CHANNEL_ANY );
	sys.wait ( 1 );
	$engineExtend.move( SOUTH , 256 );
	$engineExtend.startSoundShader( "hangar_flyer_room_extender_testzone", SND_CHANNEL_ANY );
	
	sys.waitFor( $engineExtend );
	
	// Close alcove
	$engineAlcoveCover.move( UP , 112 );
	$engineAlcoveCover.startSoundShader( "hangar_flyer_room_alcove_cover", SND_CHANNEL_ANY );
	sys.waitFor( $engineAlcoveCover );
	
	// Get rid of those silly botses
	$engineBot_1.remove();	
	$engineBot_2.remove();
	
	sys.wait( 4 );
	
	//Open Alcove
	$engineAlcoveCover.move( DOWN , 112 );
	$engineAlcoveCover.startSoundShader( "hangar_flyer_room_alcove_cover", SND_CHANNEL_ANY );
	sys.waitFor( $engineAlcoveCover );
	
	// Extend back to test area
	$engineExtend.move( NORTH , 256 );
	$engineExtend.startSoundShader( "hangar_flyer_room_extender_testzone", SND_CHANNEL_ANY );
	sys.wait ( 1 );
	$enginePlat.move( NORTH , 256 );
	$enginePlat.startSoundShader( "hangar_flyer_room_platform_testzone", SND_CHANNEL_ANY );
	sys.waitFor( $enginePlat);	
}

void fireFixedEngine()	{
	
	// Trigger the light
	sys.trigger( $engineWarningLight );
	sys.wait( 2 );
	
	// Fire the effect
	sys.trigger( $brokenEngineBurn );
	engineFire( $brokenEngineLight );
		
	sys.wait( 2 );
	
	// Trigger light back off
	sys.trigger( $engineWarningLight );
		
	// Open clamps
	thread openEngineClamps( $rangeClampA_1 , $rangeClampA_2 );
	sys.wait( 1 );

	// Return to Flyer
	$engineExtend.move( NORTH , 384 );
	$engineExtend.startSoundShader( "hangar_flyer_room_extender_testzone", SND_CHANNEL_ANY );
	sys.wait( 1 );
	$enginePlat.move( NORTH , 384 );
	$enginePlat.startSoundShader( "hangar_flyer_room_platform_testzone", SND_CHANNEL_ANY );
	
	// Lower Flyer
	setNewTimes( $flyerLift , 1 , .25, .25 );
	$flyerLift.move( DOWN , 32 );	
	$flyerLift.startSoundShader( "hangar_flyer_flyer_raise", SND_CHANNEL_ANY );
	
	sys.waitFor( $flyerLift );
	sys.waitFor( $enginePlat );
	
	// Return engine
	$testEngineProxy.unbind();
	$testEngineProxy.move( UP, 24 );
	$testEngineProxy.startSoundShader( "hangar_flyer_room_engine_lowers", SND_CHANNEL_ANY );
	sys.waitFor( $testEngineProxy );
	sys.wait( 1 );
		
	// Set new times to retract pieces
	setNewTimes( $engineExtend , 5 , 2 , 1 );
	setNewTimes( $enginePlat , 5 , 2 , 1 );
	
	// Retract Engine plat
	$enginePlat.move( SOUTH , 640 );
	$enginePlat.startSoundShader( "hangar_flyer_room_engine_platform", SND_CHANNEL_ANY );
	sys.wait( 2 );
	thread closeEngineClamps( $rangeClampA_1 , $rangeClampA_2 );
	$engineExtend.move( SOUTH , 640 );
	$enginePlat.startSoundShader( "hangar_flyer_room_engine_platform_extender", SND_CHANNEL_ANY );
	sys.waitFor( $engineExtend );
	
	// Close alcove and end sequence!
	$engineAlcoveCover.move( UP , 112 );
	$engineAlcoveCover.startSoundShader( "hangar_flyer_room_alcove_cover", SND_CHANNEL_ANY );
}

void releaseFlyer()	{

	// Lower flyer
	thread dropFlyer();
	sys.wait( 4 );
	
	// Raise wing-ed platform underneath
	raiseLift();
	
	// Release clamps and trigger sparks
	thread releaseClamps( $flyerClampFront_1 , $flyerClampFront_2 );
	sys.trigger( $flyerSparksFront);
	sys.wait( .5 );
	
	thread releaseClamps( $flyerClampMid_1 , $flyerClampMid_2 );
	sys.trigger( $flyerSparksMid);
	sys.wait( .5 );
	
	thread releaseClamps( $flyerClampBack_1 , $flyerClampBack_2 );
	sys.trigger( $flyerSparksBack);
	sys.wait( .5 );
	
	sys.wait( 1.5 );
	
	// Lower the flyer and begin the engine removal process
	thread lowerFlyer();
	removeEngine();
	
	// Humor!
	botGag();
	
	// Move engine out and fool people to think it gets fixed.
	fixEngine();
	
	// Fire corrected engine
	fireFixedEngine();
}

//--
// End Ambient flyer processing, Room 1
//--

//--
// Ambient flyer processing	aweldon Mar 05
// Room 2: Engine firing
//--

void hideRangeCables()	{
	
	// Hide all non-visible cable pieces	
	$rangeCableA_2.hide();
	$rangeCableA_3.hide();
	$rangeCableA_4.hide();
	
	$rangeCableB_2.hide();
	$rangeCableB_3.hide();
	$rangeCableB_4.hide();
	
}

void closeRangeClamps( entity clampOne , entity clampTwo )	{

	// Set initial times
	setNewTimes( clampOne , .1 , .05 , 0 );
	setNewTimes( clampTwo , .1 , .05 , 0 );
	
	// Initial counter-motion
	//clampOne.startSoundShader( "hangar_engine_seq_clamp", SND_CHANNEL_ANY );
	clampOne.rotateOnce( '1 0 0' );
	clampTwo.rotateOnce( '-1 0 0' );
	sys.waitFor( clampTwo );
	
	// Set full times
	setNewTimes( clampOne , .9 , .5 , .25 );
	setNewTimes( clampTwo , .9 , .5 , .25 );
	
	// Close clamps
	clampOne.rotateOnce( '-46 0 0' );
	clampTwo.rotateOnce( '46 0 0' );
	sys.waitFor( clampTwo );	
}

void openRangeClamps( entity clampOne , entity clampTwo )	{

	// Set initial times
	setNewTimes( clampOne , .1 , .05 , 0 );
	setNewTimes( clampTwo , .1 , .05 , 0 );
	
	// Initial counter-motion
	//clampOne.startSoundShader( "hangar_engine_seq_clamp", SND_CHANNEL_ANY );
	clampOne.rotateOnce( '-1 0 0' );
	clampTwo.rotateOnce( '1 0 0' );
	sys.waitFor( clampTwo );
	
	// Set full times
	setNewTimes( clampOne , .9 , .5 , .25 );
	setNewTimes( clampTwo , .9 , .5 , .25 );
	
	// Open clamps
	clampOne.rotateOnce( '46 0 0' );
	clampTwo.rotateOnce( '-46 0 0' );
	sys.waitFor( clampTwo );
}

void fireEngineOne()	{
	
	// Trigger the light and close clamps
	sys.trigger( $rangeWarningLight_1 );
	thread closeRangeClamps( $rangeClampA_1 , $rangeClampA_2 );
	sys.wait( 2 );
	
	// Fire the effect
	sys.trigger( $engineFire_1 );
	engineFire( $engineLight_1 );
		
	sys.wait( 2 );
	
	// Trigger light back off
	sys.trigger( $rangeWarningLight_1 );
		
	// Open clamps
	thread openRangeClamps( $rangeClampA_1 , $rangeClampA_2 );
	sys.wait( 1 );	
}

void fireEngineTwo()	{
	
	// Trigger the light and close clamps
	sys.trigger( $rangeWarningLight_2 );
	thread closeRangeClamps( $rangeClampB_1 , $rangeClampB_2 );
	sys.wait( 2 );
	
	// Fire the effect
	sys.trigger( $engineFire_2 );
	engineFire( $engineLight_2 );
		
	sys.wait( 2 );
	
	// Trigger light back off
	sys.trigger( $rangeWarningLight_2 );
		
	// Open clamps
	thread openRangeClamps( $rangeClampB_1 , $rangeClampB_2 );
	sys.wait( 1 );
}

void vertCableSway( entity axis , string direction)	{

	// Swaying motion for cables moving vertically
	// direction is relative to the associated moving object, not starting rotation direction
	
	if( direction == "down" )	{
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 2' );
		sys.waitFor( axis );
		setNewTimes( axis , 1 , .5 , .5 );
		axis.rotateOnce( '0 0 -4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 3' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 -2' );
		sys.waitFor( axis );
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 1' );
		sys.waitFor( axis );
	} else if( direction == "up" )	{
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 -2' );
		sys.waitFor( axis );
		setNewTimes( axis , 1 , .5 , .5 );
		axis.rotateOnce( '0 0 4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 -3' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 2' );
		sys.waitFor( axis );
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 -1' );
		sys.waitFor( axis );
	}
}

void horizCableSway( entity axis , string direction)	{

	// Swaying motion for cables moving horizontally
	// direction is relative to the associated moving object, not starting rotation direction
	
	if( direction == "left" )	{
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '-2 0 0' );
		sys.waitFor( axis );
		setNewTimes( axis , 1 , .5 , .5 );
		axis.rotateOnce( '4 0 0' );
		sys.waitFor( axis );
		axis.rotateOnce( '-4 0 0' );
		sys.waitFor( axis );
		axis.rotateOnce( '4 0 0' );
		sys.waitFor( axis );
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '-2 0 0' );
		sys.waitFor( axis );
	} else if( direction == "right" )	{
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '2 0 0' );
		sys.waitFor( axis );
		setNewTimes( axis , 1 , .5 , .5 );
		axis.rotateOnce( '-4 0 0' );
		sys.waitFor( axis );
		axis.rotateOnce( '4 0 0' );
		sys.waitFor( axis );
		axis.rotateOnce( '-4 0 0' );
		sys.waitFor( axis );
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '2 0 0' );
		sys.waitFor( axis );
	}
}

void lowerMagnetOne()	{
	
	// Set initial times
	setNewTimes( $rangeMagnet_1 , 4 , 2 , 1 );
	setNewTimes( $rangeGear_1 , 4 , 2 , 1 );
	
	// Lower magnet piece and spin fake gear
	$rangeMagnet_1.startSoundShader( "hangar_engine_seq_magnet", SND_CHANNEL_ANY );
	$rangeMagnet_1.move( DOWN , 96 );
	$rangeGear_1.rotateOnce( '0 0 360' );
	
	// Make things sway a bit and toggle cable pieces as necessary
	thread vertCableSway( $rangeAxis_1 , "down" );
	$rangeCableA_2.show();
	sys.wait( 1 );
	$rangeCableA_3.show();
	sys.wait( 1 );
	$rangeCableA_4.show();
	sys.waitFor( $rangeMagnet_1 );
	sys.wait( 1 );
}
	
void raiseMagnetOne()	{

	// Set initial times
	setNewTimes( $rangeMagnet_1 , 4 , 2 , 1 );
	setNewTimes( $rangeGear_1 , 4 , 2 , 1 );
	
	// Lift magnet piece/engine and spin fake gear
	$rangeMagnet_1.startSoundShader( "hangar_engine_seq_magnet", SND_CHANNEL_ANY );
	$rangeMagnet_1.move( UP , 96 );
	$rangeGear_1.rotateOnce( '0 0 -360' );
	
	// Sway the other way and toggle cable pieces as needed
	thread vertCableSway( $rangeAxis_1 , "up" );
	sys.wait( 2 );
	$rangeCableA_4.hide();
	sys.wait( 1 );
	$rangeCableA_3.hide();
	sys.wait( 1 );
	$rangeCableA_2.hide();
	sys.waitFor( $rangeMagnet_1 );
}

void lowerMagnetTwo()	{
	
	// Set initial times
	setNewTimes( $rangeMagnet_2 , 4 , 2 , 1 );
	setNewTimes( $rangeGear_2 , 4 , 2 , 1 );
	
	// Lower magnet piece and spin fake gear
	$rangeMagnet_2.startSoundShader( "hangar_engine_seq_magnet", SND_CHANNEL_ANY );
	$rangeMagnet_2.move( DOWN , 96 );
	$rangeGear_2.rotateOnce( '0 0 360' );
	
	// Make things sway a bit and toggle cable pieces as necessary
	thread vertCableSway( $rangeAxis_2 , "down" );
	$rangeCableB_2.show();
	sys.wait( 1 );
	$rangeCableB_3.show();
	sys.wait( 1 );
	$rangeCableB_4.show();
	sys.waitFor( $rangeMagnet_2 );
	sys.wait( 1 );
}
	
void raiseMagnetTwo()	{

	// Set initial times
	setNewTimes( $rangeMagnet_2 , 4 , 2 , 1 );
	setNewTimes( $rangeGear_2 , 4 , 2 , 1 );
	
	// Lift magnet piece/engine and spin fake gear
	$rangeMagnet_2.startSoundShader( "hangar_engine_seq_magnet", SND_CHANNEL_ANY );
	$rangeMagnet_2.move( UP , 96 );
	$rangeGear_2.rotateOnce( '0 0 -360' );
	
	// Sway the other way and toggle cable pieces as needed
	thread vertCableSway( $rangeAxis_2 , "up" );
	sys.wait( 2 );
	$rangeCableB_4.hide();
	sys.wait( 1 );
	$rangeCableB_3.hide();
	sys.wait( 1 );
	$rangeCableB_2.hide();
	sys.waitFor( $rangeMagnet_2 );
}

void swapEngineOne()	{
	
	// Set times and make horizontal move	
	setNewTimes( $rangeMover_1 , 3 , 1 , 1 );
	$rangeMover_1.startSoundShader( "hangar_engine_seq_full_piece_3sec", SND_CHANNEL_ANY );
	$rangeMover_1.move( WEST , 160 );
	horizCableSway( $rangeAxis_1 , "left" );
	sys.waitFor( $rangeMover_1 );
	
	sys.wait( 1 );
	
	// Set new times and move back into alcove
	setNewTimes( $rangeMover_1 , 8 , 2 , 2 );
	$rangeMover_1.startSoundShader( "hangar_engine_seq_full_piece_8sec", SND_CHANNEL_ANY );
	$rangeMover_1.move( NORTH , 640 );
	vertCableSway( $rangeAxis_1 , "up" );
	sys.waitFor( $rangeMover_1 );
	
	sys.wait( 4 );
	
	// Move back from alcove
	$rangeMover_1.move( SOUTH , 640 );
	$rangeMover_1.startSoundShader( "hangar_engine_seq_full_piece_8sec", SND_CHANNEL_ANY );
	vertCableSway( $rangeAxis_1 , "down" );
	sys.waitFor( $rangeMover_1 );
	
	// Return to original position
	setNewTimes( $rangeMover_1 , 3 , 1 , 1 );
	$rangeMover_1.startSoundShader( "hangar_engine_seq_full_piece_3sec", SND_CHANNEL_ANY );
	$rangeMover_1.move( EAST , 160 );
	horizCableSway( $rangeAxis_1 , "right" );
	sys.waitFor( $rangeMover_1 );
	
	sys.wait( 1 );
}

void swapEngineTwo()	{
	
	// Set times and make horizontal move	
	setNewTimes( $rangeMover_2 , 3 , 1 , 1 );
	$rangeMover_2.startSoundShader( "hangar_engine_seq_full_piece_3sec", SND_CHANNEL_ANY );
	$rangeMover_2.move( EAST , 160 );
	horizCableSway( $rangeAxis_2 , "right" );
	sys.waitFor( $rangeMover_2 );
	
	sys.wait( 1 );
	
	// Set new times and move back into alcove
	setNewTimes( $rangeMover_2 , 8 , 2 , 2 );
	$rangeMover_2.startSoundShader( "hangar_engine_seq_full_piece_8sec", SND_CHANNEL_ANY );
	$rangeMover_2.move( NORTH , 640 );
	vertCableSway( $rangeAxis_2 , "up" );
	sys.waitFor( $rangeMover_2 );
	
	sys.wait( 4 );
	
	// Move back from alcove
	$rangeMover_2.move( SOUTH , 640 );
	$rangeMover_2.startSoundShader( "hangar_engine_seq_full_piece_8sec", SND_CHANNEL_ANY );
	vertCableSway( $rangeAxis_2 , "down" );
	sys.waitFor( $rangeMover_2 );
	
	// Return to original position
	setNewTimes( $rangeMover_2 , 3 , 1 , 1 );
	$rangeMover_2.startSoundShader( "hangar_engine_seq_full_piece_3sec", SND_CHANNEL_ANY );
	$rangeMover_2.move( WEST , 160 );
	horizCableSway( $rangeAxis_2 , "right" );
	sys.waitFor( $rangeMover_2 );
	
	sys.wait( 1 );
}

void testRange()	{

	// Hide all cables that shouldn't be shown	
	thread hideRangeCables();

	while( 1 )	{		
		// Fire engine #1 
		fireEngineOne();
		
		// Raise Engine #1
		lowerMagnetOne();
		$rangeEngine_1.bind( $rangeMagnet_1 );		
		raiseMagnetOne();
		
		sys.wait( 1 );
		
		// Fool people into thinking Engine #1 gets swapped with a new one
		thread swapEngineOne();
		
		// Lower engine #2	
		lowerMagnetTwo();
		$rangeEngine_2.unbind();		
		raiseMagnetTwo();
		
		// Fire engine #2
		fireEngineTwo();

		// Raise engine #2
		lowerMagnetTwo();
		$rangeEngine_2.bind( $rangeMagnet_2 );		
		raiseMagnetTwo();
		
		sys.wait( 1 );
		
		// Fool people into thinking Engine #2 gets swapped with a new one
		thread swapEngineTwo();
		
		// Lower engine #1
		lowerMagnetOne();
		$rangeEngine_1.unbind();		
		raiseMagnetOne();
	}
}

void offsetEngineTwo()	{
	
	// Run quick process to get proper offset on engines in test range
	lowerMagnetTwo();
	$rangeEngine_2.bind( $rangeMagnet_2 );		
	thread raiseMagnetTwo();	
}

void cacheSounds()	{
	
		//$world.cacheSoundShader( "hangar_engine_seq_clamp" );
		$world.cacheSoundShader( "hangar_engine_seq_magnet" );
		$world.cacheSoundShader( "hangar_engine_seq_full_piece_2sec" );
		$world.cacheSoundShader( "hangar_engine_seq_full_piece_3sec" );
		//$world.cacheSoundShader( "hangar_engine_seq_full_piece_6sec" );
		$world.cacheSoundShader( "hangar_engine_seq_full_piece_8sec" );
		
		$world.cacheSoundShader( "hangar_flyer_room_door_open" );
		$world.cacheSoundShader( "hangar_flyer_room_door_close" );
		$world.cacheSoundShader( "hangar_flyer_room_lower_flyer" );
		$world.cacheSoundShader( "hangar_flyer_room_lift_raise" );
		$world.cacheSoundShader( "hangar_flyer_room_arms_fan_out" );
		$world.cacheSoundShader( "hangar_flyer_room_corkscrew" );
		$world.cacheSoundShader( "hangar_flyer_room_alcove_cover" );
		$world.cacheSoundShader( "hangar_flyer_room_engine_platform" );
		$world.cacheSoundShader( "hangar_flyer_room_engine_platform_extender" );
		$world.cacheSoundShader( "hangar_flyer_room_engine_lowers" );
		$world.cacheSoundShader( "hangar_flyer_room_platform_testzone" );
		$world.cacheSoundShader( "hangar_flyer_room_extender_testzone" );
		$world.cacheSoundShader( "hangar_flyer_flyer_raise" );
		$world.cacheSoundShader( "hangar_flyer_room_engine_misfire" );
}

//--
// End Ambient flyer processing, Room 2

//--
// Viper Squad and the infamous elevator of my brain hurts	aweldon	Aug 05
//--

// How many guys are on the elevator
float viperAtElev = 0;

// How many guys need to be on the elevator for it to go. Defaults to 1 since Mahler must survive.
float viperNeeded = 1;

// Check how many marines are on the elevator against how many are alive and needed.
void viperElevUp()	{
	if( viperAtElev < viperNeeded )	{
		//sys.println("Not enough Viper Squad guys on Elevator, skipping.");	
		sys.waitFrame();
	}
	else if( viperAtElev == viperNeeded )	{
		sys.trigger( $trigger_playerOnElevator );
		//sys.println( "TRIGGER ENABLED" );
	}
}

// The following moves are a lot of hackery, but I don't trust tethers in elevator shafts.
// And I'd like to try and get the guys to look cool, too.

// Move elgar to the lift, even though his name is different now.
void elgarToLift()	{
	aiScriptedMoveWait( $elgar , $elevA_elgarSpot_1 , 16 , 1 );
	aiScriptedFaceWait( $elgar , $target_elevFaceDown , 0 );
	aiScriptedAnimWait( $elgar , "stand_to_crouch_scripted" , 5 , 0 );
	aiScriptedAnimLoop( $elgar , "crouch_idle" , 5 );
	
	// Tell the script that someone else is at the correct position
	viperAtElev++;
	
	// Run this to see if we can enable the player trigger yet.
	thread viperElevUp();
}

// Move puccini to the lift.
void pucciniToLift()	{
	aiScriptedMoveWait( $puccini , $elevA_pucciniSpot_1 , 16 , 1 );
	aiScriptedFaceWait( $puccini , $target_elevFaceDown , 0 );
	aiScriptedAnimWait( $puccini , "stand_to_crouch_scripted" , 5 , 0 );
	aiScriptedAnimLoop( $puccini , "crouch_idle" , 5 );
	
	// Tell the script that someone else is at the correct position
	viperAtElev++;
	
	// Run this to see if we can enable the player trigger yet.
	thread viperElevUp();
}

// Move Mahler to the lift.
void mahlerToLift()	{
	aiScriptedMoveWait( $mahler , $elevA_mahlerSpot , 8 , 1 );
	aiScriptedFaceWait( $mahler , $target_elevFaceDown , 0 );
	aiScriptedAnimWait( $mahler , "stand_to_crouch_scripted" , 5 , 0 );
	aiScriptedAnimLoop( $mahler , "crouch_idle" , 5 );
	
	// Tell the script that someone else is at the correct position
	viperAtElev++;
	
	// Run this to see if we can enable the player trigger yet.
	thread viperElevUp();
}

// Get the guys on the lift.
void viperToLift()	{
	
	// Clear tethers and leaders
	sys.trigger( $ai_tether_none_2 );
	$mahler.setLeader( $null_entity );

	if( isLivingEntity( $elgar ) ) 	{
		// Disable heal and thread his function
		$elgar.disableHeal();
		$elgar.setLeader( $null_entity );
		thread elgarToLift();
		
		// Add one to the number of guys needed to set off the final trigger
		viperNeeded++;
		
		// Only wait if he's still alive
		sys.wait( 1 );
	}
	
	if( isLivingEntity( $puccini ) ) 	{
		// Disable heal and thread his function
		$puccini.disableHeal();	
		$puccini.setLeader( $null_entity );
		thread pucciniToLift();
		
		// Add one to the number of guys needed to set off the final trigger
		viperNeeded++;	
		
		// Only wait if he's still alive
		sys.wait( 1 );
	}
		
	sys.wait( 1 );
	thread mahlerToLift();
	
}

void mahlerSwitch()	{
	aiScriptedFaceWait( $mahler , $target_elevFaceUp , 0 );
	aiScriptedAnimWait( $mahler , "stand_to_crouch_scripted" , 5 , 0 );
	aiScriptedAnimLoop( $mahler , "crouch_idle" , 5 );
	$mahler.lookAt( $target_elevFaceUp );
}

// Elgar switches positions
void elgarSwitch()	{
	aiScriptedAnimWait( $elgar , "crouch_to_stand_scripted" , 5 , 0 );
	//aiScriptedMoveWait( $elgar , $elevA_elgarSpot_2 , 48 , 1 );
	aiScriptedFaceWait( $elgar , $target_elevFaceUp , 0 );
	aiScriptedAnimLoop( $elgar , "idle" , 4 );
	$elgar.lookAt( $target_elevFaceUp );
}

// Puccini swaps positions
void pucciniSwitch()	{
	aiScriptedAnimWait( $puccini , "crouch_to_stand_scripted" , 5 , 0 );
	//aiScriptedMoveWait( $puccini , $elevA_pucciniSpot_2 , 48 , 1 );
	aiScriptedFaceWait( $puccini , $target_elevFaceUp , 0 );
	$puccini.lookAt( $target_elevFaceUp );
	aiScriptedAnimWait( $puccini , "stand_to_crouch_scripted" , 5 , 0 );
	aiScriptedAnimLoop( $puccini , "crouch_idle" , 5 );
}

// Mahler activates the lift and Elgar and Puccini look smart (well, I hope!)
void marinesUseLift()	{
	
	// Enable entrance clip		
	sys.trigger( $elevAClip_1 );
	
	// Mahler activates the lift
	aiScriptedAnimWait( $mahler , "crouch_to_stand_scripted" , 5 , 0 );
	aiScriptedAnimWait( $mahler , "stand_to_relaxed" , 5 , 0 );
	aiScriptedFaceWait( $mahler , $elevAControls , 0 );
	aiScriptedAnim( $mahler , "point_forward" , 5 , 1 );
	sys.wait( 1 );
	$clipForElevator.remove();
	
	// Close the gate
	setNewTimes( $elevGateA_1 , 1 , .5 , .2 );
	$elevGateA_1.rotateOnce( '0 0 90' );
	sys.waitFor( $elevGateA_1 );
	
	// Mahler looks up
	thread mahlerSwitch();
	
	// Fake the gui event
	$elevAControls.guiEvent( "anim_up" );
	
	// Move up. Set to a 7 second move in the map.
	$elevA.move( UP , 480 );
	
	// After .25 seconds, and if puccini is still alive, have him look up.
	sys.wait( .25 );
	if( isLivingEntity( $puccini ) ) 	{
		thread pucciniSwitch();
	}
	
	
	// After 2.25 seconds, and if elgar is still alive, switch his look target.
	sys.wait( 3 );
	if( isLivingEntity( $elgar ) ) 	{
		thread elgarSwitch();
	}
	
	// Wait for the elevator
	sys.waitFor( $elevA );
	$elevAControls.guiEvent( "anim_up_reset" );
	
	// Mahler stands
	aiScriptedAnim( $mahler , "crouch_to_stand_scripted" , 5 , 1 );
	
	// Drop the gate
	setNewTimes( $elevGateA_2 , 1 , .5 , .2 );
	$elevGateA_2.rotateOnce( '0 0 90' );
	sys.waitFor( $elevGateA_2 );

	// Clear Puccini's (now Hayes') look target and stand him back up
	if( isLivingEntity( $puccini ) )	{
		aiScriptedAnim( $puccini , "crouch_to_stand_scripted" , 5 , 1 );
		$puccini.enableHeal();
	}

	// Disable exit clip
	sys.trigger( $elevAClip_2 );
	sys.wait( .5 );
	
	// Clear look targets
	if( isLivingEntity( $elgar ) )	{
		$elgar.lookAt( $null_entity );	
	}
	if( isLivingEntity( $puccini ) )	{
		$puccini.lookAt( $null_entity );	
	}
	
	$mahler.lookAt( $null_entity );
		
	// Get guys off the lift
	sys.trigger( $ai_tether_mahlerPostElev );
	sys.wait( .25 );
	if( isLivingEntity( $elgar ) )	{
		aiScriptedStop( $elgar );
		$elgar.enableHeal();
	}
	sys.trigger( $ai_tether_elgarPostElev );
	sys.trigger( $ai_tether_pucciniPostElev );
	// Next time we'll take the stairs
}

//--
// End Viper Squad elevator (phew!)


//--
// New/polished engine room sequence		aweldon Aug 05
//-- 

// Moving this down here for convenience
void detach()	{
	// Clear all leaders
	$mahler.setLeader( $null_entity );
	
	if( isLivingEntity( $puccini ) )	{
		$puccini.setLeader( $null_entity );
	}
	
	if( isLivingEntity( $elgar ) )	{
		$elgar.setLeader( $null_entity );
	}
}

void puzzleSetUp()	{
	// Fade the music and clear the marines' leader setting.
	thread fadeCombatLoop();
	thread detach();
	
	// Clear Mahler's tether and set him passive.
	sys.trigger( $ai_clearMahlerEngineTether );
	$mahler.becomePassive(1);
	sys.wait( .25 );
	
	// Mahler looks at the door then moves to it.
	$mahler.lookAt( $target_mahlerLookAtPuzzDoor );
	aiScriptedMoveWait($mahler, $target_mahlerStands_1, 16, true);
	
	// Other marines, if alive, look at Mahler.
	if( isLivingEntity( $puccini ) )	{
		$puccini.lookAt($mahler);
	}
	if( isLivingEntity( $elgar ) )	{
		$elgar.lookAt($mahler);
	}
	
	$mahler.setTalkState( TALK_WAIT );
	
	// Mahler faces the door, animates, and speaks.
	aiScriptedFaceWait( $mahler , $target_mahlerLookAtPuzzDoor , 1 );
	aiScriptedAnim( $mahler , "idle_stretching_3" , 5 , 1 ); //The hangar1 version of this anim is sped up a bit.
	aiSpeakWait( $mahler , "lipsync_doors_locked" );
	aiScriptedWait( $mahler );
	
	// Move to the glass
	aiScriptedMoveWait($mahler , $target_mahlerStands_2, 8, true);
	aiScriptedFaceWait($mahler , $puzzleBurn_1 , true);
	aiScriptedAnim($mahler , "hangar1_mahler_glass" , 6 , 1);
	sys.wait( 8.5 );
	$mahler.lookAt($player1);
	aiSpeak( $mahler , "lipsync_through_window");
	aiScriptedFaceWait( $mahler, $player1 , 1 );
	aiSpeakDone( $mahler );
	sys.wait( .5 );
	aiSpeak( $mahler , "lipsync_you_scout" );
	sys.wait( 1 );
	$mahler.lookAt( $clampDoorTop_6 );
	aiScriptedFaceWait( $mahler , $clampDoorTop_6 , 1 );
	aiScriptedAnimWait( $mahler , "point_forward" , 5 , 1 );
	aiSpeakDone( $mahler );
	
	// Complete objective and wait a bit
	sys.trigger( $glassObjective );
	sys.wait( .5 );
	
	// Open the door and feed berserker
	sys.trigger( $clampDoorLock_6 );
	sys.trigger( $berserker_puzzRoomAmbush );
	sys.trigger( $repairPlat_firstTrigger_1 );
	
	// Marines react!
	if( isLivingEntity( $puccini ) )	{
		$puccini.lookAt( $null_entity );
	}
	if( isLivingEntity( $elgar ) )	{
		$elgar.lookAt( $null_entity );
	}
	$mahler.lookAt( $null_entity );
	$mahler.becomeAggressive();
	sys.trigger( $ai_engineTether_mahler_2 );
	
	$mahler.setTalkState( TALK_OK);
}

void adjustToEngine()
{
	if( isLivingEntity( $elgar ) )	{
		$elgar.lookAt( $null_entity );
	}
	if( isLivingEntity( $puccini ) )	{
		$puccini.lookAt( $null_entity );
	}
	$mahler.lookAt( $null_entity );
	
	sys.trigger( $ai_engineTether_elgar_2 );
	//sys.trigger( $ai_engineTether_puccini_2 );
	sys.wait( .25 );
	sys.trigger( $ai_engineTether_mahler_3 );
}

// Make sure the marines keep up 
float skipPostFire=0;

void setSkipPostFire()	{
	skipPostFire=1;
}

void postFire()
{
	// Save the game and wait a bit
	sys.trigger( $saveGame );
	sys.wait( .5 );
	
	// Do a bunch of other stuff to delay talking and prevent issues with the X360 save.
	sys.trigger( $ai_tether_none_2 );
	$mahler.becomePassive( 1 );
	if( isLivingEntity( $elgar ) )	{
		$elgar.becomePassive( 1 );
		$elgar.lookAt( $player1 );
	}
	sys.wait( .25 );
	if( isLivingEntity( $puccini ) )	{
		$puccini.becomePassive( 1 );
		$puccini.lookAt( $puzzleEngine );
		aiScriptedMove( $puccini , $target_pucciniWalkToEngine , 8 , 1 );
	}
	sys.wait( .25 );
		
	// Mahler congratulates the player
	$mahler.setTalkState( TALK_WAIT );
	$mahler.lookAt( $player1 );
	aiSpeakWait( $mahler , "lipsync_good_job" );
	sys.wait( 1 );
	
	// Puccini comments on the engine. Odd that he says it and the tech doesn't. Meh.	
	if( isLivingEntity( $puccini ) )	{
		$puccini.setTalkState( TALK_WAIT );
		aiSpeakWait( $puccini , "lipsync_the_eggheads" );
		$puccini.lookAt( $null_entity );
		$puccini.setTalkState( TALK_OK );
	}
	
	// Morris radios in and Mahler responds
	radioChatterPlayWait( $func_radiochatter_1 , "" );
	$mahler.lookAt( $null_entity );
	aiScriptedAnimWait( $mahler , "idle_wrist_gui_start_fast" , 4 , 0 );
	aiScriptedAnimLoop( $mahler , "idle_wrist_gui_loop" , 4 );
	aiSpeakWait( $mahler , "lipsync_thanks_morris" );
	aiScriptedAnimWait( $mahler , "idle_wrist_gui_end_fast" , 4 , 1 );

	// Mahler encourages speedy action!	
	aiSpeakWait( $mahler , "lipsync_work_fast" );
	
	// Marines leader to the player again
	$mahler.setLeader( $player1);
	$mahler.becomeAggressive();
	
	if( isLivingEntity( $puccini ) )	{
		$puccini.setLeader( $player1);
		$puccini.becomeAggressive();
	}
	
	if( isLivingEntity( $elgar ) )	{
		$elgar.setLeader( $player1);
		$elgar.becomeAggressive();
	}
	
	$mahler.setTalkState( TALK_OK );
}

//--
// (NEW) New engine puzzle		aweldon Jun 05
//--

void hidePuzzleCables()	{

	$puzzleCable_2.hide();
	$puzzleCable_3.hide();
	$puzzleCable_4.hide();
	$puzzleCable_5.hide();
	$puzzleCable_6.hide();
	$puzzleCable_7.hide();
}

void puzzCableHide( string direction )		{
	// For hiding/unhiding cable sections as they move
	if( direction == "up" )	{
		sys.wait( 1 );
		$puzzleCable_7.hide();
		sys.wait( 1 );
		$puzzleCable_6.hide();
		sys.wait( 1 );
		$puzzleCable_5.hide();
		sys.wait( 1 );
		$puzzleCable_4.hide();		
		sys.wait( 1 );
		$puzzleCable_3.hide();		
		sys.wait( 1 );
		$puzzleCable_2.hide();	
	}
	
	if( direction == "down" )	{
		$puzzleCable_2.show();
		sys.wait( .75 );
		$puzzleCable_3.show();
		sys.wait( .75 );
		$puzzleCable_4.show();
		sys.wait( .75 );
		$puzzleCable_5.show();
		sys.wait( .75 );
		$puzzleCable_6.show();
		sys.wait( .75 );
		$puzzleCable_7.show();
	}	
}

void puzzCableSway( entity axis, string direction)	{
	// Lengthened version for the longer 'cable' in the engine puzzlez
	if( direction == "up" )	{
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 2' );
		sys.waitFor( axis );
		setNewTimes( axis , 1 , .5 , .5 );
		axis.rotateOnce( '0 0 -4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 4' );
		sys.waitFor( axis );		
		axis.rotateOnce( '0 0 -4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 3' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 -2' );
		sys.waitFor( axis );
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 1' );
		sys.waitFor( axis );
	}
	
	if( direction == "down" )	{
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 -2' );
		sys.waitFor( axis );
		setNewTimes( axis , 1 , .5 , .5 );
		axis.rotateOnce( '0 0 4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 -4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 4' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 -3' );
		sys.waitFor( axis );
		axis.rotateOnce( '0 0 2' );
		sys.waitFor( axis );
		setNewTimes( axis , .5 , .25 , .25 );	
		axis.rotateOnce( '0 0 -1' );
		sys.waitFor( axis );
	}
}

void loadEngine()	{
	
	// Lower engine
	sys.wait( .5 );
	thread adjustToEngine();
	setNewTimes( $puzzleMagnet , 6 , 1 , 2 );
	setNewTimes( $puzzleGear , 6 , 1 , 2 );
	$puzzleMagnet.move( DOWN , 160 );
	$puzzleGear.rotateOnce( '0 0 540' );
	
	// Sway cable	
	thread puzzCableSway( $puzzleAxis , "down" );
	thread puzzCableHide( "down" );
	sys.wait( 2.25 );
		
	// Open clamps and continue swaying action.
	thread openRangeClamps( $puzzleClampA , $puzzleClampB );
	
	sys.waitFor( $puzzleMagnet );
	sys.wait( .5 );

	// unbind engine
	$puzzleEngine.unbind();

	
	// Unlock the engine (audio/visual cues)
	sys.wait( .25 );
	sys.trigger( $snd_puzzleEngineUnlatch );
	sys.wait( .25 );
	
	// Start returning everything from whence it came
	$puzzleMagnet.move( UP , 160 );
	$puzzleGear.rotateOnce( '0 0 -540' );
	
	thread puzzCableSway( $puzzleAxis , "up" );
	thread puzzCableHide( "up" );
	sys.wait( 3 );
	closeRangeClamps( $puzzleClampA , $puzzleClampB );
	sys.wait( .25 );
	sys.trigger( $pre_fireGui );
	sys.trigger( $fireGui );
	sys.waitFor( $puzzleMagnet );
}

// Fire the engine!
void fireEngine( entity engine )	{
	
	// Fire
	//sys.println( "FIRE IN THE HOLE!!" );
	sys.trigger( $puzzleBurn_1 );
	
	// Trigger the hurt
	sys.trigger( $engineHurt_small );
	sys.trigger( $engineHurt_full );
	
	// Make the light go
	thread engineFire( $puzzleLight_1 );
	
	// Start playing effect
	sys.trigger( $glassMeltFX );
	
	// Wait a bit, then swap glass. 3 seconds currently lines up with when the big glowy bit disappears.
	sys.wait( 3 );
	sys.trigger( $breakingGlass );
	sys.trigger( $meltedGlass );	
	
	// Enable the pain from the melted glass
	sys.trigger( $trigger_theGlassItBurns );
		
	// Objective complete!
	sys.trigger( $glassObjectiveComplete );

	// New postFire function, now with 30% more polish!(tm)
	sys.wait( 2 );
	thread postFire();
	
	// Disable the GUI
	$fireGui.setGuiParm( "noninteractive", "1" );
	
	// Disable the hurt
	$engineHurt_small.remove();
	$engineHurt_full.remove();
	
}

//--
// End (new) new engine puzzle


//--
// New Viper Squad stuff		aweldon Apr 05
//--

void bindSG()	{


}

// Set us up the animations
void viperKneel()	{
	
	// Bind the shotgun!
	$mahler.hideSurface("models/weapons/mp_guns/w_mg_lo");
	aiScriptedAnim( $mahler , "af_pose" , 0, 1 );
	$mahlerSG.bindToJoint( $mahler , "r_wrist" , 1 );
	sys.waitFrame();
	
	// Put guys in the scripted anim loops
	aiScriptedAnimLoop( $mahler, "crouch_idle" , 0 );
	sys.wait( .2 );
	aiScriptedAnimLoop( $elgar, "crouch_idle" , 0 );
	sys.wait( .15 );
	aiScriptedAnimLoop( $puccini, "crouch_idle" , 0 );

}

// Make the viper squad guys be leadered to the player
void leaderize()	{
	
	if( isLivingEntity( $puccini )) 	{
		$puccini.setLeader( $player1 );		
	}
	
	if( isLivingEntity( $elgar )) 	{
		$elgar.setLeader( $player1 );		
	}
	
	$mahler.setLeader( $player1 );
}

// Quick wrapper for better lookAt functionality during dialogue
void lookAtForThen( entity looker , entity look1 , entity look2 , float initWait, float lookTime1 , float lookTime2 , boolean endNull )		{

	// Look at the first target
	looker.lookAt( look1 );
	
	// Wait a bit
	sys.wait( lookTime1 );
	
	// Look at the second target
	looker.lookAt( look2 );
	
	// Generally endNull should be 1. However, for extended scripted dialogue only the last one needs to be.
	if( endNull )	{
		// Wait a bit more, then re-set look target
		sys.wait( lookTime2 );
		looker.lookAt( $null_entity );		
	}
}

// Elgar (now Mr. Tech!) gets the first door
void elgarOpensDoor()	{

	aiScriptedMoveWait( $elgar , $elgarUnlockDoor , 0 , 0 );
	aiScriptedFaceWait( $elgar , $firstDoorGUI_closed , 0 );
	$elgar.lookAt( $firstDoorGUI_closed );
	aiScriptedAnimWait( $elgar , "console_stand_start" , 5 , 0 );
	aiScriptedAnimLoop( $elgar , "console_stand_loop" , 4 );
	sys.wait( 1.5 ); 
	sys.trigger( $firstDoorGUI_closed );
	sys.trigger( $firstDoorGUI_open );
	sys.trigger( $genDoorA_1 );
	aiScriptedAnimWait( $elgar , "console_stand_end" , 2 , 1 );
	sys.trigger( $elgarAimDoor );
	$elgar.becomeAggressive();
	$elgar.enableHeal();
	$puccini.enableHeal();
}

// Move Viper squad to the door
void moveToDoor()	{
	
	sys.wait( .5 );
	sys.trigger( $mahlerAimDoor );
	$mahler.becomeAggressive();
	sys.wait( .2 );
	sys.trigger( $pucciniAimDoor );
	$puccini.becomeAggressive();
	sys.wait( .5 );		
}

// Get Morris up to Viper Squad outside of the main meetViper function
void morrisToViper()	{
	$morris.setLeader( $null_entity );
	$morris.becomePassive( 1 );
	aiScriptedMoveWait( $morris , $morrisWhines , 32 , 1 );
	aiScriptedFaceWait( $morris , $mahler , 1 );
	$morris.lookAt( $mahler );
}

// Get Morris to look busy.
void morrisToConsole()	{
	$morris.setTalkState( TALK_OK );
	$morris.lookAt( $morrisConsoleLook );
	aiScriptedMoveWait( $morris , $morris_spot_1 , 4 , true );
	aiScriptedFaceWait( $morris , $morrisConsole , 1 );
	aiScriptedAnimWait( $morris , "console_stand_start" , 5 , 0 );
	aiScriptedAnimLoop( $morris , "console_stand_loop" , 5 );
}

void standUp( entity marine )	{
	aiScriptedAnimWait( marine , "crouch_to_stand_scripted" , 4 , 0 );
	aiScriptedAnimWait( marine , "relax_idle_start" , 4 , 1 );
}

// New viper squad intro - now with shotgun and appropriate setup to get the gun from the corpse
void meetViper()	{
	
	// Set the gun distance to the next distance (will help VO stay clear)
	thread setDistanceFromGun();
	
	// Temporarily disable healing.
	$elgar.disableHeal();
	$puccini.disableHeal();
	
	// Get Morris into the hallway
	thread morrisToViper();
	//sys.wait( .5 );
	
	// Guys stand up
	thread standUp( $puccini );
	sys.wait( .25 );
	thread standUp( $elgar );
	sys.wait( .5 );
	standUp( $mahler );
		
	// Mahler approaches
	
	$mahler.setMoveSpeed( AIMOVESPEED_WALK );
	aiScriptedMove($mahler, $mahler_intro, 8, true);
	sys.wait( .15 );
	$mahler.lookAt( $morris );
	sys.wait( .15 );
	$mahler.setTalkState( TALK_WAIT );
	$morris.setTalkState( TALK_WAIT );
	aiSpeakWait( $mahler , "lipsync_rhino" );
	
	// Morris responds
	$morris.lookAt( $mahler );
	aiSpeak( $morris , "lipsync_what_to_do" );
	sys.wait( .2 );
	$elgar.lookAt( $morris );
	
	// Puccini (Hayes) covers the rear
	sys.trigger( $pucciniAimDoor_1 );
	
	// Wait for Morris to finish talking
	aiSpeakDone( $morris );	
	
	// Reset Mahler's move speed for when he goes back to AI later.
	$mahler.setMoveSpeed( AIMOVESPEED_DEFAULT );
	
	// Mahler gives the scoop
	aiScriptedAnimLoop($mahler,"talk_idle", 4);
	thread lookAtForThen( $mahler , $player1 , $morris , 0 , 5 , 0 , 0 );
	aiSpeakWait( $mahler , "lipsync_sounds_fair" );
	aiScriptedAnimLoop( $mahler , "idle" , 4 );
	sys.wait( .25 );
	
	// Morris volunteers to stay back.
	aiScriptedAnimLoop( $morris , "talk_idle" , 4 );
	aiSpeakWait( $morris , "lipsync_I_suppose" );
	aiScriptedAnimLoop( $morris , "idle" , 4 );
	
	// Mahler agrees, then looks at the player.
	aiScriptedAnimLoop($mahler,"talk_idle", 4);
	thread lookAtForThen( $mahler , $morris , $elgar , 0 , 1 , 1 , 0 );
	aiSpeakWait( $mahler , "lipsync_thats_great" );
	$mahler.lookAt( $player1 );
	aiScriptedAnimLoop( $mahler , "idle" , 4 );
	sys.wait( .25 );
	$puccini.lookAt( $player1 );
	sys.wait( .1 );
	$elgar.lookAt( $player1 );
	
	// Get Morris to the console.
	$morris.setTalkState( TALK_OK );
	thread morrisToConsole();
		
	// Mahler faces the player and extends an offering of the shotgun.
	aiScriptedFaceWait( $mahler , $player1 , 1 );
	aiSpeak( $mahler , "lipsync_corp_kane" );
	aiScriptedFaceWait( $mahler , $player1 , 1 );
	aiSpeak( $mahler , "lipsync_take_gun" );
	sys.wait( 1 );
	aiScriptedAnimWait($mahler, "player_gift_start", 4, 1);
	aiScriptedAnimLoop($mahler, "player_gift_loop", 4 );
	sys.trigger( $trigger_takeGun );
}
	
// Split this half into another function to facilitate the new weapon handing anims.
void playerTakesGun()	{
		
	aiSpeakDone( $mahler );
	
	$mahler.setTalkState( TALK_OK );
		
	// Trigger the shotgun
	sys.trigger( $giveShotgun );
	$mahlerSG.remove();
	sys.waitFrame();
	$player1.selectWeapon( "weapon_shotgun" );

	// Remove the blocker
	sys.trigger( $noYouDont );

	// End Mahler's idle loop
	aiScriptedAnimWait($mahler, "player_gift_end", 4, 1);
	sys.wait( .1 );
	
	// Put a gun back in Mahler's hands.
	aiScriptedFaceWait( $mahler , $genFrame_1 , 1 );
	$mahlerMachineGun.remove();
	$mahler.showSurface("models/weapons/mp_guns/w_mg_lo");
	aiScriptedAnim( $mahler , "weapon_check_2" , 10 , 1 );
	sys.wait( .5 );
		
	// Elgar opens the door
	thread elgarOpensDoor();
	$mahler.lookAt( $null_entity );
	$elgar.lookAt( $null_entity );
	$puccini.lookAt( $null_entity );
	sys.wait( .5 );
	
	// Move out!
	thread moveToDoor();
	
	// Save the game here.
	sys.trigger( $saveGame );
}

// Mahler opens the main hangar entrance
void mahlerAtEntrance()	{

	sys.trigger( $puccini_entranceTether );
	sys.wait( .5 );
	sys.trigger( $elgar_entranceTether );
	aiScriptedMoveWait( $mahler , $mahlerUnlockDoor , 0 , 0 );
	aiScriptedFaceWait( $mahler, $entranceGUI_closed , 0 );
	$mahler.lookAt( $entranceGUI_closed );
	aiScriptedAnimWait( $mahler , "use_gui_standing_start" , 2 , 0 );
	aiScriptedAnimWait( $mahler , "use_gui_standing_end" , 2 , 1 );
	$mahler.lookAt( $null_entity );
	sys.trigger( $entranceGUI_closed );
	sys.trigger( $entranceGUI_open );
	sys.trigger( $entranceDoor_1 );
	sys.trigger( $entrancePos_2 );
	sys.wait( .5 );
	sys.trigger( $entrancePos_1 );
	sys.wait( .2 );
	sys.trigger( $entrancePos_3 );
	
	thread leaderize();
}

//--
// End viper squad stuff
//--

//--
// Adding flyovers from airdefense
//--

//moves one flyer sprite across the sky over the trenches
//------------------------------------------------------------------------------------
void maintainStroggFlyerSprite(entity entMover, entity fxNormal, entity fxDamage, entity entHangar, entity entTgrEnd, vector vDirection)
{	
	sys.wait( sys.random(10) );
	
	//will the planes be swervey?
	float fSwerve = 0;
	float fWaitTime = 0;
	float fAmplitude = 0;

	while(1)	
	{
		//place the mover on the "hangar" line, equal in the X but displaced in the Y by +/- ___ units
		// +/- Y displacement
		float fDisplacementMax = 2000;
		float fDelta = 0;

		//start location for the flyer
		vector vStart = entHangar.getWorldOrigin();
		vector vSpeed = '0 0 0';
		vector vAngs;

		//flyer speed
		float fSpeed = 900 + (sys.random(600));

		fSwerve = sys.random(200) + 100;
		fAmplitude = sys.random(90) + 30;

		//stop the flyer-- move him into position after we figure out where he goes.
		entMover.setLinearVelocity( '0 0 0');

		//mathery mcmath
		fDelta = (0 - fDisplacementMax + sys.random( fDisplacementMax * 2));
		vStart_y += fDelta;

		//move to position
		entMover.setWorldOrigin( vStart );
		sys.waitFrame();
		
		//set the direction as speed
		vSpeed = vDirection * fSpeed;	
		vSpeed_z = 0;

		// set initial angle in case this is a non-swerving dude..
		vAngs = sys.VecToAngles(vSpeed);
		entMover.setAngles(vAngs);
	
		fWaitTime = sys.getTime() +  sys.random(2.5);
	
		//turn on the regular plane, turn off the alternate
		fxNormal.start();
		fxDamage.stop();	
		
		while( sys.getTime() < fWaitTime)	
		{
			//fly!
			entMover.setLinearVelocity( vSpeed);

			//swerve if need be
			if( fSwerve != 0)	
			{
				vSpeed_y = sys.sin( sys.getTime() * fAmplitude ) *  fSwerve;

				// update facing so effects can draw properly
				vAngs = sys.VecToAngles(vSpeed);
				entMover.setAngles(vAngs);
			}

			//if somehow the ship has escaped the skybox, break
			if( entMover.touches( entTgrEnd))	
			{
				break;
			}
			//decend on the way out
			sys.waitFrame();
		}

		//second loop, descend.
		vSpeed_z = 0;

		if(sys.random(20) < 2)
		{
			//sys.println("Damaged!");

			//slow down and fly off course, descend faster
			vSpeed_x *= 0.25;
			if (vSpeed_y < 10 && vSpeed_y > -10)	
			{
				vSpeed_y += ( -800 + sys.random(1600));
			} else	
			{
				vSpeed_y *= 4;
			}
			vSpeed_z *= 1.25;

			//no more swerving
			fSwerve = 0;

			//switch to damaged effect, and explode
			fxNormal.stop();
			fxDamage.start();
			$fx_flyer_damage.setWorldOrigin( entMover.getWorldOrigin() );
			sys.trigger( $fx_flyer_damage);
		}
		
		fWaitTime = sys.getTime() +  5;

		//after the possible damage time, remove once the ship has left the skybox
		while( (sys.getTime() < fWaitTime) && ( !entMover.touches( entTgrEnd))  )	
		{
			//fly!
			entMover.setLinearVelocity( vSpeed);

			//swerve if need be
			if( fSwerve != 0)	
			{
				vSpeed_y = sys.sin( sys.getTime() * fAmplitude ) *  fSwerve;
				// update facing so effects can draw properly
				vAngs = sys.VecToAngles(vSpeed);
				entMover.setAngles(vAngs);
			}

			//decend on the way out
			sys.waitFrame();
		}
	}
}

//--
// End flyover stuff

void main()	
{
	thread morris_follow();
	
	thread tracers();
	
	// Hide hacked-in illusion cables
	thread hideRangeCables();
	thread hidePuzzleCables();
	
	// Get test fire range into proper order
	thread openRangeClamps( $rangeClampA_1 , $rangeClampA_2 );
	thread openRangeClamps( $rangeClampB_1 , $rangeClampB_2 );
	thread offsetEngineTwo();
	
	// Cache sounds - FIX POST-ALPHA
	thread cacheSounds();
	
	// Make the call lift guis not work for the evil elevator
	$elevACall_1.guiEvent( "greyout" );
	$elevACall_2.guiEvent( "greyout" );
	
	// Make the big gun effects happen!
	thread loopGun();
	
	// Get the flyer sprites going on map load
	float t;
	
	for (t = 1; t <= 2; t++)	
	{
		thread maintainStroggFlyerSprite( sys.getEntity("mvr_fx_strogg_flyer_" + t), sys.getEntity("fx_air_strogg_fighter_" + t), sys.getEntity("fx_air_strogg_fighter_" + (t + 6) ), $tgt_strogg_flyer_hangar, $tgr_strogg_flyer_end, '-1 0 .1' );
		thread maintainStroggFlyerSprite( sys.getEntity("mvr_fx_marine_flyer_" + t), sys.getEntity("fx_air_marine_fighter_" + t), sys.getEntity("fx_air_marine_fighter_" + (t + 6) ), $tgt_marine_flyer_hangar, $tgr_marine_flyer_end, '1 0 .1' );
	}	
}

} // end of namespace map_hangar1
