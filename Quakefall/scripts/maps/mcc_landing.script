//------------------------------------------------------------------------------------
// MCC_landing.script
//
// (c) Raven Software 2005		mrenner
//					aweldon
//------------------------------------------------------------------------------------

namespace map_mcc_landing	
{

//------------------------------------------------------------------------------------
// Globals
//

//keeps the big gun moving and firing
float g_bigGunActive = 1;

//Stuff for fading the fill lights as needed
float lightsAreFading = 0;
float lightsAreOn = 1;

//make sure the player won't interfere with the lift
float playerClearedLift = 0;


//------------------------------------------------------------------------------------
// radio chatter heard when riding down the elevator.
//------------------------------------------------------------------------------------
void elevatorChatter()
{
	/*
	// Owl has arrived
	radioChatterPlayWait ($elevator_chatter_1, "");
	sys.wait(2);
	
	// fliers to study.
	radioChatterPlayWait ($elevator_chatter_2, "");
	*/

	sys.wait(2);
	
	// Get here quick, Kane.
	radioChatterPlayWait ($morrisRush_1, "");

}
//------------------------------------------------------------------------------------
// elevator up and down
//------------------------------------------------------------------------------------

void elevatorRideUp()
{	
	$starting_elevator.time(20);
	$starting_elevator.accelTime(4);

	$starting_elevator.move( UP, 1088 );
	sys.waitFor($starting_elevator);
}

void langfordLeaves()
{
	if( isLivingEntity( $LANGFORD )	)	{
		$LANGFORD.setMoveSpeed ( AIMOVESPEED_WALK );
		aiScriptedMoveWait( $LANGFORD, $marineUseLift, 8, 1 );
		$LANGFORD.lookAt( $func_static_5 );
	
		while( !playerClearedLift)
		{
			sys.waitFrame();
		}
	}
	
	if( isLivingEntity( $LANGFORD )	)	{
		$LANGFORD.lookAt( $elevRoofTopGUI );
		aiScriptedAnim( $LANGFORD , "point_forward" , 5 , 1 );
		sys.wait( 1 );
		thread elevatorRideUp();
	}
}

void elevatorRideDown()
{	
	aiScriptedAnimLoop($STRAUSS, "relax_idle", 0 );
	
	$starting_elevator.time(20);
	$starting_elevator.decelTime(4);

	$starting_elevator.move( DOWN, 1088 );
	sys.waitFor($starting_elevator);
	
	thread langfordLeaves();
	
}

void setLiftClear()	{

	playerClearedLift = 1;	
	
}

//--
// Morris being annoying	aweldon
//--

float playerAtMorris = 0;

void morrisIsImpatient()	{
	
	sys.wait( 60 );
	
	while (!playerAtMorris)	{
		
		/* oops, this one was redundant
		if( !playerAtMorris )	{
			sys.trigger( $morrisRush_1 );		
			sys.wait( 60 );
		}
		*/
		
		if( !playerAtMorris )	{
			sys.trigger( $morrisRush_2);		
			sys.wait( 60 );
		}
		
		if( !playerAtMorris )	{
			sys.trigger( $morrisRush_3 );		
			sys.wait( 60 );
		}
	}
}


void shaddupMorris()	{
	playerAtMorris = 1;
}

//--
// End Morris being annoying

//------------------------------------------------------------------------------------
//Meet Strauss
//------------------------------------------------------------------------------------
void complainStrauss()
{
	$STRAUSS.setTalkState( TALK_WAIT );
	aiScriptedAnimWait($STRAUSS, "idle_wrist_gui_start", 4, 1);
	aiScriptedAnimLoop($STRAUSS, "idle_wrist_gui_loop", 0 );
	aiSpeakWait( $STRAUSS, "lipsync_1" );
	sys.trigger($talkMahler_1);
	sys.wait(2.25);
	aiSpeakWait( $STRAUSS, "lipsync_2" );
	sys.trigger($talkMahler_2);
	aiScriptedAnimWait($STRAUSS, "idle_wrist_gui_end", 4, 1);
	$STRAUSS.lookAt( $player1 );
	//aiScriptedAnimLoop($STRAUSS, "relax_idle", 0 );
	sys.wait(1);
	sys.trigger($straussTrig_1);
}
void meetStrauss()
{
	aiSpeakWait( $STRAUSS, "lipsync_3" );
	aiScriptedStop($STRAUSS);	
	$STRAUSS.setTalkState(TALK_OK);	
	sys.wait( 1 );
	$STRAUSS.enableHeal();
}

//------------------------------------------------------------------------------------
//HARAGUCHI giving orders to KIPP & LANGFORD
//------------------------------------------------------------------------------------
void spawnStegman()
{
	aiScriptedAnimLoop($LANGFORD, "relax_idle", 0 );
}

void talkStegman()
{
	aiScriptedAnimWait($STEGMAN, "idle_wrist_gui_start", 4, 1);
	aiScriptedAnimLoop($STEGMAN, "idle_wrist_gui_loop", 0 );
	
	$STEGMAN.setTalkState( TALK_WAIT );	
	aiSpeak( $STEGMAN, "lipsync_1" );
	sys.wait(4);
	$HARAGUCHI.lookAt( $STEGMAN );
	aiScriptedAnimWait($STEGMAN, "idle_wrist_gui_end", 4, 1);
	$STEGMAN.lookAt( $HARAGUCHI );
	//aiScriptedAnimLoop($STEGMAN, "relax_idle", 0 );
	aiSpeakDone( $STEGMAN );

	sys.wait(1);
	//aiScriptedAnimLoop($STEGMAN, "relax_idle", 0 );
	$STEGMAN.lookAt( $null_entity );
	aiScriptedFaceWait( $STEGMAN, $func_static_53763, 1 );	
	$STEGMAN.setTalkState( TALK_OK );

	sys.wait(3);
	// more Cork to the corner
	$HARAGUCHI.lookAt( $null_entity );	
	
	aiScriptedMoveWait( $HARAGUCHI , $target_haraMoveToConsole , 4 , 1 );
	aiScriptedFaceWait( $HARAGUCHI , $target_haraLookAtConsole , 0 );
	aiScriptedAnimWait( $HARAGUCHI , "console_stand_start" , 5 , 0 );
	aiScriptedAnimLoop( $HARAGUCHI , "console_stand_loop" , 5 );
}

/*
void spawnLangfordKipp()
{
	aiScriptedAnimLoop($LANGFORD, "relax_idle", 0 );
	aiScriptedAnimLoop($KIPP, "relax_idle", 0 );
	aiScriptedAnimLoop($HARAGUCHI, "relax_idle", 0 );
}
*/

void kippGo()
{
	$KIPP.setMoveSpeed ( AIMOVESPEED_WALK );
	aiScriptedMoveWait( $KIPP, $kippStop, 8, 1 );
	aiScriptedFaceWait( $KIPP, $func_static_53455, 1 );
	aiScriptedAnimWait( $KIPP , "use_gui_standing_start" , 5 , 0 );	
	aiScriptedAnimLoop( $KIPP , "use_gui_standing_loop" , 0 );
}

void haraOrders()
{
	$HARAGUCHI.setTalkState( TALK_WAIT );
	$HARAGUCHI.lookAt( $LANGFORD );
	aiSpeakWait( $HARAGUCHI, "lipsync_1" );

	$HARAGUCHI.lookAt( $KIPP );
	aiSpeak( $HARAGUCHI, "lipsync_2" );
	aiScriptedFace( $HARAGUCHI, $KIPP, 1 );	
	sys.wait(.5);
	aiScriptedAnimWait($HARAGUCHI, "point_back", 4, 1);
	thread kippGo();
	//aiScriptedAnimLoop($HARAGUCHI, "relax_idle", 0 );
	sys.trigger($meetHaraTrig);
}
void meetHara()
{
	aiScriptedFaceWait( $HARAGUCHI, $player1, 1 );	
	aiScriptedAnimLoop($HARAGUCHI, "relax_idle", 0 );
	$HARAGUCHI.lookAt( $player1 );
	aiSpeakWait( $HARAGUCHI, "lipsync_3" );

	thread talkStegman();

	$HARAGUCHI.lookAt( $null_entity );
	aiScriptedStop($HARAGUCHI);	
	$HARAGUCHI.setTalkState(TALK_OK);
}

void stretchyStretchy()
{
	aiScriptedAnimWait($runningMarine2_1, "idle_stretching_3", 4, 1);
}
//------------------------------------------------------------------------------------
//MATHNEY & GRADE talking about the equipment.
//------------------------------------------------------------------------------------
void spawnGradeMathney()
{
	$gradeBoard.show();
	aiScriptedAnim( $GRADE, "af_pose", 4, 0 );	
	$gradeBoard.bindToJoint($GRADE, "l_wrist", 1);	
	$GRADE.disableEyeFocus();
	
	$GRADE.setTalkState( TALK_WAIT );
	$MATHNEY.setTalkState( TALK_WAIT );
}
void gradeMathney()
{
	$MATHNEY.lookAt( $GRADE );
	$GRADE.lookAt( $MATHNEY );	
	aiSpeakWait( $MATHNEY, "lipsync_1" );
	aiSpeakWait( $GRADE, "lipsync_1" );
	aiSpeakWait( $MATHNEY, "lipsync_2" );
	aiSpeakWait( $GRADE, "lipsync_2" );
	aiSpeakWait( $MATHNEY, "lipsync_3" );
	aiSpeakWait( $GRADE, "lipsync_3" );
	$MATHNEY.lookAt( $null_entity );
	$GRADE.lookAt( $null_entity );

	$GRADE.setTalkState(TALK_OK);
	$MATHNEY.setTalkState( TALK_OK);

	sys.trigger($ai_tether_radius_19);
}

//------------------------------------------------------------------------------------
//MURPHY & BAKU looking at the strogg engine.
//------------------------------------------------------------------------------------
void spawnMurphyBaku()
{
	$murphyBoard.show();
	aiScriptedAnim( $MURPHY, "af_pose", 4, 0 );	
	$murphyBoard.bindToJoint($MURPHY, "l_wrist", 1);	
	$MURPHY.setTalkState( TALK_WAIT );
	$BAKU.setTalkState( TALK_WAIT );
}
void murphyBaku()
{
	$MURPHY.disableEyeFocus();
	aiSpeakWait( $BAKU, "lipsync_1" );
	aiSpeakWait( $MURPHY, "lipsync_1" );
	aiSpeakWait( $BAKU, "lipsync_2" );
	aiSpeakWait( $MURPHY, "lipsync_2" );
	aiSpeakWait( $BAKU, "lipsync_3" );			
	aiSpeakWait( $MURPHY, "lipsync_3" );
	$BAKU.setTalkState(TALK_OK);		
	$MURPHY.setTalkState(TALK_OK);			
}

//------------------------------------------------------------------------------------
//GATEMAN working on a console and talking with STRASSA
//------------------------------------------------------------------------------------
void spawnGateman()
{
	aiScriptedAnimLoop($GATEMAN, "working_wall_panel", 0 );
	$GATEMAN.setTalkState(TALK_WAIT);			
}

void StrassaGateman() // isLivingEntity handles added since extra marines get culled while this is potentially running - aweldon
{	
	aiSpeakWait( $GATEMAN, "lipsync_1" );
	sys.trigger($talkStrassa_1);
	sys.wait(5.5);	
	if( isLivingEntity( $GATEMAN ) )	{
		aiSpeakWait( $GATEMAN, "lipsync_2" );
		sys.trigger($talkStrassa_2);	
		sys.wait(4.5);
	}
	if( isLivingEntity( $GATEMAN ) )	{		
		aiSpeakWait( $GATEMAN, "lipsync_3" );
		sys.trigger($talkStrassa_3);
		sys.wait(1.5);	
	}
	if( isLivingEntity( $GATEMAN ) )	{
		aiScriptedStop($GATEMAN);		
		$GATEMAN.setTalkState(TALK_OK);	
	}
}


//------------------------------------------------------------------------------------
//meeting MORRIS and fighting along with him
//------------------------------------------------------------------------------------
void meetMorris()
{
	$MORRIS.setTalkState(TALK_WAIT);	
	sys.waitFrame();
	aiScriptedFaceWait( $MORRIS, $player1, 1 );	
	aiSpeak( $MORRIS, "lipsync_1" );
	sys.wait( 1.5 );
	aiScriptedAnimWait( $MORRIS , "weapon_check_2" , 5 , 1 );
	sys.trigger( $tunnelTether_2 );
	//sys.println("follow player");
	$MORRIS.setTalkState(TALK_OK);
	$MORRIS.setLeader($player1);
}
//------------------------------------------------------------------------------------
//meeting SLEDGE & VOSS, proceed to the big gun
//------------------------------------------------------------------------------------
void spawnSledge()
{
	aiScriptedAnimLoop($SLEDGE, "idle_scan_2", 0 );
}
void spawnVoss()	{
	$bustedTruckNew.show();
	$VOSS.show();
	aiScriptedAnimLoop($VOSS, "crouch_idle", 1 );
}

void spawnSledgeVoss()	{
	// This is technically unnecessary but I'm trying it anyway to make stuffs work.
	thread spawnSledge();
	thread spawnVoss();	
}

void sledgeVoss()
{
	$VOSS.setTalkState(TALK_WAIT);	
	$SLEDGE.setTalkState(TALK_WAIT);	
	$MORRIS.setTalkState(TALK_WAIT);	

	// Return to the Air Defense Cannon and regroup with Lt. Voss and the members of Rhino Squad.
	sys.trigger($item_objectivecomplete_1);
	sys.trigger( $trenchMusic );
	//sys.wait(2);

	//sys.println("Destroy the gun");
	aiScriptedAnimWait( $VOSS , "crouch_to_stand_scripted" , 4 , 1 );
	aiScriptedAnimWait( $VOSS , "stand_to_relaxed" , 4 , 1 );
	$VOSS.lookAt($player1);
	aiScriptedFaceWait( $VOSS , $player1 , 1 );
	aiSpeak( $VOSS, "lipsync_1" );
	sys.wait( 3 );
	
	// Extend the offering of explosive goodness
	aiScriptedAnimWait($VOSS, "player_gift_start", 4, 0);
	aiScriptedAnimLoop($VOSS, "player_gift_loop", 4 );
	
	// Enable the trigger to grab the gun.
	sys.trigger( $trigger_vossGivesGun );
}

// Split this off for the new weapon hand-off setup	
void sledgeVoss_B()
{	
	aiScriptedAnimWait($VOSS, "player_gift_end", 4, 0);
	$vossShotgun.hide();
	$VOSS.showSurface("models/weapons/mp_guns/w_hb");
	$VOSS.showSurface("models/weapons/mp_guns/w_hb_battery");
	aiSpeakDone( $VOSS );
	aiSpeak( $VOSS, "lipsync_2" );
	aiScriptedAnim( $SLEDGE , "weapon_check_1" , 5 , 1 );
	aiScriptedAnimWait($VOSS, "point_back", 4, 1);
	$VOSS.lookAt( $null_entity );

	//$MORRIS.setLeader($null_entity);

	// move out
	//sys.println("Voss move out");
	sys.trigger( $vossStopper );
	aiScriptedFaceWait( $SLEDGE , $VOSS, 1 );
	sys.trigger( $trenchTetherChain_1 );
	aiSpeakDone( $VOSS );
	
	sys.trigger( $saveGame );

// Find a way into the Air Defense Cannon control station and use it to destroy the doors leading to the incoming Mobile Command Center.
	sys.trigger($item_objective_2);
	//sys.wait(5);
	
	$VOSS.setTalkState(TALK_OK);
	$SLEDGE.setTalkState(TALK_OK);
	//$MORRIS.setTalkState(TALK_OK); morris has no lines for stuff after this, so he'll just have to be quiet.
}

void giveGun()
{
// hand the player the grenade launcher.	
	sys.trigger($giveLauncher);
	//sys.println("no gun!");
	sys.waitFrame();
	$vossGL.remove();
	$player1.selectWeapon( "weapon_grenadelauncher" );
	thread sledgeVoss_B();
}

/*
void openedDoor()
{
	//remove the ai pilot from the AD gun
	g_bigGunActive = 0;


	$VOSS.setKey( "annoyed", "0" );
	sys.wait(1);
	aiSpeakWait( $VOSS, "lipsync_4" );
	aiSpeak( $SLEDGE, "lipsync_4" );
	sys.println("Move In Now!!");
	aiScriptedTetherMove( $SLEDGE, $moveInTether );
	aiScriptedTetherMoveWait( $VOSS, $moveInTether );
}
*/

/*
void voss2Console()
{
	aiScriptedTetherMove( $SLEDGE, $gun_tether );
	aiScriptedTetherMoveWait( $VOSS, $gun_tether );
	sys.trigger($nearCannonGui);
}
*/

void loopVossWaiting()
{
	while(1)
	{
		radioChatterPlayWait ($vossWaiting_1, "");
		sys.wait( 5 + sys.random(2) );				
		radioChatterPlayWait ($vossWaiting_2, "");
		sys.wait( 5 + sys.random(2) );				
		radioChatterPlayWait ($vossWaiting_3, "");
		sys.wait( 5 + sys.random(2) );				
	}
}

void shootDoor()
{
	// at this point the player is actually in control of the cannon.
	aiSpeak( $VOSS, "lipsync_6" );
	radioChatterPlayWait ($vossShootDoor1, "");
	
	$player1.enterVehicle( $vehicle_airdefense_big_gun_1 );
	
	
}

void spawnHorton()
{
	aiScriptedMoveWait( $HORTON, $redShirtTunnelStop, 24, 1 );
	aiScriptedAnimLoop($HORTON, "relax_idle", 0 );		
	$HORTON.lookAt( $player1 );	
}
void spawnHorton2()
{
	$LAW.setTalkState(TALK_WAIT);
	aiScriptedAnimLoop($LAW, "crouch_idle", 0 );		
}

/*

//----------------------------------------------------------------
//	random marines running through the trenches.
//----------------------------------------------------------------
void spawnRunningMarines()
{
	while(1)
	{
		aiScriptedTetherMove( $runningMarine1, $randomMarineTether_1a );
		aiScriptedTetherMoveWait( $runningMarine2, $randomMarineTether_1a );
		sys.wait( 20 + sys.random(10) );				
		sys.println("run to trenches");
		aiScriptedTetherMove( $runningMarine1, $randomMarineTether_1b );
		aiScriptedTetherMoveWait( $runningMarine2, $randomMarineTether_1b );
		sys.wait( 20 + sys.random(10) );
	}
}
*/

//----------------------------------------------------------------
//	Turn on and off the cannon so the player can't go outside and gain control
//
//----------------------------------------------------------------

/*
void doorTrigOn()
{
	$damageTrig.show();
	$vehicle_airdefense_big_gun_1.lock( false );
}
void doorTrigOff()
{
	$vehicle_airdefense_big_gun_1.lock( true );
	$damageTrig.hide();
}
*/

void destroyedGun()
{
	aiScriptedStop($LAW);	
	sys.waitFrame();
	$LAW.setLeader($player1);

	$HORTON.setTalkState(TALK_WAIT);

	// Target is clear.
	radioChatterPlayWait ($clearedVO, "");
	$HORTON.lookAt( $vehicle_airdefense_big_gun_1 );
	aiSpeakWait( $HORTON, "lipsync_1" );
	radioChatterPlayWait( $chargesActiveVO, "");
	
	// activate the trigger to fire off the big gun being destroyed.	
	sys.trigger($facing2Gun);
	
	//This is as good a time as any to remove Voss and Sledge from the map
	$VOSS.remove();
	$SLEDGE.remove();
}

void blowUpGun()
{
	radioChatterPlayWait ($countdown, "");
	sys.wait( 1 );	
	//sys.println("Gun Destroyed!");
	
	sys.trigger($smallGunExplosion_1);	
	sys.wait(.2);
	sys.trigger($smallGunExplosion_4);
	sys.wait(.2);
	sys.trigger($smallGunExplosion_2);
	sys.wait(.2);
	sys.trigger($smallGunExplosion_3);
	sys.wait(.2);

	sys.trigger($gunExplosion);
	sys.wait(.2);
	sys.trigger($gunExplosion_1);	
	sys.trigger($gunCameraShakeFx);
	$vehicle_airdefense_big_gun_1.hide();
	$bustedGun.show();
	aiScriptedAnimWait($HORTON, "cowering_start", 4 , 0 );
	//aiScriptedAnimWait($HORTON, "cowering_loop", 4 , 0 );
	aiScriptedAnimWait($HORTON, "cowering_end", 4 , 1 );
	$HORTON.lookAt( $null_entity );	
	sys.wait( 1 );
	radioChatterPlayWait ($rhodesLovesJob, "");
	sys.wait(.5);
	
	aiSpeakWait( $LAW, "lipsync_1" );
	$LAW.setTalkState(TALK_OK);	
	$HORTON.setTalkState(TALK_OK);

	sys.trigger($startTunnelTethers);
}

/*
void damn()
{
	aiSpeak( $LAW, "lipsync_2" );
}
void tunnelTalk1()
{
	aiSpeakWait( $LAW, "lipsync_3" );
	sys.wait(1);
	aiSpeakWait( $LAW, "lipsync_4" );
}
void tunnelTalk2()
{
	aiSpeak( $LAW, "lipsync_6" );
}
void tunnelTalk3()
{
	aiSpeak( $LAW, "lipsync_5" );
}
void tunnelTalk4()
{
	aiSpeak( $LAW, "lipsync_6" );
}
*/

//------------------------------------------------------------------------------------
//marine blocking the players path
//------------------------------------------------------------------------------------
void winetree()
{
	$WINETREE.setTalkState(TALK_WAIT);
	aiScriptedFaceWait( $WINETREE, $player1, 1 );	
	aiSpeakWait( $WINETREE, "lipsync_1" );
	aiScriptedFaceWait( $WINETREE, $func_fx_631, 1 );	
	aiScriptedStop($WINETREE);	
	$WINETREE.setTalkState(TALK_OK);	
}

//------------------------------------------------------------------------------------
//marines pinned out near the mcc_landing zone
//------------------------------------------------------------------------------------
void pinnedMarine_1()
{
	aiScriptedAnimLoop($pinnedMarine_1, "ad_wounded_on_knee_loop", 0 );
}

void pinnedMarine_2()
{
	aiScriptedAnimLoop($pinnedMarine_2, "cowering_idle", 0);	
}

void pinnedMarine_3()
{
	aiScriptedAnimLoop($pinnedMarine_3, "cover_right_idle", 0 );
}

void spawnPinnedMarines()
{
	thread pinnedMarine_1();
	thread pinnedMarine_2();
	thread pinnedMarine_3();
}

void needMedic()	{
	
	$pinnedMarine_2.setTalkState(TALK_WAIT);
	$pinnedMarine_3.setTalkState(TALK_WAIT);
	aiScriptedStop( $pinnedMarine_3 );
	aiScriptedAnimWait( $pinnedMarine_3, "idle_wrist_gui_start_fast", 4, 0);
	aiScriptedAnimLoop( $pinnedMarine_3, "idle_wrist_gui_loop", 0 );
	aiSpeakWait( $pinnedMarine_3 , "lipsync_need_medic" );
	sys.wait( .25 );
	radioChatterPlayWait ($airstrikeChatter_3, "");
	aiScriptedAnim( $pinnedMarine_3, "idle_wrist_gui_end", 4, 1);
	sys.wait( .5 );
	$pinnedMarine_3.lookAt( $pinnedMarine_2 );
	$pinnedMarine_2.lookAt( $pinnedMarine_3 );
	aiSpeakWait( $pinnedMarine_2 , "lipsync_ill_stay" );
	sys.trigger( $waitForMedicTether );
	sys.wait( .5 );
	aiSpeakWait( $pinnedMarine_2 , "lipsync_hang_on" );
	$pinnedMarine_3.lookAt( $player1 );
	aiSpeakWait( $pinnedMarine_3 , "lipsync_why_wait" );
	$pinnedMarine_3.lookAt( $null_entity );
	$pinnedMarine_3.becomeAggressive();
	$pinnedMarine_3.setLeader( $player1 );	
	
	sys.trigger( $shipObjective );
	
	$pinnedMarine_2.setTalkState(TALK_OK);
	$pinnedMarine_3.setTalkState(TALK_OK);
}

void relaxedMarines()
{
	aiScriptedAnim($pinnedMarine_2, "cowering_end", 4 , 1 );
	sys.wait( .25 );
	aiScriptedAnim($pinnedMarine_3, "idle", 5 , 1 );
	sys.wait( 1 );
	aiSpeakWait( $pinnedMarine_3 , "lipsync_thanks" );
	sys.wait( .25 );
	radioChatterPlayWait ($airstrikeChatter_2, "");
	sys.wait( 1 );
	sys.trigger( $lawDefends );
	sys.wait( 2 );
	
	thread needMedic();
}

void offRoad()
{
	$mon_building_turret_4.setKey( "enemy", "player1" );
	$mon_building_turret_5.setKey( "enemy", "player1" );

	$mon_building_turret_4.setKey( "attack_blaster_accuracy", "1" );
	$mon_building_turret_5.setKey( "attack_blaster_accuracy", "1" );

	$mon_building_turret_4.setKey( "action_rangedAttack_maxRange", "15000" );
	$mon_building_turret_5.setKey( "action_rangedAttack_maxRange", "15000" );

}

// Destroy south bunkers
void fireOne()	{
	
	// Fire volley 1
	sys.trigger( $mccBeamA_2 );
	sys.trigger( $mccFocusA_2 );
	sys.trigger( $mccBlastA_2 );
	sys.wait( .5 );
	
	// Fire volley 2
	sys.trigger( $mccBeamA_1 );
	sys.trigger( $mccFocusA_1 );
	sys.trigger( $mccBlastA_1 );
	
}

// Destroy north bunkers
void fireTwo()	{

	// Fire volley 1
	sys.trigger( $mccBeamB_1 );
	sys.trigger( $mccFocusB_1 );
	sys.trigger( $mccBlastB_1 );
	sys.wait( .5 );
	
	// Fire volley 2
	sys.trigger( $mccBeamB_2 );
	sys.trigger( $mccFocusB_2 );
	sys.trigger( $mccBlastB_2 );
	
}

void bunkersTargetMCC()	{
	
	$farBunkerFX_1.setKey( "target" , "mcc" );
	sys.wait( .5 );
	$farBunkerFX_2.setKey( "target" , "mcc" );
	sys.wait( .25 );
	$farBunkerFX_3.setKey( "target" , "mcc" );
	sys.wait( .15 );
	$farBunkerFX_4.setKey( "target" , "mcc" );
	sys.wait( .25 );
	$farBunkerFX_5.setKey( "target" , "mcc" );
	sys.wait( .15 );
	$farBunkerFX_6.setKey( "target" , "mcc" );
}

//------------------------------------------------------------------------------------
//set up stuff for the mcc ship to land
//------------------------------------------------------------------------------------
void hangarGutSetUp()
{
	$hangar_guts.rotateOnce('0 -90 0');
	$hangarShadow.hide();
}

void bindToMcc()
{
// engine fx
	$thrustEffect_1.bindToJoint($mcc, "Ship_Body", 1);
	$thrustEffect_2.bindToJoint($mcc, "Ship_Body", 1);

// the insides to the ship.
	$hangar_guts.bindToJoint($mcc, "Ship_Body", 1);

// Projectiles and effects for new attack, Turret 1
	$mccBlastA_1.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	$mccFocusA_1.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	$mccBeamTargetA_1.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	
	$mccBlastA_2.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	$mccFocusA_2.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	$mccBeamTargetA_2.bindToJoint($mcc, "B_belly_turret_stock_L", 1);

// Projectiles and effects for new attack, Turret 2
	$mccBlastB_1.bindToJoint($mcc, "F_belly_turret_stock_R", 1);
	$mccFocusB_1.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	$mccBeamTargetB_1.bindToJoint($mcc, "F_belly_turret_stock_R", 1);

	$mccBlastB_2.bindToJoint($mcc, "F_belly_turret_stock_R", 1);
	$mccFocusB_2.bindToJoint($mcc, "B_belly_turret_stock_L", 1);
	$mccBeamTargetB_2.bindToJoint($mcc, "F_belly_turret_stock_R", 1);
	
// sounds and lights for landing - alarms
	$landingAlarm_1.bindToJoint($mcc, "Ship_Body", 1);	
	$landingAlarm_2.bindToJoint($mcc, "Ship_Body", 1);	
	$landingAlarm_3.bindToJoint($mcc, "Ship_Body", 1);	
	$alarmLight_1.bindToJoint($mcc, "Ship_Body", 1);	
	$alarmLight_2.bindToJoint($mcc, "Ship_Body", 1);	
	$alarmLight_3.bindToJoint($mcc, "Ship_Body", 1);	
	
// better looking lights/flares
	$shipCircleLightFixture.bindToJoint( $mcc , "Ship_Body" , 1 );
	$shipCircleLightFlare.bindToJoint( $mcc , "Ship_Body" , 1 );
	$shipCircleLight_1.bindToJoint( $mcc , "Ship_Body" , 1 );
	$shipCircleLight_2.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLightFixture_1.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLightFlares_1.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLight_1.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLight_2.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLightFixture_2.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLightFlares_2.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLight_3.bindToJoint( $mcc , "Ship_Body" , 1 );
	$bayLight_4.bindToJoint( $mcc , "Ship_Body" , 1 );
	
// sounds for landing - ship hitting the ground
	$touchDown.bindToJoint($mcc, "Ship_Body", 1);	

// sounds for landing - landing gear
	$landingStrut_1.bindToJoint($mcc, "B_small_leg_R3", 1);	
	$landingStrut_2.bindToJoint($mcc, "B_small_leg_L3", 1);	

	$landingStrut_3.bindToJoint($mcc, "F_small_leg_R3", 1);	
	$landingStrut_4.bindToJoint($mcc, "F_small_leg_L3", 1);	

	$landingStrut_5.bindToJoint($mcc, "F_big_leg_R3", 1);	
	$landingStrut_6.bindToJoint($mcc, "F_big_leg_L3", 1);	

	$landingStrut_7.bindToJoint($mcc, "B_big_leg_R3", 1);	
	$landingStrut_8.bindToJoint($mcc, "B_big_leg_L3", 1);
	
// VTOL FX
	$vtol_1.bindToJoint($mcc, "Ship_Body", 1);
	$vtol_2.bindToJoint($mcc, "Ship_Body", 1);
	$vtol_3.bindToJoint($mcc, "Ship_Body", 1);
	$vtol_4.bindToJoint($mcc, "Ship_Body", 1);
	$vtol_5.bindToJoint($mcc, "Ship_Body", 1);
	$vtol_6.bindToJoint($mcc, "Ship_Body", 1);
	$vtol_7.bindToJoint($mcc, "B_small_leg_R3", 1);
	$vtol_8.bindToJoint($mcc, "B_small_leg_L3", 1);
	
// Damage trigger - hope this works!
	$shipCrush.bindToJoint($mcc, "B_small_leg_L3", 1);
	
// Left side landing gear hurts
	$trigger_mccGearHurt_frontLeft.bindToJoint($mcc, "B_small_leg_L3", 1);
	$trigger_mccGearHurt_midLeft.bindToJoint($mcc, "B_small_leg_L3", 1);
	$trigger_mccGearHurt_wingLeft.bindToJoint($mcc, "F_big_leg_L3", 1);
	$trigger_mccGearHurt_rearLeft.bindToJoint($mcc, "B_big_leg_L3", 1);
	
// Right side landing gear hurts
	$trigger_mccGearHurt_frontRight.bindToJoint($mcc, "F_small_leg_R3", 1);
	$trigger_mccGearHurt_midRight.bindToJoint($mcc, "B_small_leg_R3", 1);
	$trigger_mccGearHurt_wingRight.bindToJoint($mcc, "F_big_leg_R3", 1);	
	$trigger_mccGearHurt_rearRight.bindToJoint($mcc, "B_big_leg_R3", 1);
	
}
void triggerVTOL1()
{
	sys.trigger($vtol_1);
}
void triggerVTOL2()
{
	sys.trigger($vtol_2);
}
void triggerVTOL3()
{
	sys.trigger($vtol_3);
}
void triggerVTOL4()
{
	sys.trigger($vtol_4);
}
void triggerVTOL5()
{
	sys.trigger($vtol_5);
}
void triggerVTOL6()
{
	sys.trigger($vtol_6);
}
void triggerVTOL7()
{
	sys.trigger($vtol_7);
}
void triggerVTOL8()
{
	sys.trigger($vtol_8);
}

void dustCloud()	{
	sys.trigger( $landingDust );
}

/* NO LONGER USED
void toggleDustFx()
{
	sys.trigger($landingDust_1);
	sys.trigger($landingDust_2);
	sys.trigger($landingDust_3);
	sys.trigger($landingDust_4);
	sys.trigger($landingDust_5);
	sys.trigger($landingDust_6);
	sys.println("dusting again");
	sys.wait(10);
	sys.trigger($landingDust_1);
	sys.trigger($landingDust_2);
	sys.trigger($landingDust_3);
	sys.trigger($landingDust_4);
	sys.trigger($landingDust_5);
	sys.trigger($landingDust_6);
}
*/

void triggerEngineFX()
{
	sys.trigger($thrustEffect_1);
	sys.trigger($thrustEffect_2);
}
void shipDrone()
{
// music to play for the ship coming in.
	sys.trigger($landingGlobal);
	
// light on the side to show off the ship better.	
	//sys.trigger($mcc_fill_light);
}
void touchDown()
{
	sys.trigger($touchDown);
	sys.trigger( $shipCrush ); // FOR DAMAGE TRIGGER
}
void landingAlarms()
{
	$alarmLight_1.fadeInLight(.5);
	$alarmLight_2.fadeInLight(.5);
	$alarmLight_3.fadeInLight(.5);
	
	//sys.println("get out of the way sounds");
	sys.trigger($landingAlarm_1);
	sys.trigger($landingAlarm_2);
	sys.trigger($landingAlarm_3);
}
void landingStrut()
{
	sys.trigger($landingStrut_5);
	sys.trigger($landingStrut_6);
	sys.trigger($landingStrut_7);
	sys.trigger($landingStrut_8);
	sys.wait(.25);
	sys.trigger($landingStrut_1);
	sys.trigger($landingStrut_2);
	sys.wait(.2);	
	sys.trigger($landingStrut_3);
	sys.trigger($landingStrut_4);
	
	//sys.trigger($forcePush);
}
void hangarLiftUp()
{
	
	$hangar_floor_clip.show();
	
	/*
	$hangar_floor.time(15);
	$hangar_floor.accelTime(4);

	$hangar_floor.move( UP, 476 );
	*/	

// Go to the Mobile Command Center's landing zone and rendezvous with the Hannibal as it lands.	
	sys.trigger( $shipObjectiveComplete );
	
	sys.wait(1);
	sys.trigger($endLevel);
}

void elevatorAnims()	{

	// Give the marines something to do on the way down.
	sys.wait( 2 );
	aiScriptedFaceWait( $elevatorOfficer , $elevatorMarine_1 , 0 );
	$elevatorOfficer.lookAt($elevatorMarine_1);
	aiSpeak( $elevatorOfficer , "lipsync_deploying_walkers" );
	aiScriptedAnim( $elevatorOfficer , "point_forward" , 4 , 0 );	
	sys.wait( .9 );
	aiScriptedAnim( $elevatorOfficer , "point_left" , 24 , 0 );
	sys.wait( 1.5 );
	$elevatorMarine_1.scriptedStop();
	$elevatorMarine_1.becomeAggressive();
	$elevatorOfficer.scriptedFace( $elevatorMarine_2 , 0 );
	$elevatorOfficer.lookAt($elevatorMarine_2);
	aiScriptedAnimWait( $elevatorOfficer , "point_right" , 12 , 0 );
	$elevatorMarine_2.scriptedStop();
	$elevatorMarine_2.becomeAggressive();
	$elevatorOfficer.lookAt($null_entity);
	aiScriptedFaceWait( $elevatorOfficer , $elevLookTarget , 1 );
	$elevatorOfficer.becomeAggressive();
}

void hangarLiftDown()
{
// two marines that ride down the elevator lift.	
	sys.trigger($elevatorMarine_1);
	sys.trigger($elevatorMarine_2);	
	sys.trigger($elevatorOfficer);	
	//sys.trigger($elevatorMedic);
	
	setNewTimes( $hangar_floor , 10 , .5 , .5 );
	
	//sys.println ("Open and lower");
	$hangar_floor.move( DOWN, 476 );
	thread elevatorAnims();
	sys.waitFor($hangar_floor);
	sys.trigger($hangarFloorUpTrig);	
}
void spawnElevatorMarines()
{
	aiScriptedAnimLoop($elevatorMarine_1, "relax_idle", 0 );
	aiScriptedAnimLoop($elevatorMarine_2, "relax_idle", 0 );
	aiScriptedAnimLoop($elevatorOfficer, "relax_idle", 0 );
	sys.wait(9.5);	
	sys.trigger( $elevatorTether_1 );
	sys.trigger( $elevAITriggerOnce_1 );
	sys.wait( .5 );
	sys.trigger( $elevatorTether_2 );
	//sys.trigger( $medicTether );
	sys.trigger( $elevAITriggerOnce_2 );
	sys.wait( .25 );
	sys.trigger( $elevatorTether_3 );
	sys.trigger( $elevAITriggerOnce_3 );
}

/*
void medicArrives()	{

	$pinnedMarine_3.lookAt( $elevatorMedic );	
	$elevatorMedic.lookAt( $pinnedMarine_3 );
	aiSpeakWait( $pinnedMarine_3 , "lipsync_you_medic");
	sys.wait( .1 );
	aiSpeakWait( $elevatorMedic , "lipsync_wheres_wounded");
	sys.wait( .1 );
	aiScriptedAnim( $pinnedMarine_3 , "point_back" , 4, 1 );
	aiSpeakWait( $elevatorMedic , "lipsync_by_truck");
	$pinnedMarine_3.becomeAggressive();
	sys.trigger( $truckTether );
}
*/

void surveyArea( entity marineTrig )	{
	
	// pull necessary entities into script
	entity marine = marineTrig.getEntityKey( "marine" );
	entity lookTarget1 = marine.getEntityKey( "lookTarget1" );
	entity lookTarget2 = marine.getEntityKey( "lookTarget2" );
	
	// While the marine is alive, alternate between two possible look targets
	while( isValidEntity(marine) )	{
	
		marine.lookAt( lookTarget1 );
		sys.wait( 2 + sys.random( 4 ) );
		marine.lookAt( lookTarget2 );
		sys.wait( 2 + sys.random( 4 ) );
		
	}
}

void activateHangarGuts()
{
	// Kill the wounded marine to save on active AI counts.
	$pinnedMarine_1.kill();
	
	$hangar_guts.show();
	$hangarShadow.show();	
	$shaftPiston.show();
	$innerShaftPiston.show();
	$hangar_floor.show();
	sys.trigger($hangar_guts_lights);
	
	$mcc.playAnim(ANIMCHANNEL_ALL, "door_open");
	while ( !$mcc.animDone ( ANIMCHANNEL_ALL, 0 ) ) 
	{
		sys.waitFrame ( );
	}
	
	thread hangarLiftDown();
}
void mccAudio()
{
	sys.wait(28);
	// breaking jets activated
	radioChatterPlayWait ($landingChatter_5, "");
}

void activateMCCLights()	{
	sys.trigger( $shipCircleLight_1 );
	sys.trigger( $shipCircleLight_2 );
	sys.trigger( $bayLight_1 );
	sys.trigger( $bayLight_2 );
	sys.trigger( $bayLight_3 );
	sys.trigger( $bayLight_4 );
}

void mccLanding()
{
	aiSpeakWait( $pinnedMarine_2 , "lipsync_get_down" );
	//aiSpeak( $pinnedMarine_3 , "lipsync_call_airstrike" );

	thread bindToMcc();
	thread mccAudio();
	
	
	sys.trigger($item_objectivecomplete_3);

	$mcc.show();
		
	$mcc.playAnim(ANIMCHANNEL_ALL, "flyby");
	sys.waitFrame();
	thread activateMCCLights();
	
	//sys.wait( 4 );
	//sys.trigger( $airstrikeChatter_1 );
	
	sys.waitFrame();
	while ( !$mcc.animDone ( ANIMCHANNEL_ALL, 0 ) ) 
	{
		sys.waitFrame ( );
	}

	sys.trigger($mccClip);
	sys.trigger( $shipCrush ); // FOR DAMAGE TRIGGER
	sys.trigger($hangarGutsTrig);	
	$hangarShadow.show();
	
	$trigger_mccGearHurt_frontLeft.remove();
	$trigger_mccGearHurt_midLeft.remove();
	$trigger_mccGearHurt_wingLeft.remove();
	$trigger_mccGearHurt_rearLeft.remove();
	$trigger_mccGearHurt_frontRight.remove();
	$trigger_mccGearHurt_midRight.remove();
	$trigger_mccGearHurt_wingRight.remove();
	$trigger_mccGearHurt_rearRight.remove();

	// Welcome aboard, Marines.
	radioChatterPlayWait ($landingChatter_6, "");
}
//------------------------------------------------------------------------------------
//marines blocking the player
//------------------------------------------------------------------------------------
void spawnRedShirts()
{
	aiScriptedAnimLoop($redShirt02, "idle", 0 );
	aiScriptedAnimLoop($redShirt01, "roadblock_02", 0 );
}
void openingSetUp()
{
	thread elevatorRideDown();
	//sys.trigger($openingMusic);

	sys.wait(1);
	
	// chatter that happens as the elevator moves down.	
	thread elevatorChatter();

}

//---------------------------------------------------------------------------------
// void triggerBigGunDust()
//
// This function triggers entities func_fx_cannondust_1 -> func_fx_cannondust_53
//---------------------------------------------------------------------------------
void triggerBigGunDust()
{
	entity ent;
	float fCt;

	// currently there are 1-53 of these bad boys
	for ( fCt=1; fCt<=31; fCt=fCt+1 )
	{
		ent = sys.getEntity( "func_fx_cannondust_" + fCt );
		if ( ent == $null_entity )
		{
			break;
		}
		sys.trigger(ent);
	}
}

//---------------------------------------------------------------------------------
// manageBigGunCharging
//
// keeps the gun charge fx playing.
//---------------------------------------------------------------------------------
void manageBigGunCharging()
{
	$vehicle_airdefense_big_gun_1.setShaderParm(4,sys.getTime());
	sys.wait(1);
	sys.trigger( $fx_biggun_charge);
	sys.trigger( $fx_biggun_charge_1);
	sys.wait(3);
	$vehicle_airdefense_big_gun_1.setShaderParm(4,0);
}

//this should get the big gun to turn and fire
void maintainBigGun()	{

	float randomGunNegative;
	float fAngle = 0;
	float fNewAngle = 0;
	//float gunDiff;
	fAngle = $mvr_biggun.getFloatKey("angle");
	$mvr_biggun.time(5);

	//$ai_biggun_driver.enterVehicle( $vehicle_airdefense_big_gun_1);

	$mvr_biggun.accelTime(2);
	$mvr_biggun.decelTime(1.5);

	while( g_bigGunActive )	{
		
		fAngle = fNewAngle;
		
		// mangled this entire thing to minimize movement in front of the destroyable door... oi. -aweldon
		fNewAngle = ( sys.random(45) );
		
		// Randomly decide whether these 45 degrees is to the left or right.
		randomGunNegative = sys.random(1);
		if( randomGunNegative > .5 )
			fNewAngle = 360-fNewAngle;
			
		if ( (fNewAngle <= 45 && fAngle <= 45 ) || (fNewAngle >= 315 && fAngle >= 315) )
		{
			if ( fNewAngle < fAngle)	{
				$mvr_biggun.rotateDownTo( 1, fNewAngle);
			}	else	{
				$mvr_biggun.rotateUpTo( 1, fNewAngle);
			}
		}
		
		//new in q I, old in q IV -- rotate up (clockwise)
		else if (fNewAngle <= 45 && fAngle >= 315 )
		{
			$mvr_biggun.rotateUpTo( 1, fNewAngle);
		}
		
		//new in q IV, old in q I, rotate down (counter clockwise)
		else if (fNewAngle >= 315 && fAngle <= 45)
		{
			$mvr_biggun.rotateDownTo( 1, fNewAngle);
		}
				
		//the move is five seconds long, the wait before the fire is .75 seconds.
		//so that's 5.75. The effect is 4 seconds long... about...
		sys.wait( 2.5 );
		
		thread manageBigGunCharging();
		sys.waitFor( $mvr_biggun);
		
		sys.wait(0.75);
		
		//fire!
		$ai_biggun_driver.fireWeapon(0,1);
		sys.trigger( $spkr_big_gun_muffled );

		// set global lighting change, create some dust...
		if( lightsAreOn ){
			sys.setShaderParm(1, sys.getTime());
		}
		thread triggerBigGunDust();
		
		sys.wait( 1 );
		$loader_1.playAnim( ANIMCHANNEL_ALL, "idle" );
		sys.wait( .5 );
		$loader_2.playAnim( ANIMCHANNEL_ALL, "idle" );
		sys.wait( .5 );

		// revert global lighting..roger had this set up with a 4 second delay from triggering, so I'm keeping that aspect of it
		sys.wait(2); // This was dropped down to 3 to accomodate for the shell loading added above
		sys.setShaderParm(1, 0);

		// add a small amount of additional wait.
		sys.wait( sys.random(1.5));
	}
	
	$ai_biggun_driver.remove();
	sys.waitFrame();
	$vehicle_airdefense_big_gun_1.lock( false );
}


//--
// Bits for new combat section		aweldon Apr-Jul 05
//--

// This stuff will have to be cleaned/merged with what is here already. Some stuff is redundant, but this makes
// for a semi-cleaner edit than hacking and slashing through existing script.

void bindGL()	{

	$VOSS.hideSurface("models/weapons/mp_guns/w_hb");
	$VOSS.hideSurface("models/weapons/mp_guns/w_hb_battery");
	aiScriptedAnim( $VOSS , "af_pose" , 0, 1 );
	$vossGL.bindToJoint( $VOSS , "r_wrist" , 1 );
	$VOSS.hide();
}

// Use this to check whether or not the player has entered the bunker
float playerIsInBunker=0;

void fadeFirstLoop()	{
	$trenchMusic.fadeSound( SND_CHANNEL_ANY, -80, 10);
	sys.wait(10);
	$trenchMusic.remove();
}

void fadeSecondLoop()	{
	$bunkerMusic.fadeSound( SND_CHANNEL_ANY, -80, 10);
	sys.wait(10);
	$bunkerMusic.remove();
}

// LAST MINUTE HACKERY!!!	-aweldon Sept 05
void gruntHack()	{
	// This should keep the grunt active when the player is naughty and runs to areas that make for dangerous grunt pathing.
	$monster_grunt_2.setEnemy( $VOSS );
}

// Move Voss to the door and make him do stuff.
void vossToDoor()	{
	
	/* Any aspect of this function that is not instant or near-instant is controlled by a check 
	  against whether or not the player has entered the bunker. Some back-to-back lengthy bits are also
	  checked to keep anything from taking more than a few seconds. This should prevent the "bunker 
	 is open" sequence from overlapping with the bunker arrival sequence */
	
	$VOSS.setTalkState(TALK_WAIT);
	
	// Make Voss look at the door to discover, lo and behold, that is is locked!
	if( !playerIsInBunker )	{ 
		// Only do this if the player hasn't entered the bunker
		aiScriptedFaceWait( $VOSS, $vossLookAtDoor, 1 );
		$VOSS.lookAt( $vossLookAtDoor );
		$VOSS.lookAt( $player1);
		aiSpeak( $VOSS , "lipsync_bunker_findway" );
	} else	{
		//sys.println( "Skipping bunker VO" );
		sys.waitFrame();
	}
		
	if( !playerIsInBunker )	{ 		
		// Only do this if the player hasn't entered the bunker
		sys.wait( 2 );
	} else	{
		//sys.println( "Skipping 2 second wait" );
		sys.waitFrame();
	}
	
	if( !playerIsInBunker )	{ 
		// Only do this if the player hasn't entered the bunker
		
		// Order Sledge and Morris to cover flank.
		aiScriptedFaceWait( $VOSS , $vossLookAtCover , 1 );
		aiScriptedAnim( $VOSS , "point_forward" , 10 , 1 );
		sys.wait( 3 );
		aiSpeak( $SLEDGE , "lipsync_bunker_position" );
	} else	{
		//sys.println( "Skipping facing and pointing" );
		sys.waitFrame();
	}
	
	sys.trigger( $coverRear_1 );
	if( !playerIsInBunker )	{ 		
		// Only do this if the player hasn't entered the bunker
		sys.wait( .5 );
	}
	 else	{
		//sys.println( "Skipping .5 second wait" );
		sys.waitFrame();
	}
	
	sys.trigger( $coverRear_2 );
	
	if( !playerIsInBunker )	{ 		
		// Only do this if the player hasn't entered the bunker
		sys.wait( .5 );
	} else	{
		//sys.println( "Skipping .5 second wait" );
		sys.waitFrame();
	}
	
	$VOSS.lookAt( $player1 );
	$VOSS.setTalkState(TALK_OK);
			
}

void setPlayerInBunker()	{
	// Use this to cut off any overlapping stuff on the entering sequence
	playerIsInBunker=1;
}

void enterBunker()	{
	
	$VOSS.setTalkState(TALK_WAIT);
	$SLEDGE.setTalkState(TALK_WAIT);
	$MORRIS.setTalkState(TALK_WAIT);
	aiScriptedWait( $VOSS );
	aiScriptedFaceWait( $VOSS , $player1 , 1 );
	aiSpeak( $VOSS, "lipsync_enter_bunker" );
	sys.wait( 1 );
		
	// Voss looks back at cover and speaks
	aiScriptedFaceWait( $VOSS , $vossLookAtCover , 1 );
	$VOSS.lookAt( $vossLookAtCover );
	
	// People react to Voss talking and Sledge enters the bunker
	$SLEDGE.lookAt( $VOSS );
	sys.wait( .5 );
	$MORRIS.lookAt( $VOSS );
	//sys.wait( 1 );
	sys.trigger( $sledgeAmbush );
	sys.wait(.5 );
	
	// Voss gestures down 
	aiScriptedAnimWait( $VOSS , "point_down" , 2 , 1 );
	$VOSS.lookAt( $null_entity );
	$SLEDGE.lookAt( $null_entity );
	
	// Boo-hoo.
	aiSpeak( $MORRIS , "lipsync_no_action" );
	
	// Voss enters the bunker
	sys.trigger( $vossAmbush_3 );
	sys.trigger( $checkVossAndSledge );
	$VOSS.becomeAggressive();
	sys.wait( 1 );
		
	$MORRIS.lookAt( $null_entity );
	
	$VOSS.setTalkState(TALK_OK);
	$SLEDGE.setTalkState(TALK_OK);
	$MORRIS.setTalkState(TALK_OK);
}

void fromTheRoof()	{
	
	//sys.println("GUYS ARE FULLY TETHERED, OR SO THE GAME SAYS." );
	
	// Guy moves in from the roof
	sys.trigger( $roofJump_1 );
	sys.trigger( $roofJumpConditional );
	sys.wait( .5 );
	aiSpeak( $MORRIS , "lipsync_from_above" );
	sys.trigger( $vossAmbush_2 );
		
	// Change focus
	$VOSS.lookAt( $roofJump_1 );
	$SLEDGE.lookAt( $roofJump_1 );
}

void resetLook()	{
	// Reset look targets
	$VOSS.lookAt( $null_entity );	
	$SLEDGE.lookAt( $null_entity );
}

void moveToHall()	{

	// Move, move!
	aiSpeak( $VOSS , "lipsync_enter_hall" );
	
	// Trigger next trigger and tethers
	sys.wait( .5 );
	sys.trigger( $hallTetherBehind_1 );
}

/*
void fortifyRailing()	{
	$VOSS.lookAt( $sledgeRailTether );
	aiSpeak( $VOSS , "lipsync_railing" );
	sys.trigger( $sledgeRailTether );
	sys.wait( 2 );
	sys.trigger( $vossRailTether );
}
*/

void sledgeJumpRailing()	{
	//Hoppity!
	$SLEDGE.lookAt( $startRailHop_dir );
	aiScriptedMoveWait( $SLEDGE , $startRailHop , 0 , 1);
	aiScriptedFaceWait( $SLEDGE , $startRailHop_dir , 0 );
	$SLEDGE.lookAt( $null_entity );
	aiScriptedAnimWait( $SLEDGE, "mcc_rail_vault" , 5 , 1 );
	sys.trigger( $sledgeAdvance );
}

void vossJumpRailing()	{
	//Hoppity!
	sys.trigger( $sledgeRailTether_1 );
	$VOSS.lookAt( $startRailHop_dir );
	aiScriptedMoveWait( $VOSS , $startRailHop , 0 , 0 );
	aiScriptedFaceWait( $VOSS , $startRailHop_dir , 0 );
	$VOSS.lookAt( $null_entity );
	aiScriptedAnimWait( $VOSS , "mcc_rail_vault" , 5 , 1 );
	sys.trigger( $vossAdvance );
}

float balconyDead=0;

//void countBalconyDeaths()	{
void balconyReinforcements()	{
		
	if( balconyDead == 0 )	{
		// When the first guy dies, do this and increase the counter.
		thread sledgeJumpRailing();		
		balconyDead++;
	} else if( balconyDead == 1 )	{
		// When the second guy dies, just increase the counter.
		balconyDead++;
	}
	else if( balconyDead == 2 )	{
		// When the third guy dies, do this and increase the counter.
		thread vossJumpRailing();
		balconyDead++;
	} 
	else if( balconyDead == 3 )	{
		// When the last guy dies, bring on the gunner.
		sys.trigger( $ledgeGunnerTether );
		sys.trigger( $ledgeGunnerCheck );
	}
}

/*
void balconyReinforcements() {
	// Thread this to prevent potential issues.
	thread countBalconyDeaths();
}
*/

void takeControlRoom()	{
	
	// Fade music
	thread fadeSecondLoop();

	// Move to position
	sys.trigger( $ai_tether_none_1 );
	$VOSS.becomePassive( 1 );
	aiScriptedMoveWait( $VOSS , $vossControlMove , 16 , 1 );
	
	$VOSS.setTalkState(TALK_WAIT);
	$SLEDGE.setTalkState(TALK_WAIT);
	
	sys.trigger( $sledgeBlock );

	// Complete objective	
	sys.trigger($item_objectivecomplete_2);

	// Look at player and give congratulations
	$VOSS.lookAt( $player1 );
	aiScriptedAnimLoop( $VOSS, "relax_idle", 0 );		
	aiSpeakWait( $VOSS , "lipsync_good_job" );
	$VOSS.lookAt( $null_entity );
	
	// Inform the Hannibal of progress
	aiScriptedAnimWait( $VOSS, "idle_wrist_gui_start_fast", 4, 0);
	aiScriptedAnimLoop( $VOSS, "idle_wrist_gui_loop", 0 );
	aiSpeakWait( $VOSS , "lipsync_under_control" );
	sys.trigger( $beginningDescent );
	sys.wait( 5 );
	
	// Uh-oh, what to do now?
	sys.trigger( $doorInTheWay );
	sys.wait( 4 );
	aiSpeak( $VOSS , "lipsync_good_point" );
	aiScriptedAnimWait( $VOSS, "idle_wrist_gui_end", 4, 1);
	$VOSS.lookAt( $player1 );
	sys.wait( .25 );
	$VOSS.lookAt( $gunChair );
	aiScriptedFaceWait( $VOSS , $gunChair , 1 );
	$gunChair.lock( 0 );
	sys.trigger( $item_objective_4 );
	aiScriptedAnimWait( $VOSS , "point_forward" , 4, 1 );
	
	$VOSS.setTalkState(TALK_OK);
	$SLEDGE.setTalkState(TALK_OK);
	
}

void disableLift()	{

	sys.trigger( $borkedLift );
	$afterGunElevator.remove();
	sys.trigger( $muffledKafoom );
	sys.trigger( $muffledSparks_1 );
	sys.wait( .25 );
	sys.trigger( $muffledSparks_2 );
}

void bindRhodesPack()	{
	// Bind mr. pack and show it!
	aiScriptedAnim( $RHODES, "af_pose", 4, 1 );
	$mine_pack.bindToJoint($RHODES, "waist", 1);	
	sys.trigger( $mine_pack );
}

void meetRhodes()	{
	sys.wait( 1 );
	aiScriptedMoveWait( $RHODES , $rhodes_arrive_1 , 0 , 1 );
	$RHODES.lookAt( $player1 );
	aiSpeakWait( $RHODES , "lipsync_pretty_fun" );
	$RHODES.lookAt( $null_entity );
	aiScriptedMoveWait( $RHODES , $rhodes_arrive_2 , 0 , 1 );
	$RHODES.remove();
}

void bringForthTheGunner()	{
	// Called when the final berserker spots the player
	sys.trigger( $finalGunnerTether );
	sys.trigger( $exitShotgunSM );	
}

void hideTruck()
{
	$rampTruck.hide();	
}

void setUpTruck()	
{
	$rampTruck.lock( true );

	// Bind everything to the vehicle
	$rampTruck_light.bindToJoint( $rampTruck, "hover_truck" , 1 );
	sys.waitFrame();
	
	// Show stuffs!
	$rampTruck.show();
	sys.trigger( $rampTruck_light );	
}

void greatOutdoors()		{
	
	// Force the noshadow fill lights to fade out in the indoor areas
	if( !lightsAreFading && !lightsAreOn )	{
		//If lights are not already performing a fade and the lights are off, turn them on.
		lightsAreFading = 1;
		$outdoor_Fill.fadeInLight( .5 );
		//$outdoor_fill_2.fadeInLight( .5 );
		//$light_cannon.fadeInLight( .5 );
		sys.wait( .5 );
		lightsAreFading = 0;
		lightsAreOn = 1;
	}
	
	else if( !lightsAreFading && lightsAreOn )	{
		//If lights are not already performing a fade and the lights are on, turn them off.
		lightsAreFading = 1;
		$outdoor_Fill.fadeOutLight( .5 );
		//$outdoor_fill_2.fadeOutLight( .5 );
		//$light_cannon.fadeOutLight( .5 );
		sys.wait( .5 );
		lightsAreFading = 0;
		lightsAreOn = 0;
	}
}

void wavePlayerToRamp()		
{
	$HORTON.lookAt( $player1 );
	aiScriptedAnimWait( $HORTON , "waving_down_tram", 2, 1 );
}

void bringDownLift()
{	
	$func_static_53934.remove();
	sys.trigger( $liftGui_floor1 );
	$afterGunElevator.setKey( "gui_noninteractive" , "1" );
	$afterGunElevator.gotoFloor( 1 );
	sys.waitFor( $afterGunElevator );
	
	// Get the guy clear
	sys.trigger( $ai_tether_elevDudeOff );
	
	$afterGunElevator.updateFloorInfo();
	$afterGunElevator.setKey( "gui_noninteractive" , "0" );
	
	// Lock some doors.
	sys.trigger( $lockUpperDoor );
	sys.trigger( $lockEntranceDoor );
}

float playerInGun = 0;

void fireGun()	{

	// Make the same fun stuff happen when the big gun is fired by the player!
	// Simplified version of events from the main big gun function

	if( playerInGun )	{
		//sys.println( "FIRING GUN... to verify this script is getting called." );
		sys.setShaderParm(1, sys.getTime());
			
		sys.wait( 1 );
		$loader_1.playAnim( ANIMCHANNEL_ALL, "idle" );
		sys.wait( .5 );
		$loader_2.playAnim( ANIMCHANNEL_ALL, "idle" );
		sys.wait( .5 );
		
		sys.wait(2); 
		sys.setShaderParm(1, 0);	
	}
}

//--
// End new stuff
//--

/*---------------------------------------------
	Gun control chair stuff		mrenner
---------------------------------------------*/

void bigMonitorsDown()
{
	$func_static_53697.show();
	$func_static_53493.show();
	$func_static_53698.show();

	setNewTimes( $bigMonitorsMover , 3 , 1 , 2 );
	$bigMonitorsMover.move( DOWN, 208 );
	sys.trigger( $bigMonitorsMove );
	sys.waitFor($bigMonitorsMover);
}

void bigMonitorsUp()
{
	setNewTimes( $bigMonitorsMover , 5 , 2 , 2 );
	$bigMonitorsMover.move( UP, 208 );
	sys.trigger( $bigMonitorsMove );
	sys.waitFor($bigMonitorsMover);
	$func_static_53697.hide();
	$func_static_53493.hide();
	$func_static_53698.hide();
}

//--
// More gun chair stuff; goes with the new model	aweldon Jun 05
//--

float guyIsInChair = 1;
float bootedFromGun = 0;
float firstEntry = 1;

void fakeBattle()	{

	// Trigger the tethers for the combat
	sys.trigger( $fakeBattleTether_1 );
	sys.trigger( $fakeBattleTether_2 );
	sys.trigger( $fakeBattleTether_3 );
	sys.trigger( $fakeBattleTether_4 );	
	
	$MORRIS.remove();
}

void fakeBattleBOOM()	{

	$cannonFodder_1.kill();
	sys.waitFrame();
	$cannonFodder_1.applyImpulse( $cannonFodder_1 , $cannonFodder_1.getWorldOrigin() , '-40000 -150000 50000' );
	sys.wait( .05 );
	$cannonFodder_2.kill();
	sys.waitFrame();
	$cannonFodder_2.applyImpulse( $cannonFodder_2 , $cannonFodder_2.getWorldOrigin() , '35000 -200000 60000' );
	sys.wait( .05 );
	$cannonFodder_3.kill();
	sys.waitFrame();
	$cannonFodder_3.applyImpulse( $cannonFodder_3 , $cannonFodder_3.getWorldOrigin() , '10000 -200000 50000' );
		
	// Marines react
	aiScriptedAnim( $MORRIS_1 , "pain_concussive5" , 10 , 1 );
	aiScriptedAnim( $LAW_1 , "pain_concussive2" , 10 , 1 );

	aiScriptedAnimWait( $HORTON_1 , "cowering_start" , 12 , 0 );
	aiScriptedAnim( $HORTON_1 , "cowering_idle" , 4 , 0 );
	sys.wait( .25 );
	aiScriptedAnimWait( $HORTON_1 , "cowering_end" , 6 , 1 );
}

void fakeBattleRemove()	{
	$LAW_1.remove();
	$HORTON_1.remove();
	$MORRIS_1.remove();
}

/*
void guyInChairIdle()	{
	aiScriptedAnimLoop( $smInGunChair , "big_gun_chair_idle" , 0 );	
}

void guyInChairExits()	{
	$smInGunChair.bindToJoint( $gunChair , "rotate_top" , 1 );
	sys.wait( 3.75 );
	$smInGunChair.unbind();
	aiScriptedAnimWait( $smInGunChair , "big_gun_chair_getup" , 5 , 1 );
	$smInGunChair.becomeAggressive();
	sys.trigger( $getGuyAwayFromChair );
}
*/
void chairOut()
{
	thread 	bigMonitorsUp();
	$gunChairPivot.move( SOUTH, 64 );
	sys.waitFor( $gunChairPivot );
	
	$gunChair.unbind();
/*	
	if( guyIsInChair == 1 )	{
		thread guyInChairExits();
	}
*/
	aiScriptedAnim( $gunChair , "online" , 4 , 0 );
	sys.wait( 3.75 ); //Hackery! aiScriptedAnimWait won't work on a vehicle.
	$gunChair.bind( $gunChairPivot );
	
/*
	// Don't unlock the chair if this is the first time with the strogg marine.
	if( !guyIsInChair )	{
		sys.wait( 1 );
		//$gunChair.lock( false );	
		$vehicle_airdefense_big_gun_1.lock( true );
	}
	
	if( guyIsInChair == 1 )	{
		guyIsInChair = 0;
	}
*/
}

void chairIn()
{
	// Hackery to prevent the looping cycle of gun-entering badness.
	if( !bootedFromGun )	{
		
		$gunChair.lock( true );	
//		$gunChair.unbind( );
		aiScriptedAnim( $gunChair , "offline_idle" , 4 , 0 );
		sys.wait( 3.5 );
		$gunChair.bind( $gunChairPivot );
		$gunChairPivot.move( NORTH , 64 );
		sys.waitFor( $gunChairPivot );
		
		thread 	bigMonitorsDown();
		
		sys.trigger($gunInfluence);
		sys.fadeOut( '0 0 0', 1);
		sys.wait(1);
		
		$gunChair.lock( false );
		$player1.exitVehicle(1);
		sys.waitFrame();
		sys.trigger( $inCannonTeleport);
		sys.waitFrame();
		$vehicle_airdefense_big_gun_1.lock( false );
		$vehicle_airdefense_big_gun_1.hideSurface("models/monsters/air_Defense_cannon/cannon");
		$vehicle_airdefense_big_gun_1.hideSurface("models/monsters/air_Defense_cannon/cannon_decal");
		sys.waitFrame();
		$player1.enterVehicle( $vehicle_airdefense_big_gun_1);
		playerInGun=1;
		sys.sendNamedEvent( GUI_VEHICLEHUD , "hideExitmessage" );
		sys.sendNamedEvent( GUI_CURSOR , "crossHide" );
		
		// Voss bugs the player
		//thread loopVossWaiting();
		
		// Make the outdoor lights fade back in whilst in the gun.
		thread greatOutdoors();
		
		// Make the fight happen on the surface
		thread fakeBattle();
		
		sys.fadeIn( '0 0 0', 1);	
	
		$gunChair.lock( false );
		$vehicle_airdefense_big_gun_1.lock( true );
		
		sys.wait( 1 );
	}
}

void disableBigGun()	{
	g_bigGunActive = 0;
	sys.wait( 1 );
	chairOut();
}

void asChairExits()	{

// reduce volume on soundClass 1 so that VO can be more easily heard
sys.trigger( $tgt_fade_sounds_for_vo );

	//Remove dudes
	thread fakeBattleRemove();
	
	$VOSS.setTalkState(TALK_WAIT);
	$SLEDGE.setTalkState(TALK_WAIT);

	// Dialogue post-door destruction
	sys.trigger($item_objectivecomplete_4);
	aiSpeakWait( $VOSS, "lipsync_7" );
	$VOSS.lookAt( $null_entity );
	aiScriptedAnimWait( $VOSS, "idle_wrist_gui_start_fast", 4, 0);
	aiScriptedAnimLoop( $VOSS, "idle_wrist_gui_loop", 4 );
	aiSpeakWait( $VOSS, "lipsync_8" );
	radioChatterPlayWait( $vossDoorGone_1, "");
	aiSpeakWait( $VOSS, "lipsync_9" );
	radioChatterPlayWait( $vossDoorGone_2, "");

	// trigger this when Voss tells you to get to the landing zone.
	$VOSS.lookAt( $SLEDGE );
	aiSpeak( $VOSS, "lipsync_10" );
	aiScriptedAnimWait( $VOSS , "point_down" , 4 , 1 );
	$VOSS.lookAt( $player1 );
	aiScriptedAnimWait( $VOSS , "point_back" , 4 , 1 );
	$VOSS.lookAt( $null_entity );
	sys.trigger($item_objective_3);

// restore volume on soundClass 1
sys.trigger( $tgt_restore_sounds_after_vo );

	// can now use Sledge and Voss
	aiScriptedStop($SLEDGE);	
	$SLEDGE.setTalkState(TALK_OK);	
	aiScriptedStop($VOSS);
	$VOSS.setTalkState(TALK_OK);

	// sets voss to use his 'too close' vo commands
	$VOSS.setKey( "annoyed", "1" );
	$VOSS.setKey( "lipsync_canihelpyou1", "vo_1_2_9_50_1" );
	$VOSS.setKey( "lipsync_canihelpyou2", "vo_1_2_9_50_2" );
	$VOSS.setKey( "lipsync_canihelpyou3", "vo_1_2_9_50_3" );
	
	$VOSS.lookAt( $target_vossConsoleFace );
	aiScriptedMoveWait( $VOSS , $target_vossConsoleMove , 4, 1 );
	aiScriptedFaceWait( $VOSS , $target_vossConsoleFace , 1 );
	aiScriptedAnimWait( $VOSS , "console_stand_start" , 5 , 0 );
	aiScriptedAnimLoop( $VOSS , "console_stand_loop" , 4 );
}

void gunChairDone()
{
	bootedFromGun = 1;
	
	sys.fadeOut( '0 0 0', 1);	
	sys.wait(1);
	
	// Make the outdoor lights fade back out when exiting the gun.
	thread greatOutdoors();
		
	$player1.exitVehicle(1);
	sys.waitFrame();
	
	// Show the cannon again
	$vehicle_airdefense_big_gun_1.showSurface("models/monsters/air_Defense_cannon/cannon");
	$vehicle_airdefense_big_gun_1.showSurface("models/monsters/air_Defense_cannon/cannon_decal");
	
	sys.trigger( $outCannonTeleport);
	sys.waitFrame();
	$player1.enterVehicle( $gunChair );
	sys.fadeIn( '0 0 0', 1);	

	thread asChairExits();
	chairOut();
	
	$player1.exitVehicle(1);
	bootedFromGun = 0;
	
	//$player1.setWorldOrigin( $outOfChair.getWorldOrigin());
	//$player1.setViewAngles ( '0 270 0' );
	sys.trigger( $gunExitPoint );
	sys.waitFrame();
	$gunChair.lock( true );
}

void gunChairSetup()
{
	aiScriptedAnim( $gunChair, "offline", 0, 0 );
//	aiScriptedAnimLoop( $smInGunChair , "big_gun_chair_idle" , 0 );
//	sys.waitFrame();
//	$smInGunChair.bindToJoint( $gunChair , "rotate_top" , 1 );
//	sys.waitFrame();
	$gunChair.lock( true );
	aiScriptedAnim( $gunChair, "idle", 0, 0 );
	$gunChairPivot.move( NORTH , 64 );
}

//Moved the door destruction thing here to save some prototype pokery
void doorDestroyed()	
{
	//Swap the gui on the gun chair
	$gunChair.guiEvent( "doorDestroyed" );
	
	// Set Sledge to be passive (Voss is already)
	//$SLEDGE.becomePassive( 1 ); Don't do this, it breaks stuff.

	// door breaks	
	sys.trigger($doorExplosion);
	$bustedDoor.show();
	sys.trigger($func_bigdoor_23);
	sys.wait(.1);
	$func_bigdoor_23.remove();	
	$func_bigdoor_24.remove();
	
	// hehehehehehehehe BOOM!!!!
	thread fakeBattleBOOM();
	
	// set off triggers for the trip back
	sys.trigger( $initSecondPass );
	sys.trigger($destroyGunTrig);

	// Allow exiting the vehicle
	sys.wait( .5 );
	sys.sendNamedEvent( GUI_VEHICLEHUD , "showExitmessage" );
	$vehicle_airdefense_big_gun_1.lock( false );
}

//--
// End gun chair stuffs

//--
// Set turrets to target PVT Law
//--

// Keep minimal active AI in the area
void sorryCaryn()	{
	
	if( isLivingEntity( $LAW ) )	{
		$LAW.setHealth( 10 );
		$mon_building_turret_4.setEnemy( $LAW );
		$mon_building_turret_5.setEnemy( $LAW );
	}
}

//--
// End turret targeting.


// FOR DEBUG ONLY - FORCE PLAYER OUT OF BIG GUN
void forceExit()	{
	$vehicle_airdefense_big_gun_1.lock( false );	
	$player1.exitVehicle(1);
}

// FOR DEBUG ONLY - FORCE THE GUN CHAIR TO UNLOCK
void forceChairUnlock()	{
	$gunChair.lock( 0 );	
}

//--
// Adding flyovers from airdefense
//--

//moves one flyer sprite across the sky over the trenches
//------------------------------------------------------------------------------------
void maintainStroggFlyerSprite(entity entMover, entity fxNormal, entity fxDamage, entity entHangar, entity entTgrEnd, vector vDirection)
{	
	sys.wait( sys.random(10) );
	
	//will the planes be swervey?
	float fSwerve = 0;
	float fWaitTime = 0;
	float fAmplitude = 0;

	while(1)	
	{
		//place the mover on the "hangar" line, equal in the X but displaced in the Y by +/- ___ units
		// +/- Y displacement
		float fDisplacementMax = 2000;
		float fDelta = 0;

		//start location for the flyer
		vector vStart = entHangar.getWorldOrigin();
		vector vSpeed = '0 0 0';
		vector vAngs;

		//flyer speed
		float fSpeed = 900 + (sys.random(600));

		fSwerve = sys.random(200) + 100;
		fAmplitude = sys.random(90) + 30;

		//stop the flyer-- move him into position after we figure out where he goes.
		entMover.setLinearVelocity( '0 0 0');

		//mathery mcmath
		fDelta = (0 - fDisplacementMax + sys.random( fDisplacementMax * 2));
		vStart_y += fDelta;

		//move to position
		entMover.setWorldOrigin( vStart );
		sys.waitFrame();
		
		//set the direction as speed
		vSpeed = vDirection * fSpeed;	
		vSpeed_z = 0;

		// set initial angle in case this is a non-swerving dude..
		vAngs = sys.VecToAngles(vSpeed);
		entMover.setAngles(vAngs);
	
		fWaitTime = sys.getTime() +  sys.random(2.5);
	
		//turn on the regular plane, turn off the alternate
		fxNormal.start();
		fxDamage.stop();	
		
		while( sys.getTime() < fWaitTime)	
		{
			//fly!
			entMover.setLinearVelocity( vSpeed);

			//swerve if need be
			if( fSwerve != 0)	
			{
				vSpeed_y = sys.sin( sys.getTime() * fAmplitude ) *  fSwerve;

				// update facing so effects can draw properly
				vAngs = sys.VecToAngles(vSpeed);
				entMover.setAngles(vAngs);
			}

			//if somehow the ship has escaped the skybox, break
			if( entMover.touches( entTgrEnd))	
			{
				break;
			}
			//decend on the way out
			sys.waitFrame();
		}

		//second loop, descend.
		vSpeed_z = 0;
/*
		if(sys.random(20) < 2)
		{
			//sys.println("Damaged!");

			//slow down and fly off course, descend faster
			vSpeed_x *= 0.25;
			if (vSpeed_y < 10 && vSpeed_y > -10)	
			{
				vSpeed_y += ( -800 + sys.random(1600));
			} else	
			{
				vSpeed_y *= 4;
			}
			vSpeed_z *= 1.25;

			//no more swerving
			fSwerve = 0;

			//switch to damaged effect, and explode
			fxNormal.stop();
			fxDamage.start();
			$fx_flyer_damage.setWorldOrigin( entMover.getWorldOrigin() );
			sys.trigger( $fx_flyer_damage);
		}
*/
		fWaitTime = sys.getTime() +  5;

		//after the possible damage time, remove once the ship has left the skybox
		while( (sys.getTime() < fWaitTime) && ( !entMover.touches( entTgrEnd))  )	
		{
			//fly!
			entMover.setLinearVelocity( vSpeed);

			//swerve if need be
			if( fSwerve != 0)	
			{
				vSpeed_y = sys.sin( sys.getTime() * fAmplitude ) *  fSwerve;
				// update facing so effects can draw properly
				vAngs = sys.VecToAngles(vSpeed);
				entMover.setAngles(vAngs);
			}

			//decend on the way out
			sys.waitFrame();
		}
	}
}

void main()	
{
// timing of music, objectives and radio chatter
	thread openingSetUp();
	
// setting up the insides of the mcc
	thread hangarGutSetUp();

// run the biggun thread
	thread maintainBigGun();

// hide the truck that will show up to explain the magical marine rampage	
	//thread hideTruck();

// Force the outdoor fill lights to not cause badness!	
	thread greatOutdoors();

// Set up the gun control chair	
	thread gunChairSetup();
	
	//$bustedTruck.lock(true);
	
//Return to the Air Defense Cannon and regroup with the Lt. Voss and the members of Rhino Squad.	
	sys.wait(1);
	sys.trigger($item_objective_1);
	
// Start the timer for Morris to be annoyed
	thread morrisIsImpatient();
	
// Bind the GL to Voss' hands lest there be badness otherwise.
	thread bindGL();
	
// Lock the gun chair
	$gunChair.lock( 1 );
		
// Get the flyer sprites going on map load
	float t;
	
	for (t = 1; t <= 2; t++)	
	{
		//thread maintainStroggFlyerSprite( sys.getEntity("mvr_fx_strogg_flyer_" + t), sys.getEntity("fx_air_strogg_fighter_" + t), sys.getEntity("fx_air_strogg_fighter_" + (t + 6) ), $tgt_strogg_flyer_hangar, $tgr_strogg_flyer_end, '-1 0 .1' );
		thread maintainStroggFlyerSprite( sys.getEntity("mvr_fx_marine_flyer_" + t), sys.getEntity("fx_air_marine_fighter_" + t), sys.getEntity("fx_air_marine_fighter_" + (t + 6) ), $tgt_marine_flyer_hangar, $tgr_marine_flyer_end, '1 0 .1' );
	}		
}

}	//end namespace