
#include "scripts/maps/dispersal2/hookedbodies.script"
#include "scripts/maps/dispersal2/chemvats.script"
#include "scripts/maps/dispersal2/spatula.script"
#include "scripts/maps/dispersal2/heartpump.script"

namespace map_dispersal
{

//------------------------------------------------------------
// globals

vector mainBasementLight1Color;
vector mainBasementLight2Color;
vector mainBasementLight3Color;
float	bodyPool1Active = 0;
float	bodyPool2Active = 0;
float	bodyPool3Active = 0;
float	bodyPool4Active = 0;



//------------------------------------------------------------
// prototypes

// dispersal_intro

// lifts up the middle elevator in the three elevator room and spawns some enemy marines
//void raiseIntroElevator();

// dispersal_lobby

// Kill target script: opens a door and lets some more baddies into the room.
void lobbyOpenMonsterDoor();

// dispersal_outdoor

// open the warehouse doors (and remove them)
//void openWarehouse();

//void StartAfterburner();

//------------------------------------------------------------
// functions


//--
// Troop transport lifting off		aweldon Aug 05
//--

// This replaces the strogg epic mount in the intro.
void carrierLiftOff()	{
	$env_introCarrier.playAnim( ANIMCHANNEL_ALL , "lift" );
	sys.wait( .5 );
	sys.trigger( $speaker_carrierOn );
	sys.wait( 2 );
	sys.trigger( $speaker_carrierThrust );
	setNewTimes( $mover_introCarrierBase , 2 , .5 , 0 );
	setNewTimes( $mover_introCarrierBase_1 , 2 , 1 , 0 );
	$mover_introCarrierBase.disableSplineAngles();
	$mover_introCarrierBase.startSpline( $spline_introCarrierExit );
	$mover_introCarrierBase_1.rotateOnce( '0 45 45' );
	sys.waitFor( $mover_introCarrierBase );
	$mover_introCarrierBase.remove();
}

//--
// End transport sequence

void ActivateFenceGrunt()
{
	sys.trigger($fenceGrunt);
	$fenceGrunt.lookAt($player1);	
}

// cinematic functions, called from tactical cam dude via frame commands

// frame 240
void tacticalTransferAnim2Start()
{
	aiScriptedAnim( $dispersal_tactical_transfer_2, "dispersal_tact2", 0, 0 );
}

// frame 303
void tacticalTransferAnim2Remove()
{
	$dispersal_tactical_transfer_2.remove();
}

// frame 305
void tacticalTransferAnim2()
{
	aiScriptedAnim( $dispersal_tactical_transfer_2_2, "dispersal_tact2_move", 0, 0 );
}

// frame 363
void tacticalTransferAnim3Start()
{
	aiScriptedAnim( $dispersal_tactical_transfer_3, "dispersal_tact3", 0, 0 );
}

// frame 399
void tacticalTransferAnim3Remove()
{
	$dispersal_tactical_transfer_3.remove();
}

// frame 400
void tacticalTransferAnim3()
{
	aiScriptedAnim( $dispersal_tactical_transfer_3_2, "dispersal_tact3_move", 0, 0 );
}

// frame 445
void kaneEndAnim()
{
	aiScriptedAnim( $dispersal_stroggified_kane_1, "dispersal_kane_end", 0, 0 );
}

// frame 495

void kaneFadeOut()
{
	sys.fadeOut( '0 0 0' , .25 );
}

// frame 505
void removeKane()
{
	sys.waitFrame();
	$dispersal_stroggified_kane_1.remove();
	$dispersal_tactical_transfer_1.remove();
	$dispersal_tactical_transfer_2_2.remove();
	$dispersal_tactical_transfer_3_2.remove();
	$dispersal_cam_guy.remove();
	sys.fadeIn( '0 0 0' , .25 );
}

void runBarrelLift()	{

	$mover_barrel_lifter.time(8);
	
	while(1)	{
	
	//sys.println("move to top");
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_top);
	sys.waitFor($mover_barrel_lifter);
	//sys.println("wait 3 seconds");
	sys.wait(3);

	//sys.println("move to bottom");
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_bottom);
	sys.waitFor($mover_barrel_lifter);
	//sys.println("wait 3 seconds");
	sys.wait(3);


	}

}

void TryBarrelCraneArm()
{
	//$BarrelCraneArm.time(1);
	//$BarrelCraneArm.rotateOnce('0 -30 0');
}

void InitBarrelCraneArm()
{
	//$BarrelCraneArm.time(0.01);
	//$BarrelCraneArm.rotateOnce('0 30 0');
}

/*
void StartAfterburner()
{
//	sys.trigger( $env_flyer_dispersal_1 );
	$flyer_clip.bindToJoint($env_flyer_dispersal_1, "ship_secondary", 1);
	$flyer_clip_2.bindToJoint($env_flyer_dispersal_1, "ship_secondary", 1);
	$env_flyer_dispersal_1.playAnim ( ANIMCHANNEL_ALL, "liftoff" );
	sys.trigger( $flyer_dust );

	$env_flyer_dispersal_1.playEffect("fx_afterburnerstart", "tail_thrusters", true);
	sys.wait(15);
	$env_flyer_dispersal_1.playEffect("fx_afterburner", "tail_thrusters", true);
	sys.wait(1);
	$env_flyer_dispersal_1.stopEffect("fx_afterburnerstart");
	sys.wait(10);
	$env_flyer_dispersal_1.remove();
}
*/

void StartFenceAnim()
{
	sys.trigger($env_dispersal_fence_1);
}

//---------------------------------------------------------
// void bodyDrop(entity entDropPoint, float fTime)
// jshepard | Jun 04
//
// Spawns a body, drops it, and then removes it after a set time
//---------------------------------------------------------
void bodyDrop(entity entDropPoint, float fTime)
{
	//spawn a ragdoll body
	entity entDoll = spawnOnEntity("env_ragdoll_marine_meathook",entDropPoint);
	
	//change it's angle
	vector vAng;
	vAng_x = sys.random(360);
	vAng_z = 0;
	vAng_y = sys.random(360);
	entDoll.setAngles(vAng);
	sys.waitFrame();
	//rag it up
	entDoll.disableClip();

	sys.wait(0.1);
	entDoll.enableClip();
	entDoll.becomeRagdoll();
	sys.waitFrame();
	sys.waitFrame();

	entDoll.applyImpulse(entDoll, entDoll.getWorldOrigin(),'0 0 -20000');
	
	//wait...
	sys.wait(fTime);

	//poof
	entDoll.remove();
}

//-------------------------------------------------------------------------------
// void bodyHop()
//
// Gives a little "boost" to ragdoll bodies
//
// jshepard | Oct 2004
//-------------------------------------------------------------------------------
void bodyHop(entity entActivator)
{
	//sys.println("void bodyHop::begin");

	//sys.println(entActivator.getName());

	//sys.println("void bodyHop::end");

} //-------------- End void bodyHop ---------------

//---------------------------------------------------------
// void dropLoop(ent entDropPoint, float fFrequency, float fBodyLife)
// jshepard | Jun 04
//
// Will continually drop bodies from a set point until this thread is killed.
// The object that activates this loop needs the following key pairs
//
// dropPoint	-- entity to drop from
// frequency	-- how many seconds bewtween dropping bodies
// lifespan		-- how long each body should last.
//---------------------------------------------------------
void dropLoop(entity entActivator)
{
	entity entDropPoint;
	float fFrequency;
	float fBodyLife;
	
	//get the drop target
	entDropPoint = sys.getEntity(entActivator.getKey("dropPoint"));
	//error check
	if(entDropPoint == $null_entity)	{
		sys.error("dropLoop was called by " + entActivator.getName() + " without a valid 'dropPoint' keyvalue.");
	}

	//get the float values
	fFrequency = entActivator.getFloatKey("frequency");
	fBodyLife = entActivator.getFloatKey("lifespan");

	//start dropping
	while(1)
	{
		thread bodyDrop(entDropPoint, fBodyLife);
		sys.wait(fFrequency);
	}


}

//----------------------------------------------
// void gruntAmbush
// jshepard | sept 04
//
// There's a grunt that charges through some boxes to mess you up.
//----------------------------------------------
void gruntAmbush()
{
	entity	ent;
	vector	vKick;
	float	t;

	//this is the vector we'll kick our barrels with 
	vKick_y = -40000;
	vKick_z = 20000;

	//sys.println("Kick barrels!");

	for(t = 1; t < 5; t++)
	{	
		ent = sys.getEntity("barrel_ambush_" + t);
		//sys.println("Kicking " + ent.getName());
		vKick_x = -40000 - sys.random(40000);
		ent.applyImpulse(ent,ent.getWorldOrigin(),vKick);
	}
	
}



void GetThisBodyStartedProper()
{
}
//---------------------------------------------------------
// void raiseIntroElevator()
// jshepard | May 04
//
// lifts up the middle elevator in the three elevator room and spawns some enemy marines
//
// I split this into two functions (4/05), unbindElevatorGunner and activateElevatorStrogg,
// and made a few other changes-additions-deletions to enable
// the player to activate the elevator theirownself, rather than via the same trigger
// that launches the elevator strogg
// -pjw
//---------------------------------------------------------

void unbindElevatorGunner()
{	
	//fire up that gunner in the elevator too!
	//$mon_intro_elevator_gunner.activate($player1);
	//sys.waitFor($mvr_intro_elevator_middle);
	$mon_intro_elevator_gunner.unbind();
	//$lgt_intro_elevator_alarm.Off();
}

void activateElevatorGrunt()
{
	$ElevatorRoomGrunt1_1.show();
	sys.trigger($ElevatorRoomGrunt1_1);
	sys.wait(1);
	aiScriptedMove($ElevatorRoomGrunt1_1, $target_null_10, 5, true);
}

void activateElevatorStrogg()
{
	$lgt_intro_elevator_alarm.activate($player1);

	$mon_intro_elevator_strogg_2.show();
	
	$mon_intro_elevator_strogg_2.disableGravity();
	$mon_intro_elevator_strogg_2.disableClip();
	
	aiScriptedAnimWait ( $mon_intro_elevator_strogg_2, "climb_out", 0, true );
	$mon_intro_elevator_strogg_2.enableGravity();
	$mon_intro_elevator_strogg_2.enableClip();
	$mon_intro_elevator_strogg_2.activate($player1);
}

//---------------------------------------------------------
// void lobbyOpenMonsterDoor()
// jshepard | May 04
//
// Opens a door in the elevator "lobby" and sends in some baddies.
//---------------------------------------------------------
void lobbyOpenMonsterDoor()
{
	//sys.println("lobbyOpenMonsterDoor::begin");

	//open the lobby door
	$door_lobby.open();
	sys.wait(0.5);

	//activate the two baddies
	$mon_lobby_hidden_2.activate($player1);
	$mon_lobby_hidden_1.activate($player1);

	//sys.println("lobbyOpenMonsterDoor::end");

}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////additions by Chad//////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

void vats_start()
{
	$chem_vats.playCycle( ANIMCHANNEL_ALL, "idle");
	$chem_vat_arm.playCycle( ANIMCHANNEL_ALL, "disp_fill_vat");
}

void harvester_ready()
{
	sys.trigger($trigger_once_112);
}

void harvester_run()
{
	sys.wait(5);
	aiScriptedAnim($monster_harvester_1, "dispersal_exit", 0,0 );
}

///////////////////////////////////
////////heart puzzle//////////////
/////////////////////////////////

void start_heart()
{
	$hrt_env_heartpump_3.playCycle( ANIMCHANNEL_ALL, "beat");
}

/*void bad_shock()
{
	//sys.println("BAD_SHOCK CALLED GUIS");
if (heartpump::heart_death==0)
{
	//sys.print("heart_death value = ");
	//sys.println(heart_death);
	heartpump::heart_death++;
	sys.setShaderParm(1, 1);
	//sys.println("FIRST SHOCK");
	sys.trigger($hrt_HeartShockLight_2);
	sys.trigger($hrt_HeartRoomLight31);
	sys.trigger($hrt_HeartRoomLight_11);
	sys.trigger($hrt_light_relay);
	sys.trigger($heart_roar2);
	
	$hrt_env_heartpump_3.playCycle( ANIMCHANNEL_ALL, "spasm");
	
	$hrt_HeartControlGUIMonitor1.guiEvent ( "start_heart_shock" );
	$hrt_HeartControlGUIMonitor2.guiEvent ( "start_heart_shock" );
	$hrt_func_static_3156.guiEvent ( "start_heart_shock" );
	$hrt_func_static_3158.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53301.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53306.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53296.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53300.guiEvent ( "start_heart_shock" );
	
	$hrt_leftDefibOriginFront.rotateOnce('-30 0 30');
	$hrt_leftDefibOriginBack.rotateOnce('-30 0 -30');
	
	$hrt_leftDefibFront.playEffect("fx_shock", "joint2", true);
	$hrt_leftDefibBack.playEffect("fx_shock", "joint2", true);
	
	$hrt_rightDefibOriginFront.rotateOnce('30 0 30');
	$hrt_rightDefibOriginBack.rotateOnce('30 0 -30');
	
	$hrt_rightDefibFront.playEffect("fx_shock", "joint2", true);
	$hrt_rightDefibBack.playEffect("fx_shock", "joint2", true);
	
	sys.wait(5);
	
	sys.trigger($hrt_HeartShockLight_2);
	sys.trigger($hrt_HeartRoomLight31);
	sys.trigger($hrt_HeartRoomLight_11);
	sys.trigger($hrt_light_relay);
	
	$hrt_leftDefibOriginFront.rotateOnce('30 0 -30');
	$hrt_leftDefibOriginBack.rotateOnce('30 0 30');
	
	$hrt_leftDefibFront.stopEffect("fx_shock");
	$hrt_leftDefibBack.stopEffect("fx_shock");
	
	$hrt_rightDefibOriginFront.rotateOnce('-30 0 -30');
	$hrt_rightDefibOriginBack.rotateOnce('-30 0 30');
	
	$hrt_rightDefibFront.stopEffect("fx_shock");
	$hrt_rightDefibBack.stopEffect("fx_shock");
	
	sys.wait(1);
	$hrt_env_heartpump_3.playCycle( ANIMCHANNEL_ALL, "beat");
}
else
{
	//sys.print("heart_death value = ");
	//sys.println(heart_death);
	//sys.println("SECOND SHOCK");
	sys.trigger($hrt_HeartShockLight_2);
	sys.trigger($hrt_HeartRoomLight31);
	sys.trigger($hrt_HeartRoomLight_11);
	sys.trigger($hrt_light_relay);
	sys.trigger($heart_roar2);
	
	$hrt_env_heartpump_3.playCycle( ANIMCHANNEL_ALL, "spasm");
	
	$hrt_HeartControlGUIMonitor1.guiEvent ( "start_heart_shock" );
	$hrt_HeartControlGUIMonitor2.guiEvent ( "start_heart_shock" );
	$hrt_func_static_3156.guiEvent ( "start_heart_shock" );
	$hrt_func_static_3158.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53301.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53306.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53296.guiEvent ( "start_heart_shock" );
	$hrt_func_static_53300.guiEvent ( "start_heart_shock" );
	
	$hrt_leftDefibOriginFront.rotateOnce('-30 0 30');
	$hrt_leftDefibOriginBack.rotateOnce('-30 0 -30');
	
	$hrt_leftDefibFront.playEffect("fx_shock2", "joint2", true);
	$hrt_leftDefibBack.playEffect("fx_shock2", "joint2", true);
	
	$hrt_rightDefibOriginFront.rotateOnce('30 0 30');
	$hrt_rightDefibOriginBack.rotateOnce('30 0 -30');
	
	$hrt_rightDefibFront.playEffect("fx_shock2", "joint2", true);
	$hrt_rightDefibBack.playEffect("fx_shock2", "joint2", true);
	
	sys.wait(5);
	
	sys.trigger($hrt_HeartShockLight_2);
	sys.trigger($hrt_HeartRoomLight31);
	sys.trigger($hrt_HeartRoomLight_11);
	sys.trigger($hrt_light_relay);
	sys.trigger($hrt_smoke_1);
	sys.trigger($hrt_smoke_2);
	
	$hrt_leftDefibOriginFront.rotateOnce('30 0 -30');
	$hrt_leftDefibOriginBack.rotateOnce('30 0 30');
	
	$hrt_leftDefibFront.stopEffect("fx_shock2");
	$hrt_leftDefibBack.stopEffect("fx_shock2");
	
	$hrt_rightDefibOriginFront.rotateOnce('-30 0 -30');
	$hrt_rightDefibOriginBack.rotateOnce('-30 0 30');
	
	$hrt_rightDefibFront.stopEffect("fx_shock2");
	$hrt_rightDefibBack.stopEffect("fx_shock2");
	
	sys.wait(1);
	$hrt_env_heartpump_3.playCycle( ANIMCHANNEL_ALL, "beat");
	
	//sys.println("threading death");
	thread map_dispersal::heart_deathy();
}
}*/

///////////////////////////////////
////////barrel puzzle/////////////
/////////////////////////////////

void barrels_start_5()
{
	$barrel_9.time(2);
	$barrel_9.accelTime(2);
	$barrel_9.decelTime(2);
	$barrel_9.moveTo($row1_point_1);
	
	$barrel_10.time(2);
	$barrel_10.accelTime(2);
	$barrel_10.decelTime(2);
	$barrel_10.moveTo($row2_point_1);
	sys.waitFor($barrel_10);
	
	$barrel_arm_1.playAnim ( ANIMCHANNEL_ALL, "barm_grab_a" );
	sys.wait(2.3);
	$barrel_9.bindToJoint($barrel_arm_1, "top_spin", 1);
	$barrel_10.bindToJoint($barrel_arm_1, "top_spin", 1);
	
	sys.wait(6.2);
	$barrel_9.unbind();
	$barrel_10.unbind();
	
	$barrel_mover_9.setSpeed(58);
	$barrel_mover_10.setSpeed(58);
	$barrel_mover_9.setSpline( $barrel_spline_9);
	$barrel_mover_10.setSpline( $barrel_spline_10);
	sys.waitFrame();

	$barrel_9.bind($barrel_mover_9);
	$barrel_10.bind($barrel_mover_10);
	
	sys.waitFor($barrel_mover_9);
	sys.waitFor($barrel_mover_10);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip" );
	$barrel_9.unbind();
	$barrel_10.unbind();
	sys.wait(1);
	$barrel_9.bind($mover_barrel_lifter);
	$barrel_10.bind($mover_barrel_lifter);
	
	$mover_barrel_lifter.time(8);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_top);
	sys.waitFor($mover_barrel_lifter);
	
	$barrel_9.unbind();
	$barrel_10.unbind();
	$barrel_clamp_1.unbind();
	$barrel_9.bindToJoint($barrel_clamp_1, "arm2", 1);
	$barrel_10.bindToJoint($barrel_clamp_1, "arm2", 1);
	
	sys.wait(.5);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "clamp_extend" );
	sys.wait(2.5);
	
	$barrel_9.unbind();
	$barrel_10.unbind();
	
	$barrel_9.time(5);
	$barrel_9.accelTime(2);
	$barrel_9.decelTime(2);
	$barrel_9.moveTo($end_point_1);
	
	$barrel_10.time(5);
	$barrel_10.accelTime(2);
	$barrel_10.decelTime(2);
	$barrel_10.moveTo($end_point_2);
	sys.wait(3);
	//$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
	
	sys.wait(1);
	$barrel_clamp_1.bind($mover_barrel_lifter);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_bottom);
	sys.waitFor($mover_barrel_lifter);
	$barrel_9.setWorldOrigin( $row1_point_2.getWorldOrigin());
	$barrel_10.setWorldOrigin( $row2_point_2.getWorldOrigin());
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
}

void barrels_start_4()
{
	$barrel_7.time(2);
	$barrel_7.accelTime(2);
	$barrel_7.decelTime(2);
	$barrel_7.moveTo($row1_point_1);
	
	$barrel_8.time(2);
	$barrel_8.accelTime(2);
	$barrel_8.decelTime(2);
	$barrel_8.moveTo($row2_point_1);
	sys.waitFor($barrel_8);
	
	$barrel_arm_1.playAnim ( ANIMCHANNEL_ALL, "barm_grab_a" );
	sys.wait(2.3);
	$barrel_7.bindToJoint($barrel_arm_1, "top_spin", 1);
	$barrel_8.bindToJoint($barrel_arm_1, "top_spin", 1);
	
	sys.wait(6.2);
	$barrel_7.unbind();
	$barrel_8.unbind();
	
	$barrel_mover_7.setSpeed(58);
	$barrel_mover_8.setSpeed(58);
	$barrel_mover_7.setSpline( $barrel_spline_7);
	$barrel_mover_8.setSpline( $barrel_spline_8);
	sys.waitFrame();

	$barrel_7.bind($barrel_mover_7);
	$barrel_8.bind($barrel_mover_8);
	
	sys.waitFor($barrel_mover_7);
	sys.waitFor($barrel_mover_8);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip" );
	$barrel_7.unbind();
	$barrel_8.unbind();
	sys.wait(1);
	$barrel_7.bind($mover_barrel_lifter);
	$barrel_8.bind($mover_barrel_lifter);
	
	$mover_barrel_lifter.time(8);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_top);
	sys.waitFor($mover_barrel_lifter);
	
	$barrel_7.unbind();
	$barrel_8.unbind();
	$barrel_clamp_1.unbind();
	$barrel_7.bindToJoint($barrel_clamp_1, "arm2", 1);
	$barrel_8.bindToJoint($barrel_clamp_1, "arm2", 1);
	
	sys.wait(.5);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "clamp_extend" );
	sys.wait(2.5);
	
	$barrel_7.unbind();
	$barrel_8.unbind();
	
	$barrel_7.time(5);
	$barrel_7.accelTime(2);
	$barrel_7.decelTime(2);
	$barrel_7.moveTo($end_point_1);
	
	$barrel_8.time(5);
	$barrel_8.accelTime(2);
	$barrel_8.decelTime(2);
	$barrel_8.moveTo($end_point_2);
	sys.wait(3);
	//$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
	
	sys.wait(1);
	$barrel_clamp_1.bind($mover_barrel_lifter);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_bottom);
	sys.waitFor($mover_barrel_lifter);
	$barrel_7.setWorldOrigin( $row1_point_2.getWorldOrigin());
	$barrel_8.setWorldOrigin( $row2_point_2.getWorldOrigin());
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
}

void barrels_start_3()
{
	$barrel_5.time(2);
	$barrel_5.accelTime(2);
	$barrel_5.decelTime(2);
	$barrel_5.moveTo($row1_point_1);
	
	$barrel_6.time(2);
	$barrel_6.accelTime(2);
	$barrel_6.decelTime(2);
	$barrel_6.moveTo($row2_point_1);
	sys.waitFor($barrel_6);
	
	$barrel_arm_1.playAnim ( ANIMCHANNEL_ALL, "barm_grab_a" );
	sys.wait(2.3);
	$barrel_5.bindToJoint($barrel_arm_1, "top_spin", 1);
	$barrel_6.bindToJoint($barrel_arm_1, "top_spin", 1);
	
	sys.wait(6.2);
	$barrel_5.unbind();
	$barrel_6.unbind();
	
	$barrel_mover_5.setSpeed(58);
	$barrel_mover_6.setSpeed(58);
	$barrel_mover_5.setSpline( $barrel_spline_5);
	$barrel_mover_6.setSpline( $barrel_spline_6);
	sys.waitFrame();

	$barrel_5.bind($barrel_mover_5);
	$barrel_6.bind($barrel_mover_6);
	
	sys.waitFor($barrel_mover_5);
	sys.waitFor($barrel_mover_6);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip" );
	$barrel_5.unbind();
	$barrel_6.unbind();
	sys.wait(1);
	$barrel_5.bind($mover_barrel_lifter);
	$barrel_6.bind($mover_barrel_lifter);
	
	$mover_barrel_lifter.time(8);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_top);
	sys.waitFor($mover_barrel_lifter);
	
	$barrel_5.unbind();
	$barrel_6.unbind();
	$barrel_clamp_1.unbind();
	$barrel_5.bindToJoint($barrel_clamp_1, "arm2", 1);
	$barrel_6.bindToJoint($barrel_clamp_1, "arm2", 1);
	
	sys.wait(.5);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "clamp_extend" );
	sys.wait(2.5);
	
	$barrel_5.unbind();
	$barrel_6.unbind();
	
	$barrel_5.time(5);
	$barrel_5.accelTime(2);
	$barrel_5.decelTime(2);
	$barrel_5.moveTo($end_point_1);
	
	$barrel_6.time(5);
	$barrel_6.accelTime(2);
	$barrel_6.decelTime(2);
	$barrel_6.moveTo($end_point_2);
	sys.wait(3);
	//$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
	
	sys.wait(1);
	$barrel_clamp_1.bind($mover_barrel_lifter);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_bottom);
	sys.waitFor($mover_barrel_lifter);
	$barrel_5.setWorldOrigin( $row1_point_2.getWorldOrigin());
	$barrel_6.setWorldOrigin( $row2_point_2.getWorldOrigin());
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
}

void barrels_start_2()
{
	$barrel_3.time(2);
	$barrel_3.accelTime(2);
	$barrel_3.decelTime(2);
	$barrel_3.moveTo($row1_point_1);
	
	$barrel_4.time(2);
	$barrel_4.accelTime(2);
	$barrel_4.decelTime(2);
	$barrel_4.moveTo($row2_point_1);
	sys.waitFor($barrel_4);
	
	$barrel_arm_1.playAnim ( ANIMCHANNEL_ALL, "barm_grab_a" );
	sys.wait(2.3);
	$barrel_3.bindToJoint($barrel_arm_1, "top_spin", 1);
	$barrel_4.bindToJoint($barrel_arm_1, "top_spin", 1);
	
	sys.wait(6.2);
	$barrel_3.unbind();
	$barrel_4.unbind();
	
	$barrel_mover_3.setSpeed(58);
	$barrel_mover_4.setSpeed(58);
	$barrel_mover_3.setSpline( $barrel_spline_3);
	$barrel_mover_4.setSpline( $barrel_spline_4);
	sys.waitFrame();

	$barrel_3.bind($barrel_mover_3);
	$barrel_4.bind($barrel_mover_4);
	
	sys.waitFor($barrel_mover_3);
	sys.waitFor($barrel_mover_4);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip" );
	$barrel_3.unbind();
	$barrel_4.unbind();
	sys.wait(1);
	$barrel_3.bind($mover_barrel_lifter);
	$barrel_4.bind($mover_barrel_lifter);
	
	$mover_barrel_lifter.time(8);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_top);
	sys.waitFor($mover_barrel_lifter);
	
	$barrel_3.unbind();
	$barrel_4.unbind();
	$barrel_clamp_1.unbind();
	$barrel_3.bindToJoint($barrel_clamp_1, "arm2", 1);
	$barrel_4.bindToJoint($barrel_clamp_1, "arm2", 1);
	
	sys.wait(.5);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "clamp_extend" );
	sys.wait(2.5);
	
	$barrel_3.unbind();
	$barrel_4.unbind();
	
	$barrel_3.time(5);
	$barrel_3.accelTime(2);
	$barrel_3.decelTime(2);
	$barrel_3.moveTo($end_point_1);
	
	$barrel_4.time(5);
	$barrel_4.accelTime(2);
	$barrel_4.decelTime(2);
	$barrel_4.moveTo($end_point_2);
	sys.wait(3);
	//$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
	
	sys.wait(1);
	$barrel_clamp_1.bind($mover_barrel_lifter);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_bottom);
	sys.waitFor($mover_barrel_lifter);
	$barrel_3.setWorldOrigin( $row1_point_2.getWorldOrigin());
	$barrel_4.setWorldOrigin( $row2_point_2.getWorldOrigin());
}

void barrels_start()
{
	$barrel_1.time(2);
	$barrel_1.accelTime(2);
	$barrel_1.decelTime(2);
	$barrel_1.moveTo($row1_point_1);
	
	$barrel_2.time(2);
	$barrel_2.accelTime(2);
	$barrel_2.decelTime(2);
	$barrel_2.moveTo($row2_point_1);
	sys.waitFor($barrel_2);
	
	$barrel_arm_1.playAnim ( ANIMCHANNEL_ALL, "barm_grab_a" );
	sys.wait(2.3);
	$barrel_1.bindToJoint($barrel_arm_1, "top_spin", 1);
	$barrel_2.bindToJoint($barrel_arm_1, "top_spin", 1);
	
	sys.wait(6.2);
	$barrel_1.unbind();
	$barrel_2.unbind();
	
	$barrel_mover_1.setSpeed(58);
	$barrel_mover_2.setSpeed(58);
	$barrel_mover_1.setSpline( $barrel_spline_1);
	$barrel_mover_2.setSpline( $barrel_spline_2);
	sys.waitFrame();

	$barrel_1.bind($barrel_mover_1);
	$barrel_2.bind($barrel_mover_2);
	
	sys.waitFor($barrel_mover_1);
	sys.waitFor($barrel_mover_2);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip" );
	$barrel_1.unbind();
	$barrel_2.unbind();
	sys.wait(1);
	$barrel_1.bind($mover_barrel_lifter);
	$barrel_2.bind($mover_barrel_lifter);
	
	$mover_barrel_lifter.time(8);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_top);
	sys.waitFor($mover_barrel_lifter);
	
	$barrel_1.unbind();
	$barrel_2.unbind();
	$barrel_clamp_1.unbind();
	$barrel_1.bindToJoint($barrel_clamp_1, "arm2", 1);
	$barrel_2.bindToJoint($barrel_clamp_1, "arm2", 1);
	
	sys.wait(.5);
	$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "clamp_extend" );
	sys.wait(2.5);
	
	$barrel_1.unbind();
	$barrel_2.unbind();
	
	$barrel_1.time(5);
	$barrel_1.accelTime(2);
	$barrel_1.decelTime(2);
	$barrel_1.moveTo($end_point_1);
	
	$barrel_2.time(5);
	$barrel_2.accelTime(2);
	$barrel_2.decelTime(2);
	$barrel_2.moveTo($end_point_2);
	sys.wait(3);
	//$barrel_clamp_1.playAnim ( ANIMCHANNEL_ALL, "grip_open_idle" );
	
	sys.wait(1);
	$barrel_clamp_1.bind($mover_barrel_lifter);
	$mover_barrel_lifter.moveTo($tgt_barrel_lifter_bottom);
	sys.waitFor($mover_barrel_lifter);
	$barrel_1.setWorldOrigin( $row1_point_2.getWorldOrigin());
	$barrel_2.setWorldOrigin( $row2_point_2.getWorldOrigin());
}

void barrel_puzzle_control()
{
	sys.trigger($barrel_sound_1);
	sys.trigger($barrel_sound_2);
	sys.trigger($barrel_sound_3);
	$yellow_light.remove();
	$yellow_flash.show();
	sys.trigger($lockup);
	sys.wait(.5);
	
	while(1)
	{
		thread barrels_start();
		sys.wait(27);
		thread barrels_start_2();
		sys.wait(27);
		thread barrels_start_3();
		sys.wait(27);
		thread barrels_start_4();
		sys.wait(27);
		thread barrels_start_5();
		sys.wait(27);
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// looping function that shakes the grinder thing as the bodies are falling into it, called right before the room  - jersey
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void grinder_shake ()

{
	$grinder_tube.time (.1);
	//sys.println("grinder_shaking");
	
	while(1)
	{
		$grinder_tube.rotateOnce ( '0.25 0 0' );
		sys.waitFor ($grinder_tube);
		$grinder_tube.rotateOnce ( '-0.25 0 0' );
		sys.waitFor ($grinder_tube);
	}
}

//--------------------------------------------------------------------------------------------------------------------------

float fluidSpeed = 0.125;

void fluidPulse() {

	//sys.println("WORKING? YES? NO?");

	float accelDuration = 1;	// set this to how many seconds you want the fluid to spend accelerating
	float fastDuration = 1;		// set this to how many seconds you want the fluid to spend moving quickly
	float decelDuration = 1;	// set this to how many seconds you want the fluid to spend decelerating
	
	// ASSIGNING VARIABLES FOR ACCELERATION EVENT
	
	float targetTime = sys.getTime() + decelDuration;
	float oldTime = sys.getTime();
	float nowTime = sys.getTime();
	float deltaTime = 0;
	
	float originSpeed = 0.125;	// 0.125 is the speed used "normally"
	float targetSpeed = 0.633;
	
	float fSpeed = originSpeed;
	
	float fSpeedScale = (targetSpeed - originSpeed)/accelDuration;
	
	// ACCELERATION EVENT
	
	while (nowTime < targetTime) {
	
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
		
		fSpeed += deltaTime * fSpeedScale;
		
		fluidSpeed = fSpeed;
		
		sys.waitFrame();

	}
	
	// RESETTING VARIABLES FOR QUICK STAGE
	
	targetTime = sys.getTime() + fastDuration;
	oldTime = sys.getTime();
	nowTime = sys.getTime();
	deltaTime = 0;
	
	originSpeed = 0.633;
	targetSpeed = 0.633;
	
	fSpeed = originSpeed;
	
	fSpeedScale = (targetSpeed - originSpeed)/accelDuration;
	
	// MOVING QUICKLY
	
	while (nowTime < targetTime) {
		
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
		
		fSpeed += deltaTime + fSpeedScale;
		
		fluidSpeed = fSpeed;
		
		sys.waitFrame();
		
	}
	
	// RESETTING VARIABLES FOR DECELERATION EVENT
	
	targetTime = sys.getTime() + accelDuration;
	oldTime = sys.getTime();
	nowTime = sys.getTime();
	deltaTime = 0;
	
	originSpeed = 0.633;
	targetSpeed = 0.125;
	
	fSpeed = originSpeed;
	
	fSpeedScale = (targetSpeed - originSpeed)/decelDuration;
	
	// DECELERATION EVENT
	
	while (nowTime < targetTime) {
	
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
		
		fSpeed += deltaTime * fSpeedScale;
		
		fluidSpeed = fSpeed;

		sys.waitFrame();
	
	}
	
}

void pulseLoop() {
	
	while(1){
		
		fluidPulse();
		sys.wait(1);
		
	}
}

void fluidScrolling() {

	float fluidPosition = 0;
	float oldTime = sys.getTime();
	float nowTime = sys.getTime();
	float deltaTime;

	while(1){
		
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
	
		fluidPosition += fluidSpeed * deltaTime;
		sys.setShaderParm(4, fluidPosition);
		sys.waitFrame();
	
	}

}

//-----------------------------------------------------------------------------------------------------------

void main()
{
	//thread heartpump::HeartLoop($hrt_env_heartpump_3);
	
	$env_introCarrier.hide();
	
	//start cinematic here
	sys.fadeIn( '0 0 0' , .25 );
	sys.setShaderParm(1, 0);
	aiScriptedAnim( $dispersal_cam_guy, "dispersal_cam_guy", 0,0 );
	aiScriptedAnim( $dispersal_stroggified_kane_1, "dispersal_kane_enters", 0,0 );
	aiScriptedAnim( $dispersal_tactical_transfer_1, "dispersal_tact1", 0,0 );
	playCameraWait( $cin_camera_tactical_intro_1 );
	
	$env_introCarrier.show();
	
	sys.wait(0.5);
	sys.trigger($item_objective_1);
	thread fluidScrolling();
	thread pulseLoop();	
	//entity checkpoint = sys.spawn("func_savegame");
	//sys.trigger(checkpoint);

//	string strAnim = sys.getcvar("si_entityFilter");
	InitBarrelCraneArm();	

/*
	//start the hooked body loops-- don't worry, they're paused
	vector hookedbodyorigin;
//	hookedbodyorigin = '1863 -640 263';		
//	hookedbodyorigin = '3168 -1286 -3479';				
	hookedbodyorigin = '5152 1338 -279';				
	thread hookedbodies::StartBodyHookingLoop(hookedbodyorigin, 90, 180, 3);
//	thread hookedbodies::StartBodyHookingLoop(hookedbodyorigin, 180, 90, 3);
	sys.wait(sys.random(3));
//	hookedbodyorigin = '1863 -320 263';				
//	hookedbodyorigin = '3488 -1286 -3479';				
	hookedbodyorigin = '5472 1338 -279';				
	thread hookedbodies::StartBodyHookingLoop(hookedbodyorigin, 90, 180, 3);
//	thread hookedbodies::StartBodyHookingLoop(hookedbodyorigin, 180, 90, 3);
*/


}

//-------------------------------------------------------------------------------
// void openWarehouse()
//
// opens (and removes) the warehouse doors
//
// jshepard | Oct 2004
//-------------------------------------------------------------------------------
//void openWarehouse()
//{
	//sys.println("void openWarehouse::begin");

	//$mvr_outdoor_warehouse_1.time(4);
	//$mvr_outdoor_warehouse_1.move( UP, 500);

	//$mvr_outdoor_warehouse_2.time(4);
	//$mvr_outdoor_warehouse_2.move( UP, 500);

	//sys.waitFor($mvr_outdoor_warehouse_2);

	//$mvr_outdoor_warehouse_1.remove();
	//$mvr_outdoor_warehouse_2.remove();
	
	//sys.println("void openWarehouse::end");

//}
//-------------- End void openWarehouse ---------------

//-------------------------------------------------------------------------------
// void openLargeWarehouse()
//
// opens (and removes) the large warehouse doors
//
// jshepard | Oct 2004
//-------------------------------------------------------------------------------
//void openLargeWarehouse()
//{
	//sys.println("void openLargeWarehouse::begin");

	//$mvr_outdoor_bigdoor_1.time(8);
	//$mvr_outdoor_bigdoor_1.move( WEST, 700);

	//$mvr_outdoor_bigdoor_2.time(8);
	//$mvr_outdoor_bigdoor_2.move( EAST, 700);

	//sys.waitFor($mvr_outdoor_bigdoor_2);

	//$mvr_outdoor_bigdoor_1.remove();
	//$mvr_outdoor_bigdoor_2.remove();
	
	//sys.println("void openLargeWarehouse::end");

//}
//-------------- End void openLargeWarehouse ---------------

//-------------------------------------------------------------------------------
// void openLargeWarehouse2()
//
// opens (and removes) the large warehouse doors
//
// jshepard | Oct 2004
//-------------------------------------------------------------------------------
void openLargeWarehouse2()
{
	return;
	//edit: Removed

	//sys.println("void openLargeWarehouse2::begin");
/*	
	sys.trigger($tgr_bigwarehouse_battle);

	$mvr_outdoor_bigdoor_3.time(8);
	$mvr_outdoor_bigdoor_3.move( UP, 700);

	$mvr_outdoor_bigdoor_4.time(8);
	$mvr_outdoor_bigdoor_4.move( UP, 700);

	sys.waitFor($mvr_outdoor_bigdoor_4);

	$mvr_outdoor_bigdoor_3.remove();
	$mvr_outdoor_bigdoor_4.remove();
*/	
	//sys.println("void openLargeWarehouse2::end");

} //-------------- End void openLargeWarehouse2 ---------------

//-------------------------------------------------------------------------------
// void bigWarehouseBattle()
//
// a big warehouse battle begins!
//
// jshepard | Oct 2004
//-------------------------------------------------------------------------------
void bigWarehouseBattle()
{
	//sys.println("void bigWarehouseBattle::begin");




	//sys.println("void bigWarehouseBattle::end");

} //-------------- End void bigWarehouseBattle ---------------

//-------------------------------------------------------------------------------
// void harvesterStompSounds()
//
//	Add some ominous stomps.  The trigger for it has a very long wait so if it
//	is possible to trigger this multiple times.  Once the harvester is visible
//	this trigger is removed
//
// jdischler | Dec 2004
//-------------------------------------------------------------------------------
void harvesterStompSounds()
{
	float t;
	
	for ( t = 0; t < 4; t++ )
	{
		sys.trigger($harvesterStompSpeaker);	
		sys.wait(1.5 + sys.random(0.7));
	}
}

//-------------------------------------------------------------------------------
// void activateHarvester()
//
// Activates the outdoor harvester
//
// jshepard | jdischler | Dec 2004
//-------------------------------------------------------------------------------
void activateHarvester()
{
//	sys.println("void activateHarvester::begin");

	// we don't need this anymore
	$harvesterStompTrigger.remove();
	
	sys.wait(0.8); // oh waiting maybe isn't so good.  The animators should maybe bake us up a longer anim at some point?
	$monster_harvester_1.activate($player1);
	
	// these two anims must match 1:1, so start 'em at the same time
	$env_bridge_crush_1.playAnim(0, "crush" );
	aiScriptedAnimWait( $monster_harvester_1, "dispersal_intro", 0, 1 );
	
	// ok, crush is done, so freeze it and start the timed steam "puzzle"
	$env_bridge_crush_1.playAnim(0, "crush_idle" );

//	sys.println("void activateHarvester::end");

} //-------------- End void activateHarvester ---------------

} // namespace map_dispersal
