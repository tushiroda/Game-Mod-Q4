


namespace map_network1
{
// tracks number of dudes still alive in the lobby ambush so we know the true end of the combat
float lobbyDudes = -1;

// tracks position of lobby rings
float leftBallDown = 0;
float rightBallDown = 0;

void	entityColorChange(entity e, vector v);

//-------------------------------------------------------------------------------
// void entityColorChange()
//
// Changes the color of an entity list.
//
// mekberg | Nov 2004	grabbed from building_b.script (mrenner)
//-------------------------------------------------------------------------------
void entityColorChange(entity e, vector v)
{
	float i;

	// Go through all targets.
	for(i = 0; i < e.numTargets(); i++)
	{
		e.getTarget(i).setColor(v_x, v_y, v_z);
	}

} //-------------- End void entityColorChange ---------------


void mainBeamTop()
{
	while(1)
	{
		//	sys.trigger($beamWhite);
		sys.trigger($beamBlastInf);

		sys.trigger($beamBlastLight);
		$beamBlastFlare.show();
		setNewTimes( $beamBlast, 2.5 , 0 , 0 );
		$beamBlast.moveTo( $distortTop );
		sys.wait(2.3);
		sys.trigger($kafoomTop);	// bzzt		
		sys.waitFor($beamBlast);
		
		sys.trigger($beamBlastFx);	// off
		$beamBlastFlare.hide();		
		sys.trigger($beamBlastLight);
		sys.trigger($distortTop);
		
		setNewTimes( $beamBlast, .1 , 0 , 0 );
		$beamBlast.moveTo( $target_null_50 );
		sys.waitFor($beamBlast);
		sys.wait(.1);

		sys.trigger($beamBlastLight);
		sys.trigger($distortTopBottom);
		sys.trigger($beamBlastFx);	// on
		$beamBlastFlare.show();
		setNewTimes( $beamBlast, 5 , 0 , 0 );
		$beamBlast.moveTo( $target_null_51 );
		sys.wait(4.75);
		sys.trigger($kafoomBottom);	// bzzt
		sys.waitFor($beamBlast);
		sys.trigger($distortBottom);
		

		sys.trigger($beamBlastFx);	// off		
		$beamBlastFlare.hide();		
		sys.trigger($beamBlastLight);
		setNewTimes( $beamBlast, .1 , 0 , 0 );
		$beamBlast.moveTo( $target_null_49 );
		sys.waitFor($beamBlast);
		sys.wait(1.4);
		sys.trigger($beamBlastFx);	// on
	}
}

void turnExitBridge()
{
	setNewTimes($exitRotatyBit, 3, 1, 1);
	$exitRotatyBit.rotateOnce('0 180 0');
	$teleporter_bridge.startSound("snd_rotate", SND_CHANNEL_ANY, 0 );
}

void falcon6()
{
	// " run on the networking tower! "
	radioChatterPlayWait ($radioCombat_1, "");

	// " I'm hit! "
	radioChatterPlayWait ($radioCombat_2, "");
}
void eagle10()
{
	// " making our run on the networking tower! "
	radioChatterPlayWait ($radioCombat_3, "");

	// " I'm hit! "
	radioChatterPlayWait ($radioCombat_4, "");
}
void landingPods()
{
	// " don't dare risk landing our pods "
	radioChatterPlayWait ($radioCombat_5, "");
}
void bombingRun()
{
	// " preparing to make a bombing run"
	radioChatterPlayWait ($radioCombat_6, "");

	// " roger that"
	radioChatterPlayWait ($radioCombat_7, "");

	// " I can barely see.."
	radioChatterPlayWait ($radioCombat_8, "");

	// " eagle 12's been hit."
	radioChatterPlayWait ($radioCombat_9, "");
}
void somethingBig()
{
	// " radar shows something big."
	radioChatterPlayWait ($radioCombat_10, "");
}
void guardianSpotted()
{
	// " we have a visual."
	radioChatterPlayWait ($radioCombat_11, "");
}
void guardianLanded()
{
	// " ...landed on the side of the tower."
	radioChatterPlayWait ($radioCombat_12, "");
}

void radioCombat()
{
	thread falcon6();
	sys.wait(10 + sys.random(5));
	thread eagle10();
	sys.wait(10 + sys.random(5));
	thread landingPods();
	sys.wait(10 + sys.random(5));
	thread bombingRun();
	sys.wait(20 + sys.random(5));
	thread somethingBig();
	sys.wait(10 + sys.random(5));
	thread guardianSpotted();
	sys.wait(10 + sys.random(5));	
	thread guardianLanded();
}
void spawnBalls(entity ball, entity spawner, entity light)
{
	// makes the balls on the teleporters fire down like they are launching something.
	setNewTimes( ball , 2 , 2 , 0 );
	ball.move( UP, 16 );
	sys.waitFor(ball);
	sys.wait(.25);		
	setNewTimes( ball , .1 , 0 , 0 );
	ball.move( DOWN, 20 );
	sys.waitFor(ball);
	//sys.println("spawn guys");
	ball.move( UP, 4 );
	sys.waitFor(ball);
	sys.trigger(spawner);
	//lobbyDudes++;		// track number of dudes in the lobby
	//sys.println("There are " + lobbyDudes + " dudes to kill.");
	sys.trigger(light);
	sys.wait(1);
	sys.trigger(light);
}

void Startpumping()
{
	$piston_11.playCycle(ANIMCHANNEL_ALL, "cycle");
	sys.wait(.5);
	$piston_12.playCycle(ANIMCHANNEL_ALL, "cycle");
	sys.wait(.5);
	$piston_13.playCycle(ANIMCHANNEL_ALL, "cycle");
	sys.wait(.5);
	$piston_14.playCycle(ANIMCHANNEL_ALL, "cycle");
	sys.wait(.5);
	$piston_15.playCycle(ANIMCHANNEL_ALL, "cycle");
	sys.wait(.5);
	$piston_16.playCycle(ANIMCHANNEL_ALL, "cycle");
	sys.wait(.5);
}

void spawnTsd()
{
	$tsd_1.playCycle(ANIMCHANNEL_ALL, "shockloop");
	$tsd_2.playCycle(ANIMCHANNEL_ALL, "shockloop");
}

//------------------------------------------------------------------
// StartTurrets
//
// jdischler | Jan 2005
//------------------------------------------------------------------
void StartTurrets()
{
	sys.trigger($railTurret1);
	
	$railTurret1_Mover.time(2.0);
	$railTurret1_Mover.accelTime(0);
	$railTurret1_Mover.decelTime(.5);
	$railTurret1_Mover.moveTo($railTurret1_targetPos1);

	sys.wait(1.5);	
	sys.trigger($railTurret2);
	$railTurret2_Mover.time(2.0);
	$railTurret2_Mover.accelTime(0);
	$railTurret2_Mover.decelTime(.5);
	$railTurret2_Mover.moveTo($railTurret2_targetPos1);
}


//--------------------------------------------------------------------------
// Low level bridge helper, rotate the platform parts into position.
//	flip option to handle segments on the right vs. left half of room
//
// jdischler | Jan 2005
//--------------------------------------------------------------------------
void MoveBridgeSegment(entity plat, entity shaft, float flipped)
{
	plat.bind(shaft); // plat becomes child of the shaft
	
	plat.time( 3 );
	plat.decelTime( .25 );
	plat.accelTime( 2 );
	
	if ( flipped )
	{
		plat.rotateTo('0 -90 15');
	}
	else
	{
		plat.rotateTo('0 -90 -15');
	}
	
	sys.wait(1.0);

	shaft.time( 2 );
	shaft.decelTime( 0.1 );
	shaft.accelTime( 1.5 );

	if ( flipped )
	{	
		shaft.rotateUpTo( 0,15);
	}
	else
	{
		shaft.rotateDownTo( 0,165);
	}
		
	sys.waitFor(shaft);
	
	plat.unbind();
}

//--------------------------------------------------------------------------
// Move the bridge into place	
//
// jdischler | Jan 2005
//--------------------------------------------------------------------------
void doBridge()
{
	sys.wait(1);
	sys.trigger($bridgeLightsFadeIn);
	sys.wait(0.5);
	
	thread MoveBridgeSegment($bridgePlat_1, $bridgePlatSupport_1,0);
	sys.wait(0.5);

	thread MoveBridgeSegment($bridgePlat_2, $bridgePlatSupport_2,1);
	sys.wait(0.5);

	thread MoveBridgeSegment($bridgePlat_3, $bridgePlatSupport_3,0);
	sys.wait(0.5);

	thread MoveBridgeSegment($bridgePlat_4, $bridgePlatSupport_4,1);
	sys.wait(0.5);

	thread MoveBridgeSegment($bridgePlat_5, $bridgePlatSupport_5,0);
	sys.wait(0.5);

	thread MoveBridgeSegment($bridgePlat_6, $bridgePlatSupport_6,1);
}

void lobbyTrapped()
{
	$func_static_13023.setShaderParm(7, 0);
	$func_static_13022.setShaderParm(7, 0);
	$door_typical_135.setShaderParm(7, 0);
	$door_typical_135.lock(1);
	lobbyDudes = 0;
}
void lobbyRadio()
{
	// miss match of sounds pieced together.
	sys.trigger($lobbyExplosionSnd);
	
	// " Aaaaaaaah! "
	radioChatterPlayWait ($lobbyTalk_1, "");

	// " Shit!  Get a medic! "
	radioChatterPlayWait ($lobbyTalk_2, "");

	// "A medic has been dispatched."
	//radioChatterPlayWait ($lobbyTalk_3, "");

	// " Do something! "
	radioChatterPlayWait ($lobbyTalk_4, "");

	// " ... too late.  He's dead. "
	radioChatterPlayWait ($lobbyTalk_5, "");

	// " NO! "
	//radioChatterPlayWait ($lobbyTalk_6, "");

	// " sorry, I'm not a medic "
	//radioChatterPlayWait ($lobbyTalk_7, "");

	// " No time for grieving! "
	radioChatterPlayWait ($lobbyTalk_8, "");
}

// So lobby monsters target the player more than 20% of the time
void lobbyEnemy(entity duder)
{
	lobbyDudes++;
	if (sys.random(1) < 0.6 ) duder.setEnemy($player1);
}

void lobbykill()
{
	lobbyDudes--;
	//sys.println("There are " + lobbyDudes + " dudes to kill.");
}

void rightLobbySpawners()
{
	$func_damagable_1.setHealth(200);
	sys.trigger($rightBallOnFx);
	sys.trigger($rightDiskLight);
	setNewTimes( $rightDisk_1 , 3 , 1 , 1 );
	while(1)
	{
		sys.trigger($rightDiskMoveSnd);
		$rightDisk_1.startSpline( $rightDropper_1 );
		sys.waitFor($rightDisk_1);
		thread spawnBalls($rightBall_1, $rightSpawner, $rightBallLight);
		sys.wait(2.5);

		sys.trigger($rightDiskMoveSnd);
		$rightDisk_1.startSpline( $rightDropper_2 );
		sys.waitFor($rightDisk_1);
		thread spawnBalls($rightBall_1, $rightSpawner, $rightBallLight);
		sys.wait(2.5);

		sys.trigger($rightDiskMoveSnd);		
		$rightDisk_1.startSpline( $rightDropper_3 );
		sys.waitFor($rightDisk_1);
		thread spawnBalls($rightBall_1, $rightSpawner, $rightBallLight);
		sys.wait(2.5);

		sys.trigger($rightDiskMoveSnd);
		$rightDisk_1.startSpline( $rightDropper_4 );
		sys.waitFor($rightDisk_1);
		thread spawnBalls($rightBall_1, $rightSpawner, $rightBallLight);
		sys.wait(2.5);

		sys.trigger($rightDiskMoveSnd);		
		$rightDisk_1.startSpline( $rightDropper_5 );
		sys.waitFor($rightDisk_1);
		thread spawnBalls($rightBall_1, $rightSpawner, $rightBallLight);
		sys.wait(2.5);

		sys.trigger($rightDiskMoveSnd);
		$rightDisk_1.startSpline( $rightDropper_6 );
		sys.waitFor($rightDisk_1);
		thread spawnBalls($rightBall_1, $rightSpawner, $rightBallLight);
		sys.wait(2.5);
	}
}
void leftLobbySpawners()
{
	$func_damagable_2.setHealth(200);
	sys.trigger($leftBallOnFx);
	sys.trigger($leftDiskLight);
	setNewTimes( $leftDisk_1 , 3 , 1 , 1 );
	while(1)
	{
		sys.trigger($leftDiskMoveSnd);
		$leftDisk_1.startSpline( $leftDropper_1 );
		sys.waitFor($leftDisk_1);
		thread spawnBalls($leftBall_1, $leftSpawner, $leftBallLight);
		sys.wait(2.5);

		sys.trigger($leftDiskMoveSnd);
		$leftDisk_1.startSpline( $leftDropper_2 );
		sys.waitFor($leftDisk_1);
		thread spawnBalls($leftBall_1, $leftSpawner, $leftBallLight);
		sys.wait(2.5);
		
		sys.trigger($leftDiskMoveSnd);
		$leftDisk_1.startSpline( $leftDropper_3 );
		sys.waitFor($leftDisk_1);
		thread spawnBalls($leftBall_1, $leftSpawner, $leftBallLight);
		sys.wait(2.5);
		
		sys.trigger($leftDiskMoveSnd);		
		$leftDisk_1.startSpline( $leftDropper_4 );
		sys.waitFor($leftDisk_1);
		thread spawnBalls($leftBall_1, $leftSpawner, $leftBallLight);
		sys.wait(2.5);
		
		sys.trigger($leftDiskMoveSnd);
		$leftDisk_1.startSpline( $leftDropper_5 );
		sys.waitFor($leftDisk_1);
		thread spawnBalls($leftBall_1, $leftSpawner, $leftBallLight);
		sys.wait(2.5);
		
		sys.trigger($leftDiskMoveSnd);
		$leftDisk_1.startSpline( $leftDropper_6 );
		sys.waitFor($leftDisk_1);
		thread spawnBalls($leftBall_1, $leftSpawner, $leftBallLight);
		sys.wait(2.5);
	}
}

void marineHealth()
{
	//sys.println("health");

	// when one of the rings is destroyed, so the marines can die.
	$RAFFEL.setHealth(125);
	$WILLITS.setHealth(125);
//	$PEARSON.setHealth(125);
	$FUCHS.setHealth(125);
}

void musicStop()
{
	$speaker_lobbymusic.fadeSound( SND_CHANNEL_ANY, -80, 6 );
	sys.wait(7);
	$speaker_lobbymusic.remove();
}
void musicSoften()
{
	$speaker_lobbymusic.fadeSound( SND_CHANNEL_ANY, -8, 3 );
}
void musicLouden()
{
	$speaker_lobbymusic.fadeSound( SND_CHANNEL_ANY, 8, 3 );
}


void ringsDown()
{
	// rings come down and the spawners start.
	
	setNewTimes( $rightRings , 3 , 1 , 2 );
	setNewTimes( $leftRings , 3 , 1 , 2 );
	
	$rightRings.move( DOWN, 204 );
	$leftRings.move( DOWN, 204 );
		
	sys.waitFor($rightRings);
	
	leftBallDown = 1;
	rightBallDown = 1;
	
//	sys.trigger($ai_trigger_once_6);
	
	$func_damagable_1.show();
	$func_damagable_2.show();
	
	$rightDisk_1.unbind();
	$leftDisk_1.unbind();
	
	sys.trigger($speaker_lobbymusic);
	
	thread rightLobbySpawners();
	thread leftLobbySpawners();
}

void leftRingUp()
{
	if (leftBallDown) {
		$leftDisk_1.bind($leftRings);
		// rings go up
		setNewTimes( $leftRings , 3 , 1 , 2 );
		$leftRings.move( UP, 204 );
		sys.waitFor($leftRings);
		leftBallDown = 0;
	}
}

void rightRingUp()
{
	if (rightBallDown) {

		$rightDisk_1.bind($rightRings);
		// rings go up
		setNewTimes( $rightRings , 3 , 1 , 2 );
		$rightRings.move( UP, 204 );
		sys.waitFor($rightRings);
		rightBallDown = 0;
	}
}

void ringsUp()
{
	thread leftRingUp();
	thread rightRingUp();
}

void rightBallFinished()
{
	sys.killthread( "map_network1::rightLobbySpawners");
	$rightDisk_1.stopSpline();
	sys.trigger($lobbyBallCount);
	sys.trigger($rightDiskLight);
	$rightSpawner.remove();
	$rightBallOnFx.remove();
	rightRingUp();
}

void leftBallFinished()
{
	sys.killthread( "map_network1::leftLobbySpawners");
	$leftDisk_1.stopSpline();
	sys.trigger($lobbyBallCount);
	sys.trigger($leftDiskLight);
	$leftSpawner.remove();
	$leftBallOnFx.remove();
	leftRingUp();
}

void killRightBall()
{
	$rightDisk_1.hide();
	$rightBall_1.hide();
	sys.trigger($rightBallFx);
	sys.trigger($rightBallBust);
	$rightDisk_broken.show();

	rightBallFinished();
}

void killLeftBall()
{
	$leftDisk_1.hide();
	$leftBall_1.hide();
	sys.trigger($leftBallFx);
	sys.trigger($leftBallBust);
	$leftDisk_broken.show();

	leftBallFinished();
}

void lobbyLightsOff()
{
	sys.trigger($func_savegame_1);
	
	//sys.println("Lobby Lights Off");
	sys.trigger($centerFloorOffSnd_1);
	sys.trigger($lobbysteam1);
	sys.wait(.25);
	entityColorChange($lobbyCenterFloorLights_2, '0 0 0');
	sys.trigger($centerFloorOffSnd_2);
	sys.wait(.5);
	sys.trigger($lobbysteam2);
	entityColorChange($lobbyCenterFloorLights_3, '0 0 0');
	sys.trigger($centerFloorOffSnd_3);
	sys.wait(.5);
	sys.trigger($lobbysteam3);
	entityColorChange($lobbyCenterFloorLights_4, '0 0 0');
	sys.trigger($centerFloorOffSnd_4);
	sys.wait(.75);
	
	$lobbyLightModel.hide();
	entityColorChange($lobbyTubeLights, '0 0 0');
	entityColorChange($lobbyFillLights, '0 0 0');
	entityColorChange($lobbyCenterLights, '0 0 0');
	entityColorChange($lobbyCenterFloorLights_1, '0 0 0');

	entityColorChange($lobbyOrangeFloorLights_1, '0 0 0');
	entityColorChange($lobbyOrangeFloorLights_2, '0 0 0');
	entityColorChange($lobbyOrangeFloorLights_3, '0 0 0');
	sys.trigger($lightsOffSnd);

	sys.wait(1);
	sys.trigger($lobbyRoomFillLight);
	sys.trigger($darkLobbyLight);
}
void lobbyLightsOn()
{
	float i;
	//sys.println("Lobby Lights On");

	$darkLobbyLight.remove();
	$lobbyRoomFillLight.remove();
	$lobbyLightModel.show();
	// fade the lights up graaadually
	for (i = 0; i < 50; i++) {
		entityColorChange($lobbyTubeLights, '0.77 0.87 1' * i * .02);
		entityColorChange($lobbyFillLights, '0.36 0.46 0.53' * i * .02);
		entityColorChange($lobbyCenterLights, '0.68 0.8 1' * i * .02);
	
		entityColorChange($lobbyCenterFloorLights_1, '0.11 0.78 0.93' * i * .02);
		entityColorChange($lobbyCenterFloorLights_2, '0.11 0.78 0.93' * i * .02);
		entityColorChange($lobbyCenterFloorLights_3, '0.11 0.78 0.93' * i * .02);
		entityColorChange($lobbyCenterFloorLights_4, '0.11 0.78 0.93' * i * .02);
	
		entityColorChange($lobbyOrangeFloorLights_1, '0.89 0.4 0' * i * .02);
		entityColorChange($lobbyOrangeFloorLights_2, '0.89 0.4 0' * i * .02);
		entityColorChange($lobbyOrangeFloorLights_3, '0.89 0.4 0' * i * .02);
		sys.wait(0.1);
	}
}

void lobbyFuchs()
{
	$FUCHS.flashlight(1);
	aiScriptedFaceWait ( $FUCHS, $light_6365, false );	
	aiScriptedAnim( $FUCHS, "idle_scan_2", 4, true );		
}
void lobbyWillits()
{
	sys.wait(.25);
	$WILLITS.flashlight(1);
	aiScriptedFaceWait ( $WILLITS, $light_6855, false );	
	aiScriptedAnim( $WILLITS, "idle_scan_2", 4, true );		
}
void lobbyAmbush()
{
	while (lobbyDudes == -1) {	// wait until the player has come in and the door is locked
		sys.wait(0.5);
	}
	thread lobbyLightsOff();
	
	/*-----------------------------------
	
		WAITING FOR DIALOG
	
	--------------------------------------*/
	sys.wait(3);
	
	sys.trigger($lobbyAnnouncer);
	sys.wait(sys.random(0.4));
	thread lobbyWillits();
	sys.wait(sys.random(0.4));
	thread lobbyFuchs();
	
//	sys.wait(sys.random(0.3));
//	$WILLITS.flashlight(1);
//	sys.wait(sys.random(0.3));
//	$FUCHS.flashlight(1);
	
	sys.wait(5);
	
	sys.trigger($lobby_tether_none);
	
	aiScriptedStop($WILLITS);
	aiScriptedStop($FUCHS);
	
	thread StartTurrets();
	thread ringsDown();	
	
	$RAFFEL.enableHeal();
	$WILLITS.enableHeal();
}
void lobbyDone()
{
//	float lobbyFailSafe;
//	if (leftBallDown) thread killLeftBall();
//	if (rightBallDown) thread killRightBall();

	while ( lobbyDudes > 0 ) {	// don't cue the end of the sequence until the dudes are all dead
		//sys.println("Waiting for combat to end ...");
		sys.wait(1);
		//lobbyFailSafe++;		// 20 second max wait in case the lobbyDudes count gets fubared
	}

	thread ringsUp();
	thread lobbyLightsOn();
	
	//sys.println("Lobby Done");
	musicSoften();
	
	// "Take the door that is now opening."
	sys.trigger($ai_tether_radius_2);
	radioChatterPlayWait ($straussLobbyTalk_1, "");

	$func_static_13793.setShaderParm(7, 1);
	$func_static_13794.setShaderParm(7, 1);
	$bridge_door.setShaderParm(7, 1);
	$bridge_door.lock(0);

	//$PEARSON.flashlight(0);
	$RAFFEL.flashlight(0);
	$WILLITS.flashlight(0);
	$FUCHS.flashlight(0);
	
}

void teleportDoor(entity door, entity llock, entity rlock, entity snd, entity telefx)
{
	setNewTimes( rlock , .25 , .25 , .25 );
	rlock.rotateTo('0 -540 0');
	setNewTimes( llock , .25 , .25 , .25 );
	llock.rotateTo('0 540 0');
	sys.waitFor( rlock );

	rlock.bind( door );
	llock.bind( door );

	sys.trigger( telefx );
	setNewTimes( door , .25 , .25 , 0 );
	door.move( DOWN, 160 );
	sys.waitFor( door );

	sys.trigger( snd );
}

void teleDoors()
{
	musicLouden();
//	$light_7813.setColor(0.68, 0.8, 1);
	sys.trigger($teleLightsFade);
	sys.trigger($light_7255);
	
	// brown light off
	// sys.trigger($light_7814);

	// blue light on
	// sys.trigger($light_7813);
	
	// lights on sound
	sys.trigger($teleLightsOnSnd);
		
	thread teleportDoor($teleDoor_1, $teleLock_left_1, $teleLock_right_1, $teleDoorSnd_1, $fx_working_5);
	sys.wait(.5);

	sys.trigger($light_7250);
	thread teleportDoor($teleDoor_2, $teleLock_left_2, $teleLock_right_2, $teleDoorSnd_2, $fx_working_4);
	sys.wait(.5);

	sys.trigger($light_7251);
	thread teleportDoor($teleDoor_3, $teleLock_left_3, $teleLock_right_3, $teleDoorSnd_3, $fx_working_3);
	sys.wait(.5);

	sys.trigger($light_7253);
	thread teleportDoor($teleDoor_4, $teleLock_left_4, $teleLock_right_4, $teleDoorSnd_4, $fx_working_2);
	
	sys.wait(.5);
	sys.trigger($guardian_1_spawner_16);
}

void section13()
{
	sys.trigger($section13_1);
	sys.wait(1.5);
	aiSpeakWait( $COWLING, "lipsync_1" );
	sys.trigger($section13_2);
	sys.wait(1.5);
	aiSpeakWait( $COWLING, "lipsync_2" );
	sys.trigger($section13_3);
	sys.wait(2.5);
	$COWLING.setTalkState ( TALK_OK ); 
	
	sys.wait(1);
	// activate the other triggered conversation.
	sys.trigger($cratesTrig);
}
void spawnSamson()
{
	sys.trigger($ai_tether_radius_17);
}
void heavyCrates()
{
	aiSpeakWait( $SAMSON, "lipsync_1" );
	aiSpeakWait( $ARLINGTON, "lipsync_1" );
	aiSpeakWait( $SAMSON, "lipsync_2" );
	$SAMSON.enableHeal();
	sys.trigger($samsonWalk);
}
void straussOrders()
{
	// "...so I will make this brief."
	radioChatterPlayWait ($straussTalk_1, "");

	// "destroy the Nexus"
	radioChatterPlayWait ($straussTalk_2, "");

	// "get to the top of this tower."
	radioChatterPlayWait ($straussTalk_3, "");
	
	// get to the top of the tower objective is given.
	sys.trigger($item_objective_1);
	
	// activates a conversation.
	// sys.trigger($section13Trig);		// cut per id/atvi meetings
}
void pottsGui()
{
	aiScriptedAnimWait($Rodriguez, "idle_wrist_gui_start", 4, 1);
	aiScriptedAnimWait($Rodriguez, "idle_wrist_gui_end", 4, 1);
}

void potts()
{
	aiScriptedAnimWait($PEARSON, "idle_wrist_gui_start_fast", 4, 1);
	// Potts yells to Strauss saying that Kane is here.
	sys.trigger($pottsTalk_1);
	aiSpeak( $PEARSON, "lipsync_1" );
	aiScriptedAnimLoop($PEARSON, "idle_wrist_gui_loop", 4);
	aiSpeakDone( $PEARSON );	
	$PEARSON.setTalkState ( TALK_OK ); 
	aiScriptedAnimWait($PEARSON, "idle_wrist_gui_end_fast", 4, 1);

	thread straussOrders();
}

//--------------------------------------------------------------------------
void endLevel()
{
	// trigger some obective here?

	//$player1.setWorldOrigin( $endlevelFloor_fx.getWorldOrigin());
	sys.waitFrame();
	$player1.bind($endlevelFloor_fx);
	
	// makes the balls on the teleporters fire down like they are launching something.
	setNewTimes( $endLevelBall , 1 , 1 , 0 );
	$endLevelBall.move( UP, 16 );
	sys.waitFor($endLevelBall);
	sys.wait(.25);		
	setNewTimes( $endLevelBall , .1 , 0 , 0 );
	$endLevelBall.move( DOWN, 20 );
	sys.waitFor($endLevelBall);
	setNewTimes( $endLevelBall , .1 , 0 , 0 );
	$endLevelBall.move( UP, 4 );

	$player1.disableWeapon();

	// trigger target_setinfluence with the fov changes
	sys.trigger($teleportBack);

	sys.fadeOut( '1 1 1', 1);	
	sys.trigger($porterLight_1);
	sys.trigger($endlevelFloor_fx);
	sys.trigger($endlevelFloor_fx_1);

	sys.wait(1);
	sys.fadeOut( '0 0 0', 1);	
	sys.wait(1);
	sys.trigger($levelChange);
}
void tramStop()
{
//	aiScriptedAnimLoop($npc_bahr, "tram_driving_idle", 4);
	setNewTimes( $introTram , 10 , 0 , 3 );
	$introTram.move( WEST, 614 );	

	sys.wait(7);
	sys.trigger($tramStop);
	sys.waitFor($introTram);
	sys.wait(.5);
	
//	sounds look like they are already playing on the tram car anim, but you can't hear them.
//	$introTram.startSoundShader( "hangar_bay_door_open", SND_CHANNEL_ANY);	
	
	tramCar_Scripts::OpenTramDoors($vehicle_tramcar_marine_1);
}

void tramLeaves()
{
	tramCar_Scripts::CloseTramDoors($vehicle_tramcar_marine_1);
	
	$tramClip.show();
	
	setNewTimes( $introTram , 8 , 3 , 0 );
	$introTram.move( WEST, 2080 );	
	
	sys.wait(2);
	sys.trigger($func_door_100);
	sys.wait(3);
	sys.trigger($func_door_100);
		
	sys.waitFor($introTram);
	
	$introTram.remove();
	$vehicle_tram_reargun_1.remove();
//	$npc_bahr.remove();	
}

void randomShaftBits(entity disc)
{
	vector  vRandomPlusAngle = '0 0 0';
	vRandomPlusAngle_x = sys.random(360); // picks a random number between zero and 180

	vector  vRandomMinusAngle = '0 0 0';
	vRandomMinusAngle_x = sys.random(-360); // picks a random number between zero and 180

	while(1)
	{
		setNewTimes( disc , (sys.random(.5)+ 2) , 0 , 0 );
		disc.rotateOnce( vRandomPlusAngle );
		sys.waitFor(disc);

		setNewTimes( disc , (sys.random(.5)+ 2) , 0 , 0 );
		disc.rotateOnce( vRandomMinusAngle );
		sys.waitFor(disc);
	}
}
void movingShaftStuff()
{
	thread randomShaftBits($disc_1);
	thread randomShaftBits($disc_2);
	thread randomShaftBits($disc_3);
	thread randomShaftBits($disc_4);
	thread randomShaftBits($disc_5);
	thread randomShaftBits($disc_6);
	thread randomShaftBits($disc_7);
	thread randomShaftBits($disc_8);
	thread randomShaftBits($disc_9);
}
void jump270(entity stroggBack)
{
	//sys.println("jump 270");
	aiScriptedMoveWait( stroggBack, $target_null_48, 16, 1 );
	stroggBack.scriptedJumpDown( 270 );
	while(!stroggBack.scriptedDone())
	{
		sys.waitFrame();
	}
}
void storeTsd(entity tsd)
{
	playAnimWait( tsd, ANIMCHANNEL_ALL, "shockstop");
	tsd.playCycle(ANIMCHANNEL_ALL, "storage");
}
void shockTsd(entity tsd)
{
	playAnimWait( tsd, ANIMCHANNEL_ALL, "shockstart");
	tsd.playCycle(ANIMCHANNEL_ALL, "shockloop");
}

void generators(entity gen)
{
	while(1)
	{
		sys.trigger($genInfluence);
		sys.trigger($tsd_scream_1);
		sys.trigger($tsd_scream_2);
		thread shockTsd($tsd_1);
		thread shockTsd($tsd_2);
		setNewTimes( gen , 1 , 0 , 0 );
		gen.rotate( '0 360 0' );
		sys.wait(5);
		thread storeTsd($tsd_1);
		thread storeTsd($tsd_2);
		sys.trigger($tsd_scream_1);
		sys.trigger($tsd_scream_2);
		setNewTimes( gen , 1 , 0 , 0 );
		gen.rotate( '0 90 0' );
		sys.wait(10);
	}	
}

void prepareExit()
{
	thread musicStop();
	thread turnExitBridge();
}

// Loop to pulse the tram landing lights
// mbreit | august 05
// ------------------
void blinkyTramLights(string blinkySet)
{
	sys.threadname(blinkySet);
	string blinkyName;
	entity blinkyEnt;
	float i = 1;
	while (1) {
		blinkyEnt = sys.getEntity( blinkySet + "_" + i );
		blinkyEnt.fadeInLight(0.05);
		sys.wait(0.05);
		blinkyEnt.fadeOutLight(0.4);
		sys.wait(0.15);

		i = i + 1;
		if (i == 7) i = 1;
	}	
}

void killTramLights() {
	sys.killthread("light_tramarrival");
	sys.killthread("light_tramarrivalb");
	sys.killthread("light_tramarrivalc");
	sys.killthread("light_tramarrivald");
}

//--------------------------------------------------------------------------------
// void breakTeleporter()
//
// Function to turn a normal teleporter into a shot-up one.  
//
// gcarlson | Apr 2005
//--------------------------------------------------------------------------------
void breakTeleporter(entity tgr)
{
	// When the user shoots a teleporter, it should switch to the broken model and stop working
	//sys.println("breakTeleporter called");

	vector location = sys.getEntity(tgr.getKey("ball")).getOrigin();

	// play an explosion effect to hide the model swap
	sys.playWorldEffect("effects/explosions/surface/medium.fx", location, '0 0 1');

	// get rid of the not broken version
	sys.getEntity(tgr.getKey("ball")).remove();
	sys.getEntity(tgr.getKey("socket")).remove();

	// show the broken version
	sys.getEntity(tgr.getKey("broken")).show();
	sys.trigger(sys.getEntity(tgr.getKey("brokeSound")));	// kaphoom

	// disable the teleporter 
	sys.getEntity(tgr.getKey("spawn_target")).remove(); //

	// swap out the effects
//	sys.trigger(sys.getEntity(tgr.getKey("broken_effect"))); // on	Removing broken effect per design change 6/30/05 gc
	sys.trigger(sys.getEntity(tgr.getKey("working_effect"))); // off
	
	// check for a failed teleport
	if (tgr.getFloatKey("canTeleportFail") > 0)
	{
		if (sys.randomInt(10) == 0) // 10% chance
		{
			// wait a small random delay
			sys.wait(sys.random(3));

			// spawn a strogg marine
			entity monster = sys.spawn("monster_strogg_marine");
			location = sys.getEntity(tgr.getKey("broken")).getOrigin();
			vector orientation = sys.getEntity(tgr.getKey("broken")).getAngles();
			location_z -= 176;
			orientation_y -= 90;
			monster.setOrigin(location);
			monster.setAngles(orientation);

			// animate and die
			sys.playWorldEffect("effects/monsters/teleport", location, '0 0 1');
			sys.playWorldEffect("effects/monsters/teleport_malfunction", location, '0 1 1');
			aiScriptedAnimWait(monster, "teleport_fail", 3, 1);
			monster.kill();
		}
	}
}


void main()
{
	thread mainBeamTop();

	thread blinkyTramLights("light_tramarrival");
	thread blinkyTramLights("light_tramarrivalb");
	thread blinkyTramLights("light_tramarrivalc");
	thread blinkyTramLights("light_tramarrivald");

	sys.fadeIn( '0 0 0', 2);	

	thread tramStop();
	thread Startpumping();
	thread potts();

	$vehicle_tram_reargun_1.lock(1);
	
	thread movingShaftStuff();
	thread turnExitBridge();
	
	$SAMSON.setTalkState ( TALK_WAIT ); 
	$SAMSON.enableHeal();
	$ARLINGTON.setTalkState ( TALK_WAIT ); 
	
	thread generators($gen_1);
	thread generators($gen_2);
}

// end namespace network1
} 