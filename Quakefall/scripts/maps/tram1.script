//----------------------------------------------------------------------
// tram1.script
//
// Lots of stuff blowin up!
//
// jshepard | june 04
//
//----------------------------------------------------------------------

#include "scripts/maps/tram/tramHub.script"


namespace map_tram1 {

// used for what dialogue that Cortez says updating the players objectives

float tram_rotated = 0; 
float track_repaired = 0;

// used to keep track of whether Cortez should try to ride the platfrom
float cortezAtTop = 0;



////////////////////////////////////////////////////////////////////////////////
// handles the whole end battle when the lights go out and the tram is ambushed
////////////////////////////////////////////////////////////////////////////////


void debug_relay(entity name)
{
	
	sys.println(name.getName());

}

/*------------------------------------------------
Bad explosion caught on camera.		mrenner
----------------------------------------------*/
void spawnInjuredMarine()
{
	aiScriptedAnimWait($injuredMarine, "explosion_injured", 4, 1);
	aiScriptedAnimLoop ( $injuredMarine, "explosion_injured_loop", 0 );
}	
void spawnExplosionMarine()
{
	aiScriptedAnimWait($explosionMarine, "explosion_assist", 4, 1);
	aiScriptedAnimLoop ( $explosionMarine, "explosion_assist_loop", 0 );
}
void cameraBattle()
{	
	$dummyCameraMan.show();
	$injuredMarine.show();
	$explosionMarine.show();

	$dummyCameraMan.setNeverDormant(1);
	$injuredMarine.setNeverDormant(1);
	$explosionMarine.setNeverDormant(1);



	$hurtMarineCam.bindToJoint($dummyCameraMan, "body", 1);	

	thread spawnInjuredMarine();
	thread spawnExplosionMarine();

	sys.wait(.2);	
	$injuredHelmet.show();
	sys.trigger ($cam_explosion);
	$injuredHelmet.applyImpulse($injuredHelmet,$injuredHelmet.getWorldOrigin(),'-7000 0 0');
	sys.trigger($hurtMarineFx);
	sys.wait(.1);

	$bloodSpot1.show();
	sys.wait(.2);
	$bloodSpot5.show();
	$bloodSpot2.show();
	sys.wait(.2);
	$bloodSpot3.show();
	sys.wait(.2);
	$bloodSpot4.show();
}
/*------------------------------------------------
Bad explosion caught on camera.		mrenner
----------------------------------------------*/

// moving beam thing stolen from storage 1 

void mainBeamTop()
{
	while(1)
	{
		

		// moves it to the bottom
		sys.trigger($beamBlastLight);
		$beamBlastFlare.show();
		sys.trigger($distortTop);
		setNewTimes( $beamBlast, 3 , 0 , 0 );
		$beamBlast.moveTo($beam_bottom);
		sys.waitFor($beamBlast);
		
		sys.trigger($beam_bottom_sound);
		
		// turns everything off in order to move it quickly to the top
		sys.trigger($beamBlastFx);	// off
		$beamBlastFlare.hide();		
		sys.trigger($beamBlastLight);
		sys.trigger($distortBottom);		
		
		// gets it up to the top quickly again 
		setNewTimes( $beamBlast, .1 , 0 , 0 );
		$beamBlast.moveTo( $beam_top );
		sys.waitFor($beamBlast);
		sys.wait(.1);

		sys.wait (3);

		// on and moves it again to the bottom taking longer 
		sys.trigger($beamBlastLight);
		sys.trigger($beamBlastFx);	// on
		$beamBlastFlare.show();
		setNewTimes( $beamBlast, 5 , 0 , 0 );
		$beamBlast.moveTo( $beam_bottom );
		sys.waitFor($beamBlast);
		
		sys.trigger($beam_bottom_sound);


		// gets it to the top again with a slight delay
		sys.trigger($beamBlastFx);	// off		
		$beamBlastFlare.hide();		
		sys.trigger($beamBlastLight);
		setNewTimes( $beamBlast, .1 , 0 , 0 );
		$beamBlast.moveTo( $beam_top );
		sys.waitFor($beamBlast);
		sys.wait(1.4);
		
		sys.trigger($beamBlastFx);	// on
	
		sys.wait (3);
	
	}
}


void fadeOutMusic1()	
{
	$flyer_music.fadeSound( SND_CHANNEL_ANY, -80, 10);
	sys.wait(10);
	$flyer_music.remove();
}


void fadeOutMusic2()	
{
	$cortez_music.fadeSound( SND_CHANNEL_ANY, -80, 10);
	sys.wait(10);
	$cortez_music.remove();
}







//////////////////////////////////////////////////////////////////////////
// gets the player bound to the tram gun for the ride out towards the end
/////////////////////////////////////////////////////////////////////////
void enterTramgun()	

{

	// called when player enters tram at end
	
	
	sys.waitFrame();
	// $player1.setWorldOrigin( $cortez_tram_gun.getWorldOrigin());
	
	
	$player1.enterVehicle( $cortez_tram_gun);
	$cortez_tram_gun.lock(1);	
	
	$fake_end_cortez.bind($cortez_arrive_tram_null);

	// update the objective given orginally on the map
	sys.trigger($opening_objective_complete);

	// get it unbound from the hub model above it
	$cortez_arrive_tram_null.unbind();
	$cortez_arrive_tram.playAnim(ANIMCHANNEL_ALL, "close");
	
		
	
	// cortez apologizes about the condition of the tram
	$cortez.lookAt( $null_entity );
	aiScriptedFaceWait ($fake_end_cortez, $cortez_driving_look_spot, 1 );	
	$cortez.lookAt( $cortez_driving_look_spot );
	
	
	sys.fadeOut( '0 0 0', 5.2);	
	aiSpeak( $fake_end_cortez, "lipsync_3" );
	aiScriptedAnimLoop($fake_end_cortez, "tram_driving_idle", 1);
	
	
	
		
	// opens the end doors
	
	
	sys.trigger ($south_gate_fake_door_east);
	$south_gate_frame.playAnim(ANIMCHANNEL_ALL, "open");
			
	
	
	
	// set everything up for the ride out
	setNewTimes( $cortez_arrive_tram_null , 14 , 3 , 0 );
	
	
	// tram should drive out in a straight line and hit the end level trigger
	$cortez_arrive_tram_null.moveTo($cortex_tram_leave_spot);
	
	sys.wait (6.2);
	
	// switches maps
	sys.trigger ($target_endlevel_1);
	
	// sys.waitFor($cortez_arrive_tram_null);
			
	
	
}

///////////////////////////////////////////////////////////////////
// east tram hub platform used as the last way to get on the tram
///////////////////////////////////////////////////////////////////

void east_hub_plat ()

{
	
	
	// unlocks the gun so the player can enter the level
	$cortez_tram_gun.lock(0);
	// sets up the warning trigger when the player is getting near the tram
	sys.trigger ($end_exit_warning);
	// makes the tram exit trigger active on the way out
	sys.trigger($end_trigger_out);
	
	
	setNewTimes ( $west_walkway_a,  3, .5, .5 );
	$west_walkway_a.rotateOnce ('0 0 -90');
	sys.waitFor($west_walkway_a);
	$west_walkway_b.move (EAST , 72);

}	


////////////////////////////////////////////////////////////
// stuff with marines at the beginning
///////////////////////////////////////////////////////////

void marines_in_battle()

{
	$other_marine.disableHeal();
	$tech_marine.disableHeal();
	$tech_marine.setTalkState(TALK_WAIT); 
	$other_marine.setTalkState(TALK_WAIT);


}

void marines_out_of_battle()

{
	$other_marine.enableHeal();
	$tech_marine.enableHeal();	

	$tech_marine.setTalkState(TALK_OK); 
	$other_marine.setTalkState(TALK_OK);



}

// after the player extends the bridge a trigger is active at the elevator bottom which calls this function

void bridge_combat_done ()

{

	sys.trigger($marines_passive);	
	
	sys.wait(1);
	
	// fades out the battle music
	// thread fadeOutMusic1();
	
	$other_marine.setLeader($null_entity);
	$tech_marine.setLeader($null_entity);
	
	
	if (isLivingEntity($tech_marine))
	{
		
			// 3_1_5_9_1 - Thanks for the help, Kane. We’ve got orders to keep this bridge secured. You can go on to the processing tower.
			$tech_marine.lookAt( $player1 );
			aiSpeakWait( $tech_marine, "lipsync_7" );	
			marines_out_of_battle();
			$tech_marine.lookAt( $null_entity );
	}
	
	
	else if (isLivingEntity($other_marine))
	{
			// 3_1_5_9_1_ALT - Thanks for the help, Kane. We’ve got orders to keep this bridge secured. You can go on to the processing tower.
			$other_marine.lookAt( $player1 );
			aiSpeakWait( $other_marine, "lipsync_5" );	
			marines_out_of_battle();
			$other_marine.lookAt( $null_entity );
	}
	
	sys.trigger( $ai_tether_bridgeDone_1 );
	sys.trigger( $ai_tether_bridgeDone_2 );
}




void marines_follow_player()


{
		
	
	// they shouldnt heal until after the bridge combat is done
	marines_in_battle();
	// two buddies can die now
	$other_marine.setKey("undying", 0 );
	$tech_marine.setKey("undying", 0 );
	
	sys.trigger ($door_no_tether);
	sys.trigger ($marines_aggresive);
	
	// vo_3_1_5_8_1 - Let’s head back outside and sweep the area. We’ve gotta secure the bridge. Kane, you lead.
	aiSpeakWait( $tech_marine, "lipsync_6" );	
	sys.trigger($door_no_tether);	
	
	$other_marine.setLeader($player1);
	$tech_marine.setLeader($player1);
	marines_in_battle();

		

}



void marines_guard_elevator ()

{
	
	
	aiScriptedFaceWait ($tech_marine, $player1, 1);
	$tech_marine.lookAt($player1);

	// Ha! We kicked their asses good!
	aiSpeakWait( $other_marine, "lipsync_4" );	
	
	// Okay, Kane. Head upstairs and find a way to extend the bridge to the hub area. We’ll stay here and guard your back. 
	aiSpeakWait( $tech_marine, "lipsync_5" );	
	
	marines_out_of_battle();
		

}



void go_to_elevator()
{

	
	aiScriptedTetherMove ($other_marine, $guarding_elevator);
	aiScriptedTetherMoveWait ($tech_marine, $guarding_elevator);
	sys.trigger ($player_by_elevator);
	
}

void guy_opening_door()
{
	
	// him using the gui unlocking the door
	
	// gets him to turn around and face the right way
	$other_marine.lookAt( $null_entity );
	aiScriptedStop ($other_marine);
		
	aiScriptedFaceWait( $other_marine , $other_marine_door_look_2, 1 );
	$other_marine.lookAt( $other_marine_door_look_2 );
	
	// the animation sequnce 
	
	aiScriptedAnimWait( $other_marine, "console_stand_start" , 4 , 0 );
	aiScriptedAnimWait( $other_marine, "console_stand_loop" , 4 , 0 );
	aiScriptedAnimWait( $other_marine, "console_stand_end" , 4 , 1 );
		
	aiScriptedStop ($other_marine);
	sys.waitFrame();	
		
	
	// aiScriptedAnimWait( $other_marine, "point_forward" , 4 , 1 );
	
	// aiScriptedAnimWait( $other_marine, "console_w_weapon" , 4 , 1 );
	
	// aiScriptedAnimWait( $other_marine, "use_gui_standing_start" , 4 , 0 );
	// aiScriptedAnimWait( $other_marine, "use_gui_standing_loop" , 4, 0  );
	
	// aiScriptedAnimWait( $other_marine, "use_gui_standing_end" , 4 , 1 );	
	
}

void marines_door_sequence()

{
	
	
	// Here. I scavanged this off a dead Strogg. It looks like it’d work on your lightning weapon.  
	
	aiScriptedFaceWait ($tech_marine, $player1, 1);
	$tech_marine.lookAt($player1);
	
	aiScriptedAnimLoop($tech_marine, "idle", 0 );		
	
	aiSpeakWait( $tech_marine, "lipsync_4" );
	thread guy_opening_door();
	
	// aiScriptedAnimWait($tech_marine, "ad_sgt_holding_wounded", 4, 1);
	
	// giving the weapon mod
	aiScriptedAnimWait($tech_marine, "recomp_mod_hyper", 10, true);	
	sys.trigger($give_light_mod);
	sys.trigger($weapon_mod_sound);	
	sys.waitFrame();
	$player1.selectWeapon( "weapon_lightninggun" );
	
	// Ready? Hit it!
	aiSpeakWait( $other_marine, "lipsync_3" );	
	sys.trigger ($marine_breach_door_sound);
		
	//unlock the door the marines are going through
	$marine_bust_door_a.lock( 0 );
	$marine_bust_door_b.lock( 0 );
	
	

	// gets the marines inside fighting
	sys.trigger ($marines_aggresive);
	sys.trigger ($marines_inside_1);
	sys.trigger ($marines_inside_1b);
	
	
}



void marines_take_door ()

{
	// battle music goes away
	thread fadeOutMusic1();
	
	// removes any tethering the guys have
	sys.trigger ($door_no_tether);
	// guys run to the door, tech marine take spot on south side, other guy opens door gui
	sys.trigger ($tech_marine_door_spot);
	// moves to in front of the GUI
	aiScriptedMoveWait( $other_marine , $other_marine_door_spot , 4 , 0 );
	
	// $other_marine.lookAt($other_marine_door_look); 
	aiScriptedFaceWait( $other_marine , $other_marine_door_look, 0 );
	
	// plays a cool scanning idle
	aiScriptedAnimLoop( $other_marine, "idle_scan_2" , 0 );
	// makes the trigger active by the door so the guyss can do the door sequence
	sys.trigger ($marines_waiting_at_door);	



}

/*
void dropOffCrush ()

{
	


	
	
	
	
}

*/ 


void dropOffNew()

{
	// landing 
	setNewTimes( $drop_ship_null , 4 , .2 , 2 );
	$drop_ship_null.startSpline( $drop_ship_path );
	sys.waitFor( $drop_ship_null );
	
	// thread dropShipDamageLand();
	// $ship_clip.bindToJoint ($drop_ship, "still", 1);	
	strogg_dropship::carrierLand( $drop_ship );

	// take off 
	
	// thread dropShipDamageLeave();
	setNewTimes( $drop_ship_null , 5 , 2 , 0 );
	$drop_ship.bind($drop_ship_null);
	$drop_ship_null.startSpline( $drop_ship_path_out );
	sys.waitFor( $drop_ship_null );

	$drop_ship_null.remove();
}




void intro_greeting ()

{
	
	
	sys.trigger($marines_passive);
	$tech_marine.lookAt( $null_entity );
	aiScriptedFaceWait ($tech_marine, $player1, 1);
	$tech_marine.lookAt($player1);
	aiScriptedAnimLoop($tech_marine, "conversation_1", 0 );		
	

	$other_marine.lookAt($null_entity);
	aiScriptedFaceWait ($other_marine, $player1, 1);
	$other_marine.lookAt($player1);
	aiScriptedAnimLoop($other_marine, "idle_weapon_1", 0 );		
			
	
	// Thanks for the assist, Kane. We were dropped into an ambush.
	aiSpeakWait( $other_marine, "lipsync_1" );
	// Yeah, you musta saw what the bastards did to the rest of our squad. Now we’re just trying to get out of here.
	aiSpeakWait( $tech_marine, "lipsync_1" );	
	// Kane, you’re probably looking to get to the next tower. 
	aiSpeakWait( $other_marine, "lipsync_2" );
	// get the player the new objective 
	sys.trigger ($extend_bridge_objective);
	
	// play the sound of the ship arriving
	sys.trigger ($ship_coming_sound);
		
	// gets them to look in the direction that the ship is coming
	/*
	$tech_marine.lookAt( $null_entity );
	aiScriptedFaceWait ($tech_marine, $look_ship_spot, 1);
	$other_marine.lookAt($null_entity);
	aiScriptedFaceWait ($other_marine, $look_ship_spot, 1);
	*/
	
	
	// Hear that . . . . that’s our ride out of this hell hole! 
	aiSpeakWait( $tech_marine, "lipsync_2" );
	
	// drop ship flys in
	thread dropOffNew();	

	// reaction to flyer coming in	
	
	sys.wait (1);
	
	aiScriptedAnim($tech_marine, "idle_startled_1", 4, 0 );		
	aiScriptedAnim($other_marine, "idle_startled_2", 4, 0 );		
	// Shit! It’s a Strogg transport! Look out!
	aiSpeakWait( $tech_marine, "lipsync_3" );	
	
	// triggers the music
	
	sys.trigger ($flyer_music);

	aiScriptedStop ($tech_marine);
	aiScriptedStop ($other_marine);
	sys.trigger($marines_aggresive);
	// they take cover from the drop ship
	sys.trigger ($strogg_drop_ship_defense);
	sys.trigger ($strogg_drop_ship_defense_2);
			


}


// THIS IS ALL THE INTRO BRIDGE STUFF


////////////////////////////////////////////////////////////////////////
// takes care of both the spinny bridge pieces moving up
////////////////////////////////////////////////////////////////////////


void IntroBridgeMove ( entity centerPiece, entity topPiece, entity botPiece, entity lipPiece, entity endPos )
{
	
	
	setNewTimes (centerPiece , 1.5, .5, .5);
	setNewTimes (topPiece , .5, .2, .2);
	setNewTimes (botPiece , .5, .2, .2);		
	setNewTimes (lipPiece , 1, .3, .3);		
	
	// main movement
	centerPiece.startSoundShader( "tram_bridge2_main_piece_move", SND_CHANNEL_ANY);
	centerPiece.rotateOnce ('0 180 0' );
	centerPiece.moveTo (endPos);
	sys.waitFor (centerPiece);
	
	
	// slight jolt at end
	centerPiece.startSoundShader( "tram_bridge2_snap", SND_CHANNEL_ANY);
	setNewTimes (centerPiece , .1, .2, .2);
	centerPiece.move (DOWN , 2);
	sys.waitFor (centerPiece);
	setNewTimes (centerPiece , .3, .1, .1);
	centerPiece.move (UP , 2);
	
	
	// flap pieces on the sides main movment
	topPiece.startSoundShader( "tram_bridge2_flap", SND_CHANNEL_ANY);
	topPiece.rotateOnce ('0 0 90');
	botPiece.rotateOnce ('0 -0 -90');
	sys.waitFor (topPiece);
	
	// slight bounce when the flaps come up
	topPiece.startSoundShader( "tram_bridge2_snap", SND_CHANNEL_ANY);
	setNewTimes (topPiece , .1, .05, .05);
	setNewTimes (botPiece , .1, .05, .05);
	topPiece.rotateOnce ('0 0 -3');
	botPiece.rotateOnce ('0 0 3');
	sys.waitFor (topPiece);
	setNewTimes (topPiece , .3, .1, .1);
	setNewTimes (botPiece , .3, .1, .1);
	topPiece.rotateOnce ('0 0 3');
	botPiece.rotateOnce ('0 0 -3');
	sys.waitFor (topPiece);
	
	// finally moves the lip piece out so it is a full bridge
	lipPiece.startSoundShader( "tram_bridge2_lip_piece", SND_CHANNEL_ANY);
	lipPiece.move (EAST , -32);


}
///////////////////////////////////////////////////////////////////////////
// this handles the walkway that rotates up - jersey
//////////////////////////////////////////////////////////////////////////
void IntroRampMove ()

{

	// moves the walkway up so it is level with the platform

	setNewTimes ($walk_way_outer_rim , 1, .5, .5);		
	
	
	$walk_way_outer_rim.startSoundShader( "tram_bridge2_ramp", SND_CHANNEL_ANY);
	$walk_way_outer_rim.moveTo ($intro_ramp_spot);
	sys.waitFor($walk_way_outer_rim);

	$walk_way_outer_rim.rotateOnce ('-13 0 0');
	sys.waitFor($walk_way_outer_rim);
	
	setNewTimes ($walk_way_outer_rim , .1, .05, .05);		
	
	$walk_way_outer_rim.startSoundShader( "tram_bridge2_snap", SND_CHANNEL_ANY);
	$walk_way_outer_rim.rotateOnce ('1 0 0');
	sys.waitFor ($walk_way_outer_rim);
	
	setNewTimes ($walk_way_outer_rim , .3, .01, .01);		
	$walk_way_outer_rim.rotateOnce ('-1 0 0');

	


}
/////////////////////////////////////////////////////////////////////////////
// function that calls and does everything - jersey
////////////////////////////////////////////////////////////////////////////

void extend_intro_bridge ()

{
	
	
	

	$intro_bridge_2_cover_south.decelTime( 0.5 );
	$intro_bridge_2_cover_south.accelTime( .5 );	
	$intro_bridge_2_cover_south.time(1);

	$intro_bridge_2_cover_north.decelTime( 0.5 );
	$intro_bridge_2_cover_north.accelTime( .5 );	
	$intro_bridge_2_cover_north.time(1);

	$intro_bridge_1_cover_south.decelTime( 0.5 );
	$intro_bridge_1_cover_south.accelTime( .5 );	
	$intro_bridge_1_cover_south.time(1);

	$intro_bridge_1_cover_north.decelTime( 0.5 );
	$intro_bridge_1_cover_north.accelTime( .5 );	
	$intro_bridge_1_cover_north.time(1);


	$intro_bridge_2_cover_south.startSoundShader( "tram_bridge2_metal_flaps", SND_CHANNEL_ANY);
	$intro_bridge_2_cover_south.rotateOnce ('0 0 135');
	$intro_bridge_2_cover_north.rotateOnce ('0 0 -135');
	sys.waitFor ($intro_bridge_2_cover_north);
	
	thread IntroBridgeMove ( $intro_bridge_2_center, $intro_bridge_2_north, $intro_bridge_2_south, $intro_bridge_2_front_lip, $intro_bridge_2_move);

	
	$intro_bridge_1_cover_south.startSoundShader( "tram_bridge2_metal_flaps", SND_CHANNEL_ANY);
	$intro_bridge_1_cover_south.rotateOnce ('0 0 135');
	$intro_bridge_1_cover_north.rotateOnce ('0 0 -135');
	sys.waitFor ($intro_bridge_1_cover_south);
	
	thread IntroBridgeMove ( $intro_bridge_1_center, $intro_bridge_1_north, $intro_bridge_1_south, $intro_bridge_1_front_lip, $intro_bridge_1_move);
	thread IntroRampMove();
	// puts in the aas obstacle so creatures can walk on the bridge, also puts a piece under the bridge so the marines don't go under there
	sys.trigger ($outside_monster_bridge); 
	sys.trigger ($outside_monster_bridge_under); 
	// update the players objective
	sys.trigger ($extend_bridge_objective_complete);
	// sys.trigger ($window_run_guy_spot);
	// is the window guy in view, start him running across the bridge to a different tether
	
	// sys.trigger ($window_guy_towards_bridge);
	
	
	// sets up the lower floor triggers along with the outside battle
	
	sys.trigger ($back_outside_1);
	sys.trigger ($back_outside_2);
	sys.trigger ($back_outside_3);
	// sets the lower trigger up so the marines will follow you out to the bridge area
	sys.trigger ($marine_follow_ready);
	// set up the outside bridge battle stuff so everything happens once the player is outside
	sys.trigger ($start_battle_outside_low);
	sys.trigger ($start_battle_outside_middle);
	sys.trigger ($start_battle_outside_high);	
	// this below is the trigger that will eventually kill the bridge spawner if the player rushes it, I kept it off in case the player somehow jumping triggered it accidently before raising the bridge
	sys.trigger ($killing_bridge_spawner);
	
	

}

///////////////////////////////////////////////////////////////////////////
// moves the broken track pieces around - jersey 
///////////////////////////////////////////////////////////////////////////


void BrokenHubTrack2()

{
	$btw_support_South_2.speed(192);
	$btw_support_South_2.accelTime(.6);
	$btw_support_South_2.decelTime(.6);

	while (1)
	
	{	
		$btw_support_South_2.move( SOUTH, 64 );
		sys.waitFor($btw_support_South_2);
		$btw_support_South_2.move( NORTH, 32 );
		sys.waitFor($btw_support_South_2);
		$btw_support_South_2.move( SOUTH, 32 );
		sys.waitFor($btw_support_South_2);
		$btw_support_South_2.move( NORTH, 64);
		sys.waitFor($btw_support_South_2);
	}
}

void BrokenHubTrack()

{
	// start the broken track sound
	sys.trigger ($track_malfunction_sound);
	$btw_support_South.speed(256);
	$btw_support_South.accelTime(.7);
	$btw_support_South.decelTime(.7);

	while (1)
	
	{	

		$btw_support_South.move( SOUTH, 128 );
		sys.waitFor($btw_support_South);
		$btw_support_South.move( NORTH, 64 );
		sys.waitFor($btw_support_South);
		$btw_support_South.move( SOUTH, 64 );
		sys.waitFor($btw_support_South);
		$btw_support_South.move( NORTH, 128);
		sys.waitFor($btw_support_South);
		
	}
}
/////////////////////////////////////////////////////////////////////
// returns the tracks to their normal position - jersey
////////////////////////////////////////////////////////////////////


void brokenHubTrackFixed ()
{
	// plays the complete sound
	sys.trigger ($repair_complete);
	
	// gets the monitors to update with the objective
	$broken_track_monitor_b.guiEvent("repair");
	
	// plays the PA sound saying the track is available
	sys.trigger ($track_repaired_pa);
	sys.trigger($repairBotsActivated);
	
	
	// removes the busted track sound and the warning sound
	$track_malfunction_sound.remove();	
	$malfunction_alarm.remove();
	// no more moving those pieces around
	sys.killthread( "BrokenHubTrack" );
	sys.killthread( "BrokenHubTrack2" );
	
	// reset the pieces to their normal spots
	$btw_support_South.moveTo($btw_support_South_fixed);
	$btw_support_South_2.moveTo($btw_support_South_2_fixed);
	$broken_track_warning_light_red.hide();
	sys.trigger ($broken_track_warning_light_green);
}
////////////////////////////////////////////////////////////
// starts tracks moving when player enters overlook in hub area - jersey
////////////////////////////////////////////////////////////
void start_broken_rail ()

{
	
	thread BrokenHubTrack();
	thread BrokenHubTrack2();

}



////////////////////////////////////////////////////////
// scorpian squad requesting evac 
///////////////////////////////////////////////////////
void scorpion_vo ()

{

	
	
	// gives player the opening objective
	sys.trigger($opening_objective);
	// HQ, this is Scorpion squad. We’ve taken heavy casualties and need an evac at the bridge extraction point. 
	radioChatterPlayWait ($intro_vo_3, "");
	// Scorpion, no evac units are in your immediate area. Secure the bridge control room and sit tight
	radioChatterPlayWait ($intro_vo_4, "");
	//  Secure the bridge? What the fuck with? There’s only two of us left. 
	radioChatterPlayWait ($intro_vo_5, "");
	// Do the best you can, Scorpion. An evac unit is en route. HQ, out.
	radioChatterPlayWait ($intro_vo_6, "");
	
	

}


////////////////////////////////////////////////////////
// generic thing that clears cortez tether and lets him follow the player
///////////////////////////////////////////////////////


void cortez_follow ()
{
	
	sys.trigger($cortez_no_tether);
	sys.waitFrame();
	$cortez.setLeader($player1);
		
}

////////////////////////////////////////////////////////
// cortez talking his lines while player is on elevator 
///////////////////////////////////////////////////////
void intro_cortez_vo ()
{
	// cortez talking about tram
	radioChatterPlayWait ($intro_vo_1, "");
	// morris responds
	radioChatterPlayWait ($intro_vo_2, "");
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// called from a gui to send the repair bots to fix the track - jersey
///////////////////////////////////////////////////////////////////////////////////////////////////


// stolen from hangar1 

float botsDone = 0; 

void botRepairs( entity bot , entity moveTarget1,  entity moveTarget2, entity moveTarget3, entity moveTarget4  )	

{
	
	// Activate entity
	sys.trigger( bot );
		
	// Move to position
	aiScriptedMoveWait( bot , moveTarget1 , 0 , 1 );
	aiScriptedMoveWait( bot , moveTarget2 , 0 , 1 );
	aiScriptedFaceWait( bot , $bots_fix_spot, 1 );
	// Repair!
	aiScriptedActionWait( bot , moveTarget2 , 0 );
	
	sys.wait( 1 );
	
	if( botsDone == 1 )	
	
		{
		thread brokenHubTrackFixed ();
		}
	
	botsDone++;
	
	// Move to safe position
	aiScriptedMoveWait( bot , moveTarget3 , 0 , 1 );
	aiScriptedMoveWait( bot , moveTarget4 , 0 , 1 );
	
	// entity temp3 = moveTarget.getTarget(2);
	// sys.println (bot.getName () + " final target is " + temp3.getName());
		
	
	bot.remove();
	
	// lights go off after bots return
	
	sys.trigger ($repair_bot_2_light);
				
	
}


void bots_fix_track ()

{

	// locks the doors so the player only has one way back using the elevator
	$no_back_track_door_a.lock( 1 );
	$no_back_track_door_b.lock( 1 );


	// sets up the elevator active along with the guis associated with it
	$construction_elevator.setGuiParm("noninteractive", "0");
	$bot_release_elev_upper.setGuiParm("noninteractive", "0");
	// this swaps guis out since the interactive flag doesnt seem to work
	$bot_release_elev_lower.show();
	$bot_release_elev_lower_1_off.hide();
	$bot_release_elev_lower.setGuiParm("noninteractive", "0");


	// starts the lights flashing inside the pipe
	
	sys.trigger ($repair_bot_2_light);
	// sets up the trigger that will get a fake cortez on the tram after the player has completed his goal
	sys.trigger ($swap_cortez_trigger);
	
	
	// PA annoucment of bots going to repair track
	sys.trigger ($repair_units_pa);
	// gets the repair bots to go and fix the track
	
	
	thread botRepairs ($repair_bot_one, $repair_bot_t1, $repair_bot_t2, $repair_bot_t3, $repair_bot_t4 );
	sys.wait(.5);
	
	botRepairs ($repair_bot_two, $repair_bot_b1, $repair_bot_b2, $repair_bot_b3, $repair_bot_b4 );
		
	
		
	
	
	// locks the doors so the player only has one way back using the elevator
	$no_back_track_door_a.lock( 1 );
	$no_back_track_door_b.lock( 1 );
	// get the tracks back to their normal position
	sys.trigger ($cortez_meet_player);
	// start the bridge raising sequence so player can get on the rotated tram
	east_hub_plat();
	
	


}
// cortez's line about the player leading the way 

void cortez_lead_line()

{
	// wait for save game
	sys.wait(1);
	// he says his new line about the player leading the way
	aiSpeakWait( $cortez, "lipsync_13" );
	cortez_follow();
	$cortez.setTalkState(TALK_OK); 
	
}


// swaps the hub control room cortez with a fake cortez bound to the tram so he doesnt have to navigate back

void swap_cortez()

{

	sys.trigger($fake_end_cortez);
	$cortez.hide();
			
	
}

void cortez_scan ()

{
	
	aiScriptedAnimLoop($cortez, "idle_scan_2", 1);
		
	
}



///////////////////////////////////////////////////////////////////////////////////////////////////
// called when player is near window showing cortez arriving and opening up on some strogg - jersey
///////////////////////////////////////////////////////////////////////////////////////////////////

void cortez_arrives ()
{	
		
	// spawns cortez in
	sys.trigger ($cortez);
	// tram pulls in with Cortez on it	
	
	// gets the door to open	
	
	sys.trigger ($west_gate_fake_door_north);
	$west_gate_frame.playAnim(ANIMCHANNEL_ALL, "open");
	
		
	setNewTimes( $cortez_arrive_tram_null, 2 , 1 , 2 );
	$cortez_arrive_tram_null.moveTo($cortex_tram_arrive_spot);
	
	// idle of cortez driving the tram 
	aiScriptedAnimLoop($cortez, "tram_driving_idle", 1);
			
	
	sys.waitFor($cortez_arrive_tram_null);
	aiScriptedStop ($cortez);	
	// opens the tram gates
	$cortez_arrive_tram.playAnim(ANIMCHANNEL_ALL, "open");

	// walkway extends 
	$hub_walkway.moveTo($hub_walkway_move_spot);
	sys.waitFor ($hub_walkway);
	
	
	// gets the door to close
	
	
	sys.trigger ($west_gate_fake_door_north);
	$west_gate_frame.playAnim(ANIMCHANNEL_ALL, "close");
		
			
						
	// cortez is free and strogg attack him, he is set to undying		
	sys.trigger($cortez_aas_blocker);
	$cortez.unbind();
	
	sys.trigger ($cortez_mad);
	sys.trigger ($cortez_run_off_tram);
	
	
	// aiSpeakWait( $cortez, "lipsync_6" );
	sys.trigger ($cortez_mad);
	sys.trigger ($cortez_target_2_teth);
	
	
	
	// gets the tram ready to spin with the hub model
	$cortez_arrive_tram_null.bindToJoint( $mainTramHub, "hub", 1 );	
	sys.wait (4);
	// cortez_scan();

}

void cortez_meets_player_anim ()
{

	// sys.wait (.5);
	
	aiScriptedStop ($cortez);		
	$cortez.lookAt($player1);
	aiScriptedFaceWait ($cortez, $player1, 1);
	aiScriptedAnimWait($cortez, "idle_weapon_3_start", 48, 0);
	aiScriptedAnimLoop($cortez, "idle_weapon_3_loop", 0);
	sys.wait (13);
	aiScriptedAnim($cortez, "idle_weapon_3_end", 24, 1);
	
	
	

}


///////////////////////////////////////////////////////////////
// this is for when the player meets Cortez after he first arrives - jersey
//////////////////////////////////////////////////////////////
void cortez_meets_player ()
{
	
	
	
	// sys.killthread( "map_tram1::cortez_scan");
	
	sys.wait(1);
	sys.trigger ($cortez_become_passive);
		
	thread cortez_meets_player_anim ();
	
		
	aiSpeakWait( $cortez, "lipsync_1" );
	sys.wait (1);			
	aiSpeakWait( $cortez, "lipsync_2" );	
	sys.wait (1);
	
	
		
	// give the player his objective
	sys.trigger($orientTramHub);	
	
	
	// gets cortez to the door so the player knows where to go
	sys.trigger ($cortez_door_spot_tether);
	// start the ai trigger once so we know when he is at the proper spot
	sys.trigger ($is_cortez_by_door);
		
		
		     
}

float cortez_looking = 1;

void cortez_scan_monitor ()
{
// loop for cortez looking back and forth between two points on the monitor

	
	while (cortez_looking == 1)
	{
		if (cortez_looking == 1)
		{
			$cortez.lookAt( $cortez_hub_look );
			sys.wait( 2 + sys.random( 4 ) );
		}
			
		if (cortez_looking == 1)			
		{
		
			$cortez.lookAt( $cortez_hub_look_2 );
			sys.wait( 2 + sys.random( 3 ) );
		}
				
					
	}	
	
	
}

void cortez_look_at_monitor ()

{
	
	// faces the big gui and animates 
	
	aiScriptedFaceWait ($cortez, $cortez_hub_look_center, 1);
		
	thread cortez_scan_monitor();	
	aiScriptedAnimWait($cortez, "idle_weapon_2_start", 12, 0);
	aiScriptedAnimLoop($cortez, "idle_weapon_2", 0);
		
	
}


void  player_in_hub_control_room()


{
	
	
	$cortez.setTalkState(TALK_WAIT); 
	// 3_1_5_38_1 - Excellent – this looks to be the hub control room. See if you can find some way to rotate the tram from here.	
	aiSpeakWait( $cortez, "lipsync_10" );
		
	
	
}





void at_hub_controls()

{

	// gets him to his spot and he doesnt follow the player anymore
	
	aiScriptedMoveWait( $cortez, $cortez_hub_spot, 12, 1 );
	sys.trigger ($cortez_become_passive); 
	$cortez.setLeader($null_entity); // don't follow Kane
	thread cortez_look_at_monitor();
	
	// make the room trigger active so Cortez talks while the player is in there
	sys.trigger ($player_in_cortez_room);	
			
	// the monitor moves down into place and becomes active
	setNewTimes( $hub_monitor_arm, 1.2 , .3 , .3 );
	$hub_monitor_arm.moveTo ($hub_monitor_arm_down_spot);
	sys.waitFor($hub_monitor_arm);
	$hub_monitor_b.setGuiParm("noninteractive", "0");
	
	


}

// extends the ladder so the player can get back to the hub overlook area , happens as soon as he walks out of the hub control room

void ladder_down ()

{
	
	setNewTimes( $ladder_piece, 5 , 1.5 , 1.5 );
	
	// opens the door and starts the alarm light
	sys.trigger ($ladder_hatch);
	sys.trigger ($ladder_light);
	
	$ladder_piece.moveTo ($ladder_dest);
	sys.waitFor($ladder_piece);
	
	// shuts the alarm light off
	sys.trigger ($ladder_light);
		
	
}
//////////////////////////////////////////////////////////////////////////////////
// Cortez pointing out the next area over the player, happens as he is talking
/////////////////////////////////////////////////////////////////////////////////

void cortez_points ()
{
	sys.wait(4);
	aiScriptedAnim($cortez, "point_left", 12, 1);

}

////////////////////////////////////////////////////////////////////////
// simple funciton that rotates the hub to the new dir for way out - jersey
///////////////////////////////////////////////////////////////////////
void spin_tram_hub ()

{
	
	
	// swaps the monitor out with a staic one
	$explosion_monitor_off.show();
	$explosion_monitor_on.hide();
	
	// removes the marines who were on the camera view in the previous room
	$dummyCameraMan.remove();
	$injuredMarine.remove();
	$explosionMarine.remove();
		
	
	
	// lock the doors in back of the player so he doesnt backtrack by mistake
	$hub_door_7a.lock(1);
	$hub_door_7b.lock(1);
	// this locks the lower doors that the player used in order to get to the hub	
	$hub_door1a.lock(1);
	$hub_door1b.lock(1);


	// disconnections the track section that was used on the way in
	$east_connection.move (WEST, -160 );	 
	// the way Cortez got off the tram shouldnt have AAS anymore
	// sys.trigger($cortez_aas_blocker);
	// move the walkway back so the tram doesnt hit it while rotating
	$hub_walkway.moveTo($hub_walkway_move_return); 
	sys.waitFor ($hub_walkway); 
	// animation of hub thing spinning
	$mainTramHub.playAnim(ANIMCHANNEL_ALL, "toSouthNorth"); 
	// this is the doors right at the gui switch for the tram hub rotation
	$hub_door_new1.lock( 0 );
	$hub_door_new2.lock( 0 );
	sys.trigger($hub_door_new1);
	
	


	//  triggers the done moving sound
	sys.trigger ($hub_done_moving_sound);
	// plays the PA sound
	sys.trigger ($tram_reroute_sound);
	// update the players objective
	sys.trigger ($tramHubOriented); 
	sys.wait (.7);
	
	// starts the rail busted sequence
	start_broken_rail();
	// starts both guis showing busted track sequence
	$hub_monitor_a.guiEvent("broken");
	$broken_track_monitor_b.guiEvent("broken");
	
	// plays the track broken PA sound
	sys.trigger ($track_malfunction);

	cortez_looking = 0;
	// sys.killthread ("cortez_scan_monitor");		
	sys.killthread ("cortez_look_at_monitor");
	
		
	$cortez.lookAt( $null_entity );
	aiScriptedAnimWait($cortez, "idle_weapon_2_end", 12, 1);
	aiScriptedFaceWait($cortez, $cortez_hub_away_from_monitor, 1);
	$cortez.lookAt( $player1 );
	
	// Very good, Kane. The tram is now facing the right direction – but it appears the track is damaged. 
	aiSpeakWait( $cortez, "lipsync_11" );
	// There is a door leading to a construction site below the tram. Head there and locate some repair bots to fix the track. I will remain here and guard the tram. 
	thread cortez_points();
	aiSpeakWait( $cortez, "lipsync_12" );
	$cortez.setTalkState(TALK_OK); 
	
	$hub_door1a_1.lock( 0 );
	$hub_door1b_1.lock( 0 );
	
	sys.wait (1);
	sys.trigger ($activateRepairBots);


}

////////////////////////////////////////////////////////////////////////////////
// Cortez some stuff to liven up the ride on the way to the ambush
////////////////////////////////////////////////////////////////////////////////


void lines_on_way_to_ambush ()
{

	//  Stay sharp, Kane. We will no doubt have ‘issues’ getting through the hot zone on the way to the Processing Tower. 
	sys.fadeOut( '0 0 0', 5.2);	
	aiSpeakWait( $cortez, "lipsync_4" );
	
	
	
	// switches maps
	sys.trigger ($target_endlevel_1);


}



//////////////////////////////////////////
//Swinging pendulum pipe for bridge area
/////////////////////////////////////////

void new_area_swing_thing()	

{

	$new_area_swing_thing_point.sway (1.6, 0, '0 2 4');
}

////////////////////////////////////////////////////////////////
// Tram that drives underneath the player on the way to the hub
////////////////////////////////////////////////////////////////

void drive_by_tram_1 ()

{

	
	// removes the scorpion squad guys who were waiting for the ship
	
	$tech_marine.remove();
	$other_marine.remove();
	
	// moving tram stuff
	
	setNewTimes( $drive_by_tram_1_null , 10 , 1 , 1 );
	
	
	// spawns the version of Cortez in
	sys.trigger ($drive_by_tram_cortez);
	
	// turns on the sound bound to the mover
	sys.trigger ($drive_by_tram_1_sound);
	
	// opens the doors before starting the tram
	sys.trigger ($drive_by_tram_doors_a1);
	sys.trigger ($drive_by_tram_doors_b_1);
	sys.waitFor ($drive_by_tram_doors_a1);

	$drive_by_tram_1_null.setAngles ('0 90 0');
	$drive_by_tram_1_null.setWorldOrigin ($drive_by_tram_1.getWorldOrigin());		
			
	$drive_by_tram_1_null.startSpline( $drive_by_tram_1 );
	sys.waitFor ($drive_by_tram_1_null);
	
	// closes the door after it gets through
	
	sys.trigger ($drive_by_tram_doors_a1);
	sys.trigger ($drive_by_tram_doors_b_1);
	
	// turns off the sound and removes cortez
	sys.waitFor ($drive_by_tram_doors_a1);
	sys.trigger ($drive_by_tram_1_sound);
	$drive_by_tram_cortez.hide();
		
		
	
}




//=============================================
//
//	Unfolding bridge start		mrenner	
//
//=============================================

void bindToPiston()
{
	$wing_rt_south_1.bind($bridge_piston_rt_1);
	$wing_rt_north_1.bind($bridge_piston_rt_1);

	$wing_rt_south_2.bind($bridge_piston_rt_2);
	$wing_rt_north_2.bind($bridge_piston_rt_2);

	$wing_rt_south_3.bind($bridge_piston_rt_3);
	$wing_rt_north_3.bind($bridge_piston_rt_3);

	$wing_rt_south_4.bind($bridge_piston_rt_4);
	$wing_rt_north_4.bind($bridge_piston_rt_4);

	$wing_rt_south_5.bind($bridge_piston_rt_5);
	$wing_rt_north_5.bind($bridge_piston_rt_5);

	$wing_rt_south_6.bind($bridge_piston_rt_6);
	$wing_rt_north_6.bind($bridge_piston_rt_6);

	$wing_rt_south_7.bind($bridge_piston_rt_7);
	$wing_rt_north_7.bind($bridge_piston_rt_7);

	$wing_rt_south_8.bind($bridge_piston_rt_8);
	$wing_rt_north_8.bind($bridge_piston_rt_8);
}

void bindToPivot()
{
	$wing_rt_south_1.bind($origin_south_1);
	$wing_rt_north_1.bind($origin_north_1);

	$wing_rt_south_2.bind($origin_south_2);
	$wing_rt_north_2.bind($origin_north_2);

	$wing_rt_south_3.bind($origin_south_3);
	$wing_rt_north_3.bind($origin_north_3);

	$wing_rt_south_4.bind($origin_south_4);
	$wing_rt_north_4.bind($origin_north_4);

	$wing_rt_south_5.bind($origin_south_1);
	$wing_rt_north_5.bind($origin_north_1);

	$wing_rt_south_6.bind($origin_south_2);
	$wing_rt_north_6.bind($origin_north_2);

	$wing_rt_south_7.bind($origin_south_3);
	$wing_rt_north_7.bind($origin_north_3);

	$wing_rt_south_8.bind($origin_south_4);
	$wing_rt_north_8.bind($origin_north_4);
}

void pillarsDown()
{
	$pillar_1.time(.5);
	$pillar_1.accelTime(.4);	
	$pillar_2.time(.5);
	$pillar_2.accelTime(.4);
	$origin_pillar_1.time(.5);
	$origin_pillar_2.time(.5);

	$pillar_1.move( DOWN, 88 );
	$pillar_2.move( DOWN, 88 );
	$origin_pillar_1.rotateOnce( '0 450 0' );
	$origin_pillar_2.rotateOnce( '0 450 0' );
	sys.waitFor($pillar_1);
	
	$origin_pillar_1.time(1);
	$origin_pillar_2.time(1);
	$origin_pillar_1.rotateOnce( '0 90 0' );
	$origin_pillar_2.rotateOnce( '0 90 0' );
	sys.waitFor($origin_pillar_1);

	$pillar_1.move( DOWN, 167 );
	$pillar_2.move( DOWN, 167 );
	
}

void pillarsUp()
{
	$pillar_1.time(1);
	$pillar_1.decelTime(.25);
	$pillar_2.time(1);
	$pillar_2.decelTime(.25);

	$origin_pillar_1.time(1);
	$origin_pillar_1.decelTime(.25);
	$origin_pillar_2.time(1);
	$origin_pillar_2.decelTime(.25);

	$pillar_1.startSoundShader( "tram_bridge_pillar1", SND_CHANNEL_ANY );
	$pillar_2.startSoundShader( "tram_bridge_pillar1", SND_CHANNEL_ANY );
	$pillar_1.move( UP, 167 );
	$pillar_2.move( UP, 167 );
	sys.waitFor($pillar_1);

	$origin_pillar_1.startSoundShader( "tram_bridge_pillar2", SND_CHANNEL_ANY );
	$origin_pillar_2.startSoundShader( "tram_bridge_pillar2", SND_CHANNEL_ANY );
	$origin_pillar_1.rotateOnce( '0 90 0' );
	$origin_pillar_2.rotateOnce( '0 90 0' );
	sys.waitFor($origin_pillar_1);
	
	$pillar_1.startSoundShader( "tram_bridge_pillar3", SND_CHANNEL_ANY );
	$pillar_2.startSoundShader( "tram_bridge_pillar3", SND_CHANNEL_ANY );
	$pillar_1.move( UP, 88 );
	$pillar_2.move( UP, 88 );

	$origin_pillar_1.rotateOnce( '0 450 0' );
	$origin_pillar_2.rotateOnce( '0 450 0' );
}

void bridgeUnfold1()
{
	$origin_piston_rt_1.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
	$origin_piston_rt_5.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
	$origin_piston_rt_1.rotateOnce( '90 0 0' );
	$origin_piston_rt_5.rotateOnce( '-90 0 0' );	
	sys.waitFor($origin_piston_rt_1);
	
	$wing_rt_north_1.bind($origin_north_1);
	$wing_rt_north_5.bind($origin_north_1);	
	$wing_rt_south_1.bind($origin_south_1);
	$wing_rt_south_5.bind($origin_south_1);	

	$origin_piston_rt_1.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_piston_rt_5.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_north_1.rotateOnce( '0 0 80' );
	$origin_south_1.rotateOnce( '0 0 -80' );
	sys.waitFor($origin_north_1);
	$wing_rt_north_1.bind($origin_piston_rt_1);
	$wing_rt_south_1.bind($origin_piston_rt_1);
	$wing_rt_north_5.bind($origin_piston_rt_5);	
	$wing_rt_south_5.bind($origin_piston_rt_5);	
	
	$bridge_clip.show();
	$origin_piston_rt_1.startSoundShader( "tram_bridge_wings3", SND_CHANNEL_ANY );
	$origin_piston_rt_5.startSoundShader( "tram_bridge_wings3", SND_CHANNEL_ANY );
	$origin_piston_rt_1.rotateOnce( '0 0 -720' );
	$origin_piston_rt_5.rotateOnce( '0 0 -720' );	
}
void bridgeUnfold2()
{
	$origin_piston_rt_2.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
	$origin_piston_rt_6.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
	$origin_piston_rt_2.rotateOnce( '90 0 0' );
	$origin_piston_rt_6.rotateOnce( '-90 0 0' );	
	sys.waitFor($origin_piston_rt_2);

	$wing_rt_north_2.bind($origin_north_2);
	$wing_rt_north_6.bind($origin_north_2);	
	$wing_rt_south_2.bind($origin_south_2);
	$wing_rt_south_6.bind($origin_south_2);	
	$origin_piston_rt_2.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_piston_rt_6.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_north_2.rotateOnce( '0 0 80' );
	$origin_south_2.rotateOnce( '0 0 -80' );
	sys.waitFor($origin_north_2);
	$wing_rt_north_2.bind($origin_piston_rt_2);
	$wing_rt_south_2.bind($origin_piston_rt_2);
	$wing_rt_north_6.bind($origin_piston_rt_6);	
	$wing_rt_south_6.bind($origin_piston_rt_6);	

	$origin_piston_rt_2.startSoundShader( "tram_bridge_wings3", SND_CHANNEL_ANY );
	$origin_piston_rt_6.startSoundShader( "tram_bridge_wings3", SND_CHANNEL_ANY );
	$origin_piston_rt_2.rotateOnce( '0 0 -720' );
	$origin_piston_rt_6.rotateOnce( '0 0 -720' );	
}
void bridgeUnfold3()
{
//	$origin_piston_rt_3.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
//	$origin_piston_rt_7.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
	$origin_piston_rt_3.rotateOnce( '90 0 0' );
	$origin_piston_rt_7.rotateOnce( '-90 0 0' );	
	sys.waitFor($origin_piston_rt_3);

	$wing_rt_north_3.bind($origin_north_3);
	$wing_rt_north_7.bind($origin_north_3);	
	$wing_rt_south_3.bind($origin_south_3);
	$wing_rt_south_7.bind($origin_south_3);	
//	$origin_piston_rt_3.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
//	$origin_piston_rt_7.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_north_3.rotateOnce( '0 0 80' );
	$origin_south_3.rotateOnce( '0 0 -80' );
	sys.waitFor($origin_north_3);
	$wing_rt_north_3.bind($origin_piston_rt_3);
	$wing_rt_south_3.bind($origin_piston_rt_3);
	$wing_rt_north_7.bind($origin_piston_rt_7);	
	$wing_rt_south_7.bind($origin_piston_rt_7);	

//	$origin_piston_rt_3.startSoundShader( "tram_bridge_wings3", SND_CHANNEL_ANY );
//	$origin_piston_rt_7.startSoundShader( "tram_bridge_wings3", SND_CHANNEL_ANY );
	$origin_piston_rt_3.rotateOnce( '0 0 -720' );
	$origin_piston_rt_7.rotateOnce( '0 0 -720' );	
}

void bridgeUnfold4()
{
//	$origin_piston_rt_4.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
//	$origin_piston_rt_8.startSoundShader( "tram_bridge_wings1", SND_CHANNEL_ANY );
	$origin_piston_rt_4.rotateOnce( '90 0 0' );
	$origin_piston_rt_8.rotateOnce( '-90 0 0' );	
	sys.waitFor($origin_piston_rt_4);

	$wing_rt_north_4.bind($origin_north_4);
	$wing_rt_north_8.bind($origin_north_4);	
	$wing_rt_south_4.bind($origin_south_4);
	$wing_rt_south_8.bind($origin_south_4);	

//	$origin_piston_rt_4.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
//	$origin_piston_rt_8.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_north_4.rotateOnce( '0 0 80' );
	$origin_south_4.rotateOnce( '0 0 -80' );
	sys.waitFor($origin_north_4);
	$wing_rt_north_4.bind($origin_piston_rt_4);
	$wing_rt_south_4.bind($origin_piston_rt_4);
	$wing_rt_north_8.bind($origin_piston_rt_8);	
	$wing_rt_south_8.bind($origin_piston_rt_8);	
//	$origin_piston_rt_4.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
//	$origin_piston_rt_8.startSoundShader( "tram_bridge_wings2", SND_CHANNEL_ANY );
	$origin_piston_rt_4.rotateOnce( '0 0 -720' );
	$origin_piston_rt_8.rotateOnce( '0 0 -720' );	
}

void bridge1_up()
{
	$origin_piston_rt_1.time(1);
	$origin_piston_rt_1.decelTime(.25);
	$origin_piston_rt_5.time(1);
	$origin_piston_rt_5.decelTime(.25);

	$origin_piston_rt_1.move( UP, 167 );
	$origin_piston_rt_5.move( UP, 167 );	
	sys.waitFor($origin_piston_rt_1);
	
	$origin_piston_rt_1.rotateOnce( '0 0 100' );
	$origin_piston_rt_5.rotateOnce( '0 0 100' );
	sys.waitFor($origin_piston_rt_1);

	$origin_piston_rt_1.move( UP, 88 );
	$origin_piston_rt_5.move( UP, 88 );	
	sys.waitFor($origin_piston_rt_1);

	$origin_piston_rt_1.startSoundShader( "tram_bridge_pillar1", SND_CHANNEL_ANY );
	$origin_piston_rt_5.startSoundShader( "tram_bridge_pillar1", SND_CHANNEL_ANY );
	
	$origin_piston_rt_1.move( SOUTH, 22 );
	$origin_piston_rt_5.move( SOUTH, 22 );	

}
void bridge2_up()
{
	$origin_piston_rt_2.time(1);
	$origin_piston_rt_2.decelTime(.25);
	$origin_piston_rt_6.time(1);
	$origin_piston_rt_6.decelTime(.25);
	
	$origin_piston_rt_2.move( UP, 167 );
	$origin_piston_rt_6.move( UP, 167 );	
	sys.waitFor($origin_piston_rt_2);
	
	$origin_piston_rt_2.rotateOnce( '0 0 -100' );
	$origin_piston_rt_6.rotateOnce( '0 0 -100' );
	sys.waitFor($origin_piston_rt_2);

	$origin_piston_rt_2.move( UP, 88 );
	$origin_piston_rt_6.move( UP, 88 );	
	sys.waitFor($origin_piston_rt_2);

	$origin_piston_rt_2.startSoundShader( "tram_bridge_pillar1", SND_CHANNEL_ANY );
	$origin_piston_rt_6.startSoundShader( "tram_bridge_pillar1", SND_CHANNEL_ANY );

	$origin_piston_rt_2.move( NORTH, 22 );
	$origin_piston_rt_6.move( NORTH, 22 );	
	
}
void bridge3_up()
{
	$origin_piston_rt_3.time(1);
	$origin_piston_rt_3.decelTime(.25);
	$origin_piston_rt_7.time(1);
	$origin_piston_rt_7.decelTime(.25);

	$origin_piston_rt_3.move( UP, 167 );
	$origin_piston_rt_7.move( UP, 167 );	
	sys.waitFor($origin_piston_rt_3);
	
	$origin_piston_rt_3.rotateOnce( '0 0 100' );
	$origin_piston_rt_7.rotateOnce( '0 0 100' );
	sys.waitFor($origin_piston_rt_3);

	$origin_piston_rt_3.move( UP, 88 );
	$origin_piston_rt_7.move( UP, 88 );	
	sys.waitFor($origin_piston_rt_3);
	
	$origin_piston_rt_3.move( SOUTH, 22 );
	$origin_piston_rt_7.move( SOUTH, 22 );	

}
void bridge4_up()
{
	$origin_piston_rt_4.time(1);
	$origin_piston_rt_4.decelTime(.25);
	$origin_piston_rt_8.time(1);
	$origin_piston_rt_8.decelTime(.25);

	$origin_piston_rt_4.move( UP, 167 );
	$origin_piston_rt_8.move( UP, 167 );	
	sys.waitFor($origin_piston_rt_4);
	
	$origin_piston_rt_4.rotateOnce( '0 0 -100' );
	$origin_piston_rt_8.rotateOnce( '0 0 -100' );
	sys.waitFor($origin_piston_rt_4);

	$origin_piston_rt_4.move( UP, 88 );
	$origin_piston_rt_8.move( UP, 88 );	
	sys.waitFor($origin_piston_rt_4);
	
	$origin_piston_rt_4.move( NORTH, 22 );
	$origin_piston_rt_8.move( NORTH, 22 );	
}

void bridge1_dn()
{
	$origin_piston_rt_1.time(.5);
	$origin_piston_rt_1.accelTime(.4);
	$origin_piston_rt_5.time(.5);
	$origin_piston_rt_5.accelTime(.4);

	$origin_piston_rt_1.rotateOnce( '-90 0 0' );
	$origin_piston_rt_5.rotateOnce( '90 0 0' );
	sys.waitFor($origin_piston_rt_1);
	$origin_piston_rt_1.move( NORTH, 22 );
	$origin_piston_rt_5.move( NORTH, 22 );	
	sys.waitFor($origin_piston_rt_1);

	thread pillarsDown();
	
	$origin_piston_rt_1.move( DOWN, 88 );
	$origin_piston_rt_5.move( DOWN, 88 );	
	sys.waitFor($origin_piston_rt_1);
	
	$origin_piston_rt_1.rotateOnce( '0 0 -100' );
	$origin_piston_rt_5.rotateOnce( '0 0 -100' );
	sys.wait(1);

	$origin_piston_rt_1.move( DOWN, 167 );
	$origin_piston_rt_5.move( DOWN, 167 );	

}
void bridge2_dn()
{
	$origin_piston_rt_2.time(.5);
	$origin_piston_rt_2.accelTime(.4);
	$origin_piston_rt_6.time(.5);
	$origin_piston_rt_6.accelTime(.4);

	$origin_piston_rt_2.rotateOnce( '-90 0 0' );
	$origin_piston_rt_6.rotateOnce( '90 0 0' );	
	sys.waitFor($origin_piston_rt_2);
	$origin_piston_rt_2.move( SOUTH, 22 );
	$origin_piston_rt_6.move( SOUTH, 22 );	
	sys.waitFor($origin_piston_rt_2);
	
	$origin_piston_rt_2.move( DOWN, 88 );
	$origin_piston_rt_6.move( DOWN, 88 );	
	sys.waitFor($origin_piston_rt_2);
	
	$origin_piston_rt_2.rotateOnce( '0 0 100' );
	$origin_piston_rt_6.rotateOnce( '0 0 100' );
	sys.wait(1);

	$origin_piston_rt_2.move( DOWN, 167 );
	$origin_piston_rt_6.move( DOWN, 167 );	

}
void bridge3_dn()
{
	$origin_piston_rt_3.time(.5);
	$origin_piston_rt_3.accelTime(.4);
	$origin_piston_rt_7.time(.5);
	$origin_piston_rt_7.accelTime(.4);
	
	$origin_piston_rt_3.rotateOnce( '-90 0 0' );
	$origin_piston_rt_7.rotateOnce( '90 0 0' );
	sys.waitFor($origin_piston_rt_3);
	$origin_piston_rt_3.move( NORTH, 22 );
	$origin_piston_rt_7.move( NORTH, 22 );	
	sys.waitFor($origin_piston_rt_3);	
	
	thread pillarsDown();

	$origin_piston_rt_3.move( DOWN, 88 );
	$origin_piston_rt_7.move( DOWN, 88 );	
	sys.waitFor($origin_piston_rt_3);
	
	$origin_piston_rt_3.rotateOnce( '0 0 -100' );
	$origin_piston_rt_7.rotateOnce( '0 0 -100' );
	sys.wait(1);

	$origin_piston_rt_3.move( DOWN, 167 );
	$origin_piston_rt_7.move( DOWN, 167 );	

}
void bridge4_dn()
{
	$origin_piston_rt_4.time(.5);
	$origin_piston_rt_4.accelTime(.4);
	$origin_piston_rt_8.time(.5);
	$origin_piston_rt_8.accelTime(.4);

	$origin_piston_rt_4.rotateOnce( '-90 0 0' );
	$origin_piston_rt_8.rotateOnce( '90 0 0' );	
	sys.waitFor($origin_piston_rt_4);
	$origin_piston_rt_4.move( SOUTH, 22 );
	$origin_piston_rt_8.move( SOUTH, 22 );	
	sys.waitFor($origin_piston_rt_4);

	$origin_piston_rt_4.move( DOWN, 88 );
	$origin_piston_rt_8.move( DOWN, 88 );	
	sys.waitFor($origin_piston_rt_4);
	
	$origin_piston_rt_4.rotateOnce( '0 0 100' );
	$origin_piston_rt_8.rotateOnce( '0 0 100' );
	sys.wait(1);

	$origin_piston_rt_4.move( DOWN, 167 );
	$origin_piston_rt_8.move( DOWN, 167 );	

}

void foldWings()
{
	$origin_north_1.time(.5);
	$origin_north_2.time(.5);	
	$origin_north_3.time(.5);
	$origin_north_4.time(.5);

	$origin_south_1.time(.5);
	$origin_south_2.time(.5);
	$origin_south_3.time(.5);
	$origin_south_4.time(.5);

	$origin_north_1.decelTime(.4);
	$origin_north_1.decelTime(.4);
	$origin_north_1.decelTime(.4);
	$origin_north_1.decelTime(.4);
	
	$origin_south_1.decelTime(.4);
	$origin_south_2.decelTime(.4);
	$origin_south_3.decelTime(.4);
	$origin_south_4.decelTime(.4);

	thread bindToPivot();

	$origin_north_1.rotateOnce( '0 0 -80' );
	$origin_north_2.rotateOnce( '0 0 -80' );
	$origin_north_3.rotateOnce( '0 0 -80' );
	$origin_north_4.rotateOnce( '0 0 -80' );

	$origin_south_1.rotateOnce( '0 0 80' );
	$origin_south_2.rotateOnce( '0 0 80' );
	$origin_south_3.rotateOnce( '0 0 80' );
	$origin_south_4.rotateOnce( '0 0 80' );
	
	sys.waitFor($origin_south_1);
	
	thread bindToPiston();
		
	thread bridge1_dn();
	thread bridge2_dn();
	thread bridge3_dn();
	thread bridge4_dn();
}

void unfoldWings()
{
	$origin_north_1.time(1);
	$origin_north_2.time(1);	
	$origin_north_3.time(1);
	$origin_north_4.time(1);
	
	$origin_south_1.time(1);
	$origin_south_2.time(1);
	$origin_south_3.time(1);
	$origin_south_4.time(1);

	$origin_north_1.decelTime(.25);
	$origin_north_1.decelTime(.25);
	$origin_north_1.decelTime(.25);
	$origin_north_1.decelTime(.25);
	
	$origin_south_1.decelTime(.25);
	$origin_south_2.decelTime(.25);
	$origin_south_3.decelTime(.25);
	$origin_south_4.decelTime(.25);
}

void ActivateTramBridge() {

	
	
	thread pillarsUp();
	thread bridge1_up();
	thread bridge2_up();
	thread bridge3_up();
	thread bridge4_up();
	sys.wait(4);

	thread unfoldWings();
	thread bridgeUnfold1();
	sys.wait(.1);
	thread bridgeUnfold2();
	sys.wait(.1);
	thread bridgeUnfold3();
	sys.wait(.1);
	thread bridgeUnfold4();	
	// sys.trigger($go_to_station);
	sys.wait(2);

	sys.trigger($aas_obstacle_bridge); // turn off the obstacle so ai can cross
	cortez_follow();



}

void DeactivateTramBridge() {
	foldWings();
}

//=============================================
//
//	Unfolding bridge end		mrenner	
//
//=============================================





void grunt_spawn_sequence  ()

{
	// spawns the guy in and runs to the west
	sys.trigger ($run_by_tele_2);
	aiScriptedMoveWait ( $run_by_tele_2,  $run_by_tele_2_spot, 16 , 1 );
	$run_by_tele_2.remove();
	// sounds of the thing launching and spawning in
	sys.trigger ($grunt_tele_launch);
	sys.wait (.3);
	sys.trigger ($grunt_tele_spawn);
			
	// grunt bending sequence
	// sys.wait(1);
	sys.trigger ($grunt_scare);
	// remove the shot clip around the bent mesh
	$grunt_bent_wall_shot_clip.hide();
	sys.trigger ($grunt_panel_bend);
	// slight wait for the piece to bend back
	sys.wait (1);
	$grunt_bent_wall_player_clip.hide();
	
	
	
}

///////////////////////////////////////////////
// stuff for the teleport dropper running away 
///////////////////////////////////////////////

void ResetCrateToPushable( entity crate )
{
	crate.setKey( "notPushable", 0 );
	sys.trigger( crate );
}

void TeleportDropperRun( entity creature )

{
	aiScriptedAnimWait( creature, "crates_intro", 0, 0 );
	
	// The creature seems to interact with the moveables during anim
	ResetCrateToPushable( $crate1 );
	ResetCrateToPushable( $crate2 );
	
	aiScriptedMoveWait( creature, $teleportDropper_endPos, 12, true );
	creature.remove(); 
}




void ToggleHubControlRoomDoors() 

{

	
	// this is the doors right at the gui switch for the tram hub rotation
	
	$hub_door_new1.lock( 0 );
	$hub_door_new2.lock( 0 );
}

//--
//Swinging pendulum pipe for construction area
//--

void swing_thing()	{

	$swing_point.sway (1.6, 0, '0 2 4');
}

//--
// End pendulum thing
//--


//--
// Conveyor Mayhem
//--

// float conveyorSpeed = 0.66; (UNUSED)

void conveyor_button ()
{
	// starts the process and the light switch
	sys.trigger ($swapGuiMonitors);	
}

/* This actually isn't used anymore.
void conveyorEvent() {

	sys.println("WORKING? YES? NO?");

	float decelDuration = 1;	// set this to how many seconds you want the conveyor to spend decelerating
	float stopDuration = 4;		// set this to how many seconds you want the conveyor to spend stopped
	float accelDuration = 1;	// set this to how many seconds you want the conveyor to spend accelerating
	
	// ASSIGNING VARIABLES FOR DECELERATION EVENT
	
	float targetTime = sys.getTime() + decelDuration;
	float oldTime = sys.getTime();
	float nowTime = sys.getTime();
	float deltaTime = 0;
	
	float originSpeed = 0.66;	// 0.66 is the speed used by textures/stroyent/stroy_conveyor2
	float targetSpeed = 0;
	
	float fSpeed = originSpeed;
	
	float fSpeedScale = (targetSpeed - originSpeed)/decelDuration;
	
	// DECELERATION EVENT
	
	while (nowTime < targetTime) {
	
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
		
		fSpeed += deltaTime * fSpeedScale;
		
		conveyorSpeed = fSpeed;
		
		sys.waitFrame();

	}
	
	// PAUSING TO ALLOW VIDEO GAME MAGIC TO HAPPEN
	
	sys.wait(stopDuration);
	
	// RESETTING VARIABLES FOR ACCELERATION EVENT
	
	targetTime = sys.getTime() + accelDuration;
	oldTime = sys.getTime();
	nowTime = sys.getTime();
	deltaTime = 0;
	
	originSpeed = 0;
	targetSpeed = 0.66;
	
	fSpeed = originSpeed;
	
	fSpeedScale = (targetSpeed - originSpeed)/accelDuration;
	
	// ACCELERATION EVENT
	
	while (nowTime < targetTime) {
	
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
		
		fSpeed += deltaTime * fSpeedScale;
		
		conveyorSpeed = fSpeed;

		sys.waitFrame();
	
	}
	
}

void conveyorScrolling() {

	float conveyorPosition = 0;
	float oldTime = sys.getTime();
	float nowTime = sys.getTime();
	float deltaTime;

	while(1){
		
		nowTime = sys.getTime();
		deltaTime = nowTime - oldTime;
		oldTime = nowTime;
	
		conveyorPosition += conveyorSpeed * deltaTime;
		$conveyor_1.setShaderParm(4, conveyorPosition);
		$conveyor_2.setShaderParm(4, conveyorPosition);
		$conveyor_3.setShaderParm(4, conveyorPosition);
		$conveyor_4.setShaderParm(4, conveyorPosition);
		$conveyor_5.setShaderParm(4, conveyorPosition);		
		sys.waitFrame();
	
	}
}
*/

void start_spinny_lights()
{
	// turns on spinny lights on top - jersey
	sys.trigger($contruction_machine_warning_light_1);
	sys.trigger($contruction_machine_warning_light_2);
	
	sys.trigger($construction_spinny_light_2);
	sys.trigger($construction_spinny_light);
	sys.trigger($construction_spinny_light_3);
	sys.trigger($construction_spinny_light_4);
	
	// triggers the light volume effect for the red warning light
	
	sys.trigger ($panelMover_light_effect);
	sys.trigger ($panelMover_light_effect_2);		
}

//--
// Panel movement on Assembly Line, Phase 1		aweldon Feb 05
// Smashing!
//--

void startPanel( entity panel )	{
	// Start platform on its way
	setNewTimes( panel, 3.5 , 0 , 0 );
	panel.move( NORTH , 192 );
	panel.startSoundShader( "tram_platform_4_2nd_piece", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.wait( 1 );
}

void clasperMoves( entity panel )	{

	

	// Set first move times and move clasper to position.
	setNewTimes( $panelClasper , .5	, .25 , .1 );
	$panelClasper.move( SOUTH , 8 );
	sys.waitFor( $panelClasper );
	
	// Re-set times and spin the clasper like mad
	setNewTimes( $panelClasper , 1 , .5 , .5 );
	$panelClasper.rotateOnce( '270 0 0' );
	$panelClasper.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.wait( .5 );
	
	// Move the clasper down to convenient plate-grabbing level
	setNewTimes( $panelClasperHeight , .5 , .25 , .25 );
	$panelClasperHeight.move( DOWN , 10 );
	sys.waitFor( $panelClasperHeight );
	
	// Extend the clasper toward the plate
	setNewTimes( $panelClasper , .5 , .25 , .25 );
	$panelClasper.move( SOUTH , 28 );
	//$panelClasper.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	
	// Open the clamps and wait for the panel to arrive
	setNewTimes( $panelClasperBar_1 , .25 , .1 , 0 );
	setNewTimes( $panelClasperBar_2 , .25 , .1 , 0 );
	$panelClasperBar_1.rotateOnce( '0 45 0' );
	$panelClasperBar_2.rotateOnce( '0 -45 0' );
	//$panelClasperBar_2.startSoundShader( "tram_platform_2_railings", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasper );
		
	// Clampinate!
	setNewTimes( $panelClasperBar_1 , .25 , .1 , 0 );
	setNewTimes( $panelClasperBar_2 , .25 , .1 , 0 );
	$panelClasperBar_1.rotateOnce( '0 -45 0' );
	$panelClasperBar_2.rotateOnce( '0 45 0' );
	sys.waitFor( $panelClasperBar_2 );
	sys.waitFor( panel);
	
	// Bind panel to Clasper and let the games begin
	panel.bind( $panelClasper );
	$panelClasper.move( NORTH , 32 );
	sys.waitFor( $panelClasper );
		
	// Re-Set Clasper times and set Mover times to move to press machine
	setNewTimes( $panelMover , 2 , .75 , .75 );
	$panelMover.move( WEST , 256 );
	//$panelMover.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	
	// Lift the height controller
	$panelClasperHeight.move( UP , 42 );

	// Spin the clasper	
	setNewTimes( $panelClasper , 1 , .5 , .5 );
	$panelClasper.rotateOnce( '-270 0 0' );
	//$panelClasper.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.wait( 1 );
	
	// Move pressing pieces into position
	setNewTimes( $pressMachine_1 , 1 , .5 , .25 );
	setNewTimes( $pressMachine_2 , 1 , .5 , .25 );
	
	// unbind the back pieces so it functions like a piston - jersey
	$pressMachine_1_back_piston.unbind();
	$pressMachine_2_back_piston.unbind();
	$pressMachine_1_back_piston_b.unbind();
	$pressMachine_2_back_piston_b.unbind();
	
	// Move pressing pieces into position	
	sys.trigger( $speaker_press_long );
	$pressMachine_1.move( NORTH , 64 );
	$pressMachine_2.move( NORTH , 64 );
	//$pressMachine_2.startSoundShader( "tram_platform_2_railings", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	
	// Lower the panel 
	$panelClasperHeight.move( DOWN , 32 );
	sys.waitFor( $panelMover );	
}
	
void pressPanel( entity panel )	{

	// Set all applicable times
	setNewTimes( $panelClasper , .5 , 0 , .25 );
	setNewTimes( $panelClasperExtend_1 , .5 , 0 , 0 );
	setNewTimes( $panelClasperExtend_2 , .5 , .25 , 0 );
	
	// Extend into the press machine
	$panelClasperExtend_2.move( SOUTH , 24 );
	//$panelClasperExtend_2.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasperExtend_2 );
	$panelClasperExtend_1.move( SOUTH , 32 );
	//$panelClasperExtend_1.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasperExtend_1 );
	$panelClasper.move( SOUTH , 28 );
	//$panelClasper.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasper );
	
	// binds everything again so the arms move as one piece - jersey 
	$pressMachine_1_back_piston.bind($pressMachine_1);
	$pressMachine_2_back_piston.bind($pressMachine_2);
	$pressMachine_1_back_piston_b.bind($pressMachine_1);
	$pressMachine_2_back_piston_b.bind($pressMachine_2);
	
	// Set times for the pressing machine, then commence primary compression.
	setNewTimes( $pressMachine_1 , .25 , .1 , -1 );
	setNewTimes( $pressMachine_2 , .25 , .1 , -1 );
	sys.trigger( $speaker_press_close );
	$pressMachine_1.move( WEST , 30 );
	$pressMachine_2.move( EAST , 30 );
	sys.waitFor( $pressMachine_2 );
	
	// Smashinated effects
	sys.trigger( $smashEffect_1 );
	sys.trigger( $smashEffect_2 );
	sys.wait( .5 );
	
	// Fire off the steam on open
	sys.trigger( $pressMachineSteamA_1 );
	sys.trigger( $pressMachineSteamA_2 );
	sys.trigger( $pressMachineSteamB_1 );
	sys.trigger( $pressMachineSteamB_2 );	
	
	// Open again	
	sys.trigger( $speaker_press_open );
	$pressMachine_1.move( EAST , 8 );
	$pressMachine_2.move( WEST , 8 );
	sys.waitFor( $pressMachine_2 );
	
	// Retract from pressing machine
	setNewTimes( $panelClasper , .5 , .25 , 0 );
	setNewTimes( $panelClasperExtend_1 , .5 , 0 , 0 );
	setNewTimes( $panelClasperExtend_2 , .5 , 0 , .25 );
	$panelClasper.move( NORTH , 28 );
	//$panelClasper.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasper );	
	
	// Start moving pressing pieces
	setNewTimes( $pressMachine_1 , 2 , 1 , .25 );
	setNewTimes( $pressMachine_2 , 2 , 1 , .25 );
	sys.trigger( $speaker_press_long );
	$pressMachine_1.move( EAST , 22 );
	$pressMachine_2.move( WEST , 22 );
		
	// Continue with retracting panel
	$panelClasperExtend_1.move( NORTH , 32 );
	//$panelClasperExtend_1.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasperExtend_1 );
	$panelClasperExtend_2.move( NORTH , 24 );
	//$panelClasperExtend_2.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasperExtend_2 );
	sys.waitFor( $pressMachine_2 );
	
	// Move pressing pieces out of the way
	$pressMachine_1.time( 1 );
	$pressMachine_1.accelTime( .5 );
	$pressMachine_1.decelTime( .25 );
	$pressMachine_2.time( 1 );
	$pressMachine_2.accelTime( .5 );
	$pressMachine_2.decelTime( .25 );
		
	// unbind the back pieces so it functions like a piston - jersey
	$pressMachine_1_back_piston.unbind();
	$pressMachine_2_back_piston.unbind();
	$pressMachine_1_back_piston_b.unbind();
	$pressMachine_2_back_piston_b.unbind();
	
	// Return the pieces to the original location
	sys.trigger( $speaker_press_long );
	$pressMachine_1.move( SOUTH , 64 );
	//$pressMachine_1.startSoundShader( "tram_platform_2_railings", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	$pressMachine_2.move( SOUTH , 64 );
	//$pressMachine_2.startSoundShader( "tram_platform_2_railings", SND_CHANNEL_ANY ); // *TEMPORARY'D*
}

void flipPanel( entity panel )	{
	
	//sys.println( "Flipping panel in crazy over-the-top fashion." );
	
	// Move up and set times for flipping over top of mr. device
	setNewTimes( $panelClasperHeight , .5 , .25 , 0 );
	$panelClasperHeight.move( UP , 20 );
	sys.waitFor( $panelClasperHeight );
	
	setNewTimes( $panelClasperExtend_2 , .5 , .25 , .25 );
			
	// *FLIP'D*
	//$panelClasperHeight.move( UP , 20 );
	//sys.waitFor( $panelClasperHeight );
	setNewTimes( $panelClasper , .5 , .25 , .25 );
	$panelClasper.move( SOUTH, 16 );
	sys.waitFor( $panelClasper );
	
	setNewTimes( $panelClasper , 1 , .25 , .25 );
	setNewTimes( $panelClasperExtend_2 , 1 , .25 , .25 );
	$panelClasperExtend_2.rotateOnce( '0 0 -180' );
	//$panelClasperExtend_2.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	$panelClasper.rotateOnce( '270 0 0' );
	sys.waitFor( $panelClasper );

	setNewTimes( $panelClasper , .5 , 0 , .25 );
	$panelClasper.move( SOUTH , 16 );
	sys.waitFor( $panelClasper );

	setNewTimes( $panelClasperHeight , 1 , 0 , .25 );
	$panelClasperHeight.move( DOWN , 30 );
	sys.waitFor( $panelClasperHeight );
	
	// Unlock Clamps
	$panelClasperBar_1.rotateOnce( '0 45 0' );
	$panelClasperBar_2.rotateOnce( '0 -45 0' );
	sys.waitFor( $panelClasperBar_2 );
	
	panel.unbind();	
}	

void returnMover()	{

	//Make the return flip.
	setNewTimes( $panelClasperHeight , .25 , -1 , 0 );
	$panelClasperHeight.move( UP , 30 );
	sys.waitFor( $panelClasperHeight );
	
	setNewTimes( $panelClasper , .5 , .25, 0 );
	$panelClasper.move( NORTH , 16 );
	sys.waitFor( $panelClasper );
	
	setNewTimes( $panelClasper , 1 , .5 , .5 );
	$panelClasperExtend_2.rotateOnce( '0 0 180' );
	//$panelClasperExtend_2.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	$panelClasper.rotateOnce( '-450 0 0' );
	sys.waitFor( $panelClasper );
	
	setNewTimes( $panelClasper , .25, 0 , .1 );
	$panelClasper.move( NORTH , 16 );
	setNewTimes( $panelClasperHeight , .25 , 0 , .1 );
	$panelClasperHeight.move( DOWN , 20 );
	sys.waitFor( $panelClasperHeight );
	
	// Move entire platform back and spin everything back into place!
	setNewTimes( $panelClasper , .25 , .1 , .1 );
	$panelClasper.move( SOUTH , 8 );
	sys.waitFor( $panelClasper );
	
	$panelMover.move( EAST , 256 );
	//$panelMover.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	
	setNewTimes( $panelClasper , 1 , .5 , .5 );
	
	$panelClasper.rotateOnce( '180 0 0' );
	//$panelClasperExtend_2.startSoundShader( "tram_platform_6_plat_move1", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	
	sys.wait( 1 );
	
	setNewTimes( $panelClasperBar_1, .25 , .1 , .1 );
	setNewTimes( $panelClasperBar_2, .25 , .1 , .1 );
	$panelClasperBar_1.rotateOnce( '0 -45 0' );
	$panelClasperBar_2.rotateOnce( '0 45 0' );
	//$panelClasperBar_2.startSoundShader( "tram_platform_7_arms", SND_CHANNEL_ANY ); // *TEMPORARY'D*
	sys.waitFor( $panelClasperBar_2 );
	sys.waitFor( $panelMover );
		
	setNewTimes( $panelClasper , .25 , .1 , .1 );
	$panelClasper.move( NORTH , 12 );
	sys.waitFor( $panelClasper );
}

//--
// End Phase 1
//--


//--
// Panel movement on Assembly Line, Phase 2		aweldon Feb 05
// Riveting!
//--

void movePlateToRivet( entity panel )	{
	// Set new times
	setNewTimes( panel , 5 , 0 , 1 );
		
	// Move
	panel.move( NORTH , 344 );
	sys.wait( 3 );
	
	// Eventually slow the conveyor belt.
	//thread conveyorEvent();
		
	// Set initial times
	setNewTimes( $rivetHold , 2 , 1 , .5 );
	
	// Move down to grab plate
	$rivetHold.move( DOWN , 128 );
	sys.waitFor( $rivetHold );
	sys.waitFor( panel);
}

void plateImpact( entity panel )	{
	
	// secondary motion for impacts on panel piece.
	setNewTimes( panel , .05 , 0 , 0 );
	panel.move( DOWN , .25 );
	sys.waitFor( panel);
	
	panel.decelTime( .05 );
	panel.move( UP , .25 );	
	sys.waitFor( panel);

}

void smashySmashy( entity spark1 , entity spark2 , entity spark1A , entity spark2A , entity panel)	{
	// Threaded function for the hammering motion and sparks and mayhem.
	// Set time for punchinating
	$rivetPunch.time( .05 );
	
	// Make the punches and fire spark shower for first position
	$rivetPunch.move( DOWN , 12 );
	sys.waitFor( $rivetPunch );
	thread plateImpact( panel );
	sys.trigger( spark1A );
	$rivetPunch.move( UP , 12 );
	sys.waitFor( $rivetPunch );
	sys.wait( .1 );
	$rivetPunch.move( DOWN , 12 );
	sys.waitFor( $rivetPunch );
	thread plateImpact( panel );
	sys.trigger( spark1 );
	$rivetPunch.move( UP , 12 );
	sys.waitFor( $rivetPunch );
	
	// Set time to move to new position
	setNewTimes( $rivetPunch , .25 , .1 , .1 );
	
	// Move to position for second set of punches
	$rivetPunch.move( EAST , 42 );
	sys.waitFor( $rivetPunch );
	
	// Set time for punchination
	$rivetPunch.time( .05 );
	
	// Make the punches and fire spark shower for second position
	$rivetPunch.move( DOWN , 12 );
	sys.waitFor( $rivetPunch );
	thread plateImpact( panel );
	sys.trigger( spark2A );
	$rivetPunch.move( UP , 12 );
	sys.waitFor( $rivetPunch );
	sys.wait( .1 );
	$rivetPunch.move( DOWN , 12 );
	sys.waitFor( $rivetPunch );
	thread plateImpact( panel );
	sys.trigger( spark2 );
	$rivetPunch.move( UP , 12 );
	sys.waitFor( $rivetPunch );
	
	// Re-Set time to move to new position to move with $rivetExtend in another function
	setNewTimes( $rivetPunch , .5 , .25 , .25 );
}

void rivetSmash( entity panel )	{
	// Set times
	setNewTimes( $rivetArm , 1 , .25 , .25 );
	setNewTimes( $rivetExtend , .5 , .25 , .25 );
	
	// Bind plate to first piece
	panel.bind( $rivetHold );
	
	// Set new times and raise up to be pokinated
	setNewTimes( $rivetHold , 2 , .5 , .5  );	
	$rivetHold.move( UP , 64 );
	$rivetHold.rotateOnce( '0 90 0' );
	sys.wait( 1 );
		
	// Trigger the alarm light and move the rivet puncher into place
	sys.trigger( $rivetArm_light );
	$rivetArm.move( NORTH , 98 );
	sys.waitFor( $rivetArm );
	
	// Extend, extend!
	$rivetExtend.move( WEST , 48 );
	sys.waitFor( $rivetExtend );
	
	// Hammer time
	smashySmashy( $convSpark_1 , $convSpark_2, $convSparkB_1 , $convSparkB_2 , panel );
	
	// Retract arm and move to next punch position
	$rivetPunch.move( WEST , 42 );
	$rivetExtend.move( EAST , 48 );	
	sys.waitFor( $rivetExtend );
	
	setNewTimes( $rivetArm , .25 , .1 , .1 );
	$rivetArm.move( SOUTH , 68 );
	sys.waitFor( $rivetArm );
	
	// Extend, extend!
	$rivetExtend.move( WEST, 48 );
	sys.waitFor( $rivetExtend );
	
	// Hammer time 2
	smashySmashy( $convSpark_3 , $convSpark_4, $convSparkB_3 , $convSparkB_4, panel );
	
	// Retract arm
	$rivetPunch.move( WEST , 42 );
	$rivetExtend.move( EAST , 48 );	
	sys.waitFor( $rivetExtend );
	
	// Return arm to start position and turn off annoying light
	setNewTimes( $rivetArm , 1.5 , .5 , .5 );
	$rivetArm.move( SOUTH , 30 );
	
	// Lower panel piece back to conveyor belt
	$rivetHold.move( DOWN , 64 );
	$rivetHold.rotateOnce( '0 90 0' );
	
	//turn light off at the appropriate time
	sys.waitFor( $rivetArm );
	sys.trigger( $rivetArm_light );
	sys.waitFor( $rivetHold );
	panel.unbind();
	
	// Raise holding piece to original position
	setNewTimes( $rivetHold , 2 , .5 , 1 );
	$rivetHold.move( UP, 128 );
	$rivetHold.rotateOnce( '0 -180 0' );
}

//--
// End Phase 2
//--

//--
// Panel movement on Assembly Line, Phase 3		aweldon Feb 05
// Crushing!
//--

void movePlateToLift( entity panel )	{

	// Move to lift
	setNewTimes( panel , 6 , 1 , 1 );
	panel.move( NORTH , 384 );
	sys.waitFor( panel);
	
	// Bind plate to lift
	panel.bind( $crushinatePlat );
	
	// Wait and allow time for the player to move onto the lift
	sys.wait( 3 );
	
	// Move lift up for Crushination
	setNewTimes( $crushinatePlat , 3 , 1 , 1 );
	$crushinatePlat.move( UP , 192 );
	sys.waitFor( $crushinatePlat );
	
	panel.unbind();

/*	
	// Wait to let Player clear, ominously lower crushinator.
	setNewTimes( $crushinator , 1 , .5 , .25 );
	$crushinator.move( DOWN , 16 );
	sys.waitFor( $crushinator );
	
	// Wait a tick longer
	sys.wait( 1 );
	
	// Crushinate!
	setNewTimes( $crushinator , .25 , .25 , 0 );
	$crushinator.move( UP , 16 );
	sys.waitFor( $crushinator );
	
	setNewTimes( $crushinator , .5 , .5 , 0 );
	$crushinator.move( DOWN , 124 );	
	sys.waitFor( $crushinator );
	sys.trigger( $speaker_crusher );
	
	sys.wait( 1 );
	
	// Move crushinator back up
	setNewTimes( $crushinator , 2 , .5 , .5 );
	$crushinator.move( UP , 124 );	
	*/
	
	sys.wait( 1 );
	
	// Move Plate
	panel.move( WEST , 384 );
	sys.wait( 1 );
	
	// Return plat
	$crushinatePlat.move( DOWN , 192 );
	sys.waitFor( $crushinatePlat );	
	sys.waitFor( panel );
}

//--
// End Phase 3
//--

void hackPlateBack( entity panel )	{

	// Make sure the plate gets where it needs to go to re-start the process.
	panel.restorePosition();
}

void eachPanel( entity panel )	{
	// Full cycle for each panel piece

	// start the belt lights going
	//sys.println( "belt lights 1 on" );
	// sys.trigger($belt_lights_on_1);
	// sys.wait(1);
	// sys.println( "belt lights 2 on" );
	// sys.trigger($belt_lights_on_2);
	
	// swap the guis out on the door so the player can get out
	$panel_bad_gui.hide();	
	$panel_good_gui.show();
	
	startPanel( panel );
	clasperMoves( panel );
	pressPanel( panel );
	flipPanel( panel );
	thread returnMover();
	movePlateToRivet( panel );
	rivetSmash( panel );
	movePlateToLift( panel );
	thread hackPlateBack( panel );
}

void assemblyLine( )	{
	
	//Run multiple panels simultaneously

	thread start_spinny_lights();

	while(1)	
	{
		thread eachPanel( $convPlate_1 );
		
		sys.wait( 20 ); //was 32, then 25, then 23
		thread eachPanel( $convPlate_2 );
		
		sys.wait( 20 ); //was 32, then 25, then 23
		thread eachPanel( $convPlate_3 );
		
		sys.wait( 20 ); //was 32, then 25, then 23
	}
}

//--
// END PANEL CYCLE
//--

void CacheSounds() {
	/*
	//Cache sounds for cargo plat
	$world.cacheSoundShader("tram_platform_1_first_move"); // not used 
	$world.cacheSoundShader("tram_platform_2_railings");
	$world.cacheSoundShader("tram_platform_3_1st_piece");
	$world.cacheSoundShader("tram_platform_4_2nd_piece");
	$world.cacheSoundShader("tram_platform_5_base");  // not used 
	$world.cacheSoundShader("tram_platform_6_plat_move1");
	$world.cacheSoundShader("tram_platform_7_arms");
	$world.cacheSoundShader("tram_platform_8_plat_move2"); // not used 
	$world.cacheSoundShader("tram_platform_9_plat_move3"); // not used 
	
	
	//Cache additional sounds for crazy panel mover.
	*/

	// stuff for intro vista bridge
	$world.cacheSoundShader("tram_bridge2_main_piece_move");
	$world.cacheSoundShader	("tram_bridge2_snap");
	$world.cacheSoundShader ("tram_bridge2_flap");
	$world.cacheSoundShader ("tram_bridge2_snap");
	$world.cacheSoundShader ("tram_bridge2_lip_piece");
	$world.cacheSoundShader ("tram_bridge2_ramp");
	$world.cacheSoundShader	("tram_bridge2_snap");
	$world.cacheSoundShader ("tram_bridge2_metal_flaps");


	// stuff for flipping bridge
	$world.cacheSoundShader("tram_bridge_pillar1");
	$world.cacheSoundShader	("tram_bridge_pillar2");
	$world.cacheSoundShader ("tram_bridge_pillar3");
	$world.cacheSoundShader ("tram_bridge_wings1");
	$world.cacheSoundShader ("tram_bridge_wings2");
	$world.cacheSoundShader ("tram_bridge_wings3");

}

void debugPrintTriggerName(entity tgr)
{
	sys.println("trigger activated: " + tgr.getName());
}

void no_more_beam ()
{

	// stops the beam thing in the intro after the player has made it down the elevator shaft, also removes the beam stuff
	
	$beamBlastLight.remove();
	$beamBlastFlare.remove();
	$distortTop.remove();
	$beamBlast.remove();
	$beam_bottom_sound.remove();
	$beamBlastFx.remove();
	$beamBlastFlare.remove();
	$distortBottom.remove();
	
	sys.killthread( "map_tram1::mainBeamTop" );	
	
	
	
		
}

void LowerLevelTransitionElevator( entity elevator )

 {
  	elevator.setGuiParm( "gui_parm_disable", "1" );
  	elevator.setGuiFloat( "pressed", 0 );
  	elevator.setGuiFloat( "topfloor", 2 );
  	elevator.setGuiFloat( "bottomfloor", 1 );
  	elevator.setGuiFloat( "floor", 2 );
  	elevator.guiEvent( "updateFloor" );
  	
  	elevator.guiEvent( "triggerGui" );
  	elevator.moveTo( elevator.randomTarget("") );
  	sys.waitFor( elevator );
  	
  	elevator.setGuiFloat( "floor", 1 );
  	elevator.guiEvent( "updateFloor" );
  }
  
  
  

void main() 
{

	thread mainBeamTop();
	
	thread CacheSounds();
	
	thread strogg_dropship::bindMonsters(  $drop_ship );

	thread LowerLevelTransitionElevator( $info_player_start_1.randomTarget("") );
	
	$tech_marine.setTalkState(TALK_WAIT); 
	$other_marine.setTalkState(TALK_WAIT); 
	$cortez.setTalkState(TALK_WAIT); 
		
	
	// gui that squad uses should be set to non interactive
	$intro_door_gui_1.setGuiParm("noninteractive", "1");
	
	$ship_clip.bindToJoint ($drop_ship, "still", 1);	
	$ship_landing_clip.bindToJoint ($drop_ship, "still", 1);	
		
	// thread bustedTrack();

	thread DeactivateTramBridge();
	
	// Start pendulum in construction area
	thread swing_thing();
	thread new_area_swing_thing();
	
	// Get conveyors going!
	// thread conveyorScrolling();
	
	// lock it so the player can't get in until the end of the level
	$cortez_tram_gun.lock(1);
			
	sys.fadeIn( '0 0 0', 2.0 );

	sys.wait(1);
	sys.trigger($aas_obstacle_bridge); // turn on the obstacle so ai don't try to cross before the bridge is extended
}

} //end namespace map_tram1


