#include "scripts/maps/core/boss_brain.script"

#define MAKRON_MAX_HEALTH 3500
#define MAKRON_RESTORE 750
#define MAKRON_FORM_1_HEALTH 2500

namespace boss_makron {

//-------------------------------------------------------------------------------
// Globals

//the amount of Makron minions running around
float g_makronHelperCount = 0;

//The Makron entity.
entity entBossMakron;

//Makron has two forms. When he first dies, we change the form to 2.
float g_makronForm = 1;

//The battery that the Makron is using to charge himself with
entity g_targetBattery;

//when this is active, the Makron can restore health
float g_allowHealthRestore = 0;

//-------------------------------------------------------------------------------
// Prototypes

//Setup the stuff in the environment, and set up the Makron script variables.
void initMakronBattle();
void makronInit();

//Keeps the spawner running and listening
void maintainMakronSpawner();

//Increments and decrements the baddie count in the arena
void makronHelperDies( entity entSelf );
void makronHelperSpawns();

//battle sytles, contain multiple attack patterns
void battleStyleFirstForm();
void battleStyleSecondForm();

//moves Makron to a new makronic location
void moveToNewLocation();

//Called when Makron is reduced to 0 HP, whether it's first form or second.
void makronDeath();
void killAllMakronThreads();

//revenge!
void ressurectionSequence();

//makron attack patterns
void attackPattern1();
void attackPattern2();
void attackPattern3();

// runs the recharge sequence for the Makron
void makronRecharge();

//used to suck life from the torso batteries
entity	grabTorsoBattery();
void	moveTorsoBattery( entity entBattery );

//allows the battery to be destroyed
void	maintainSelectedBattery();

//cleans up all restoreative effects
void	clearRestoreEffects();

//restores makron health over X seconds
void restoreMakronHealth( float amount, float seconds, string fx );

//checks to see if the Makron needs healing
float makronCheckForHeal();

//Makes sure the Makron executes an attack. Returns false if something weird happens,
//like if Makron dies or some other bullocks.
float enforceMakronAttack( string strAttack );

//fades out all the targets of entMaster from vStart to vDest over 2 seconds
void fadeAllTargets( entity entMaster, vector vDest, vector vStart );

//increase the count when a helper is spawned
void makronHelperSpawns()	{	g_makronHelperCount++;	}

// Makes sure the boss room is dark and ominousy
void prepBossRoom();

// Checks to see if the Makron is stuck in a corner
void checkMakronCorner();


void attatchNailableToMakron( string boneName )	{

	float fHandle;
	vector vOrigin;

	//get the handle and origin of the bone
	fHandle = entBossMakron.getJointHandle( boneName );
	vOrigin = entBossMakron.getJointPos( fHandle );
	
	sys.setSpawnArg( "origin", vOrigin_x + " " + vOrigin_y + " " + vOrigin_z );
	sys.setSpawnArg( "target", entBossMakron.getName() );
	sys.setSpawnArg( "lock_joint", boneName );
	sys.setSpawnArg( "size", "48 48 48" );
	entity ent = sys.spawn("target_nailable");

	ent.bindToJoint( entBossMakron, boneName, 1);
}

//-------------------------------------------------------------------------------
// void initMakronBattle()
//
// Sets up all the level stuff for the fight-- locks the door, may do other things down the road
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void initMakronBattle()	{

	float f = 0;
	
	//lock the door
	$door_boss_1.lock(1);
	sys.trigger( $tgt_fademusic_in );
	sys.trigger( $speaker_music_0 );

	sys.wait(.5);

	//fade up the lights
	thread fadeAllTargets( $tgt_lightfade_1, $tgt_lightfade_1.getVectorKey( "_color"), '0.1 0.1 0.1' );
	thread fadeAllTargets( $tgt_lightfade_2, $tgt_lightfade_2.getVectorKey( "_color"), '0.1 0.1 0.1' );

	$door_brain_1.close();

	sys.trigger($makron_highlight); //remove orange highlight

	sys.trigger( $monster_makron_1);
	aiScriptedAnimWait($monster_makron_1, "boss_fight_intro", 4, 1);
	sys.trigger($fx_makron_door_intro); //turn off smoke
	sys.trigger( $target_bossbattle_1);


	sys.wait(5);
	
	sys.trigger( $speaker_music_1);

	//sys.waitFor($door_brain_1);
}


//-------------------------------------------------------------------------------
// void battleStyleFirstForm()
//
// The script that controls the Makron's patterns during the first fight.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void battleStyleFirstForm()	{

	//makron Introduction
	entBossMakron.allowMoreSpawns();
	sys.wait(8);

	thread checkMakronCorner();

	while( isValidEntity( entBossMakron) && g_makronForm == 1)	{

		if( g_makronHelperCount > 0 )	{
			
			//if there is help in the field, use this pattern
			attackPattern1();

		}	else	{

			//it is just the player and the Makron.
			attackPattern2();

		}

	}

}


//-------------------------------------------------------------------------------
// void battleStyleSecondForm()
//
// The script that controls the Makron's patterns during the second fight.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void battleStyleSecondForm()	{

	//make sure the makron can spawn more baddies at first
	

	while( isValidEntity( entBossMakron) && g_makronForm == 2)	{
		attackPattern3();
	}
	//sys.println("battleStyleSecondForm end!");
}

//-------------------------------------------------------------------------------
// void makronCheckForHeal()
//
// checks to see if the Makron should play his healing action.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
float makronCheckForHeal( )	{	

//	sys.print("Makron health: " + entBossMakron.getHealth());
	if( entBossMakron.getHealth() < ( MAKRON_MAX_HEALTH * .6) )	{
//		sys.print(" -- Makron needs healing!\n");
		return 1;
	} 
//	sys.print(" -- Makron is ok.\n");
	return 0;
	
}

//-------------------------------------------------------------------------------
// void moveToNewLocation()
//
// picks a random tether for the Makron to move to.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void moveToNewLocation()	{

	float fBestDist = 9999999;
	entity eBestLoc;
	entity entCurrent;
	float t;
	float fDist;

	eBestLoc = $tgt_makron_master.randomTarget( "null" );
	while( isValidEntity( entBossMakron ) && entBossMakron.distanceTo( eBestLoc) < 500)	{
		eBestLoc = $tgt_makron_master.randomTarget( "null" );
		sys.waitFrame();
	}	

	//sys.println("Moving to " + eBestLoc.getName());
	sys.trigger( eBestLoc);	

}

//-------------------------------------------------------------------------------
// void attackPattern1()
//
// A pattern the Makron uses to attack.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void attackPattern1()	{

	if( !isValidEntity( entBossMakron ))
		return;

	entBossMakron.enablePatternMode();
	//entBossMakron.allowMoreSpawns();

	enforceMakronAttack("actionDMGrenades");
	enforceMakronAttack("actionDMG");
	enforceMakronAttack("actionCharge");

	enforceMakronAttack("actionStomp");
	enforceMakronAttack("actionLightningSweep1");
	enforceMakronAttack("actionCharge");
	enforceMakronAttack("actionCharge");

}
//-------------------------------------------------------------------------------
// void attackPattern2()
//
// A pattern the Makron uses to attack.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void attackPattern2()	{

	if( !isValidEntity( entBossMakron ))
		return;
	
	entBossMakron.enablePatternMode();

	enforceMakronAttack("actionDMG");
	enforceMakronAttack("actionCannon");
	enforceMakronAttack("actionCharge");

	enforceMakronAttack("actionStomp");
	enforceMakronAttack("actionLightningSweep2");
	enforceMakronAttack("actionStomp");
	enforceMakronAttack("actionCharge");

	enforceMakronAttack("actionDMG");
	enforceMakronAttack("actionCannon");
	enforceMakronAttack("actionCharge");

//	entBossMakron.allowMoreSpawns();



}
//-------------------------------------------------------------------------------
// void attackPattern3()
//
// A pattern the Makron uses to attack.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void attackPattern3()	{

	entBossMakron.enablePatternMode();

	//this is our flying attack pattern-- run and gun

	moveToNewLocation();

	//make sure we can do this...
	if( g_makronHelperCount < 2 )	{
		entBossMakron.allowMoreSpawns();
	}

	if( makronCheckForHeal() )	{
		enforceMakronAttack("actionHeal");
	}
	enforceMakronAttack("actionCannon");
	enforceMakronAttack("actionDMGrenades");

	moveToNewLocation();
	if( makronCheckForHeal() )	{
		enforceMakronAttack("actionHeal");
	}
	enforceMakronAttack("actionCannon");
	enforceMakronAttack("actionDMG");

	moveToNewLocation();
//	entBossMakron.allowMoreSpawns();

	if( makronCheckForHeal() )	{
		enforceMakronAttack("actionHeal");
	}
	enforceMakronAttack("actionCannonSweep");
	enforceMakronAttack("actionLightningSweep2");

	moveToNewLocation();
	if( makronCheckForHeal() )	{
		enforceMakronAttack("actionHeal");
	}
	enforceMakronAttack("actionCannon");
	enforceMakronAttack("actionDMG");

}

//-------------------------------------------------------------------------------
// float enforceMakronAttack( string strAttack )
//
// Makes sure the Makron executes an attack. Returns false if something weird happens,
// like if Makron dies or some other bullocks.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
float enforceMakronAttack( string strAttack )	{

	float fAttackOK = 0;
	
	while ( isValidEntity( entBossMakron ) && (fAttackOK == 0) )	{
		fAttackOK = entBossMakron.setNextAction( strAttack );
		sys.wait(0.1);
	}
	
	return fAttackOK;

}


//-------------------------------------------------------------------------------
// void maintainMakronSpawner()
//
// Here's the spawner that will maintain the projectiles the Makron launches that can spawn
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void maintainMakronSpawner()	{
	
	while(1)	{
		sys.trigger( $spawnerMakron_small );
		sys.wait(1) + sys.random(2);
		sys.trigger( $spawnerMakron_large );
		sys.wait(1) + sys.random(2);

	}

}

//-------------------------------------------------------------------------------
// void maintainHelperDies()
//
// this function will alert the Makron when he can send out more troops.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void makronHelperDies( entity entSelf )	{
	
	//reduce the count
	g_makronHelperCount--;

	//if the count is 1 or less, Makron can get more help.
	if( $tgt_monsterManager.numTargets() < 2 && g_makronForm == 2)	{
		sys.println("Makron is allowed more spawns now!"); 
		entBossMakron.allowMoreSpawns();		
	}

	//remove this monster from the target
	$tgt_monsterManager.removeNullTargets();
	sys.print( $tgt_monsterManager.numTargets() + " monsters active." );
}

//-------------------------------------------------------------------------------
// Kills all the brain / Makron summoned monsters
//
// void killAllMonsters
//
// jshepard | Aug 2005
//-------------------------------------------------------------------------------
void killAllMonsters()	{
	entity entMonster;
	entity tgt_monsterManager;
	tgt_monsterManager = $tgt_monsterManager;

	ForEachTargetOf( tgt_monsterManager, entMonster )	{
		$death.directDamage( entMonster, "damage_gib");

	}

}


//-------------------------------------------------------------------------------
// Called by the Makron when his health is reduced to 0()
//
// void makronDeath
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void makronDeath()	{
	
	if( g_makronForm == 1)	{
		//sys.println("Oh noes! You killed teh Makron...");
		g_makronForm = 2;
		sys.killthread("battleStyleFirstForm");

		//call the function that ressurects the makron
		ressurectionSequence();

	} else if(g_makronForm == 2)  {
		sys.killthread("battleStyleSecondForm");
		g_makronForm = 3;
		killAllMakronThreads();
		entity legs;
		legs = sys.getEntity( entBossMakron.getKey("legs_name"));
		sys.println(" Getting entity " +  entBossMakron.getKey("legs_name"));

		sys.wait( 3);
		//burn out the Makron and his legs.
		sys.println("Makron is burning!!");
		legs.setShaderParm( 7, sys.getTime() );
		//entBossMakron.setShaderParm( 7, sys.getTime() );

		sys.wait(4);
		legs.remove();
		entBossMakron.remove();
		killAllMonsters();

		thread boss_brain::buildBrain();

	
	}

}

//-------------------------------------------------------------------------------
// void killAllMakronThreads
//
// Should kill all running Makron threads
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void killAllMakronThreads()	{

	sys.killthread( "maintainSelectedBattery" );
	sys.killthread( "moveTorsoBattery" );
	sys.killthread( "makronRecharge" );	
	sys.killthread( "restoreMakronHealth" );
	clearRestoreEffects();
}

//-------------------------------------------------------------------------------
// void fadeAllTargets()
//
// Fades all targets of entMaster from vStart to vDest over 2 seconds.
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void fadeAllTargets( entity entMaster, vector vDest, vector vStart )	{

	entity entLight;
	float t;

	for( t = 0; t < entMaster.numTargets(); t++)	{	
		entLight = entMaster.getTarget( t);
		thread crossFadeEnt( entLight, vStart, vDest, 2);
	}

}


//-------------------------------------------------------------------------------
// void ressurectionSequence()
//
// This is the script for switching the Makron from form1 to form 2
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void ressurectionSequence()	{

	//fade out the music
	sys.trigger( $tgt_fademusic_out );


	//not so sure I want to do this.
	/*
	while( g_makronHelperCount > 0 )	{
		sys.waitFrame();
	}
	*/

	sys.wait(5);
	sys.trigger( $speaker_music_1);
	$speaker_music_1.remove();
	//start charging up the top beam

	$fx_tesla_sparks_1.start();
	$fx_tesla_sparks_2.start();
	$fx_tesla_sparks_3.start();
	$fx_tesla_sparks_4.start();

	//start the batteries
	float t;
	for ( t = 1; t <=4 ; t++)	{ 
		thread boss_brain::activateTSDColumn( t );
	}

	sys.wait(2);
	sys.trigger( $tgt_fademusic_in );
	sys.trigger( $speaker_music_2 );

	//make the lights all purpley
	thread fadeAllTargets( $tgt_lightfade_1, '0.3 0 0.3', $tgt_lightfade_1.getVectorKey( "_color") );
	thread fadeAllTargets( $tgt_lightfade_2, '0.3 0 0.3', $tgt_lightfade_2.getVectorKey( "_color") );
	
	sys.wait(1);

	//power up the batteries
	thread boss_brain::teslaToBattery( $fx_coil_battery_blast_1, 1, 6);
	thread boss_brain::teslaToBattery( $fx_coil_battery_blast_2, 2, 6);
	thread boss_brain::teslaToBattery( $fx_coil_battery_blast_3, 3, 6);
	thread boss_brain::teslaToBattery( $fx_coil_battery_blast_4, 4, 6);
	sys.trigger( $speaker_laser_start );

	
	//turn on the absorber
	$fx_tesla_black_absorb.start();

	sys.wait(3);
	sys.trigger( $spkr_tesla_explode);
	sys.wait(1);

	//shock the Makron into life
	$fx_makron_chargeup.setWorldOrigin( entBossMakron.getWorldOrigin());
	$tgt_makron_raise.setWorldOrigin( entBossMakron.getWorldOrigin());
	$fx_tesla_raise_makron.start();
	$fx_makron_chargeup.start();	

	$target_bossbattle_1.setMaxBossHealth( getBossHealthByDifficulty( MAKRON_MAX_HEALTH,  sys.getcvar("g_skill") ));
//	sys.println("set health bar to " + getBossHealthByDifficulty( MAKRON_MAX_HEALTH,  sys.getcvar("g_skill") ));
	restoreMakronHealth( getBossHealthByDifficulty( (MAKRON_MAX_HEALTH ), sys.getcvar("g_skill") ), 3 , "fx_recharge" );

	sys.wait(1);
	entBossMakron.separate();
	sys.wait(2);

	$fx_tesla_sparks_1.stop();
	$fx_tesla_sparks_2.stop();
	$fx_tesla_sparks_3.stop();
	$fx_tesla_sparks_4.stop();

	$fx_tesla_raise_makron.stop();
	$fx_makron_chargeup.stop();	
	$fx_tesla_black_absorb.stop();
	sys.trigger( $speaker_laser_end );

	sys.wait(1);

	thread fadeAllTargets( $tgt_lightfade_1, $tgt_lightfade_1.getVectorKey( "_color"), '0.3 0 0.3' );
	thread fadeAllTargets( $tgt_lightfade_2, $tgt_lightfade_2.getVectorKey( "_color"), '0.3 0 0.3' );

	
}
//-------------------------------------------------------------------------------
// grabTorsoBattery()
//
// Selects a torso battery for the Makron to pull
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
entity grabTorsoBattery()	{

	$tgt_torso_controller.removeNullTargets();
	g_targetBattery = $tgt_torso_controller.randomTarget( "null" );
//	sys.println("Selected " + g_targetBattery.getName() + " as the battery for draining. ");
}

//-------------------------------------------------------------------------------
// void moveTorsoBattery()
//
// Moves a selected torso battery towards the Makron
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void moveTorsoBattery( entity entBattery )	{

	vector vPath;
	vector vClaw;
	vector vOrigin;

	//over the course of a few seconds, move the battery towards the makron
	vClaw = entBossMakron.getJointPos( entBossMakron.getJointHandle( "claw_muzzle") );

	//total distance to cover.
	vPath = vClaw - entBattery.getWorldOrigin();

	//divided into distance per second
	vPath /= 7;

	entBattery.unbind();
	vOrigin = entBattery.getWorldOrigin();
	vOrigin_z += 16;

	//set up the FX
	$tgt_teleport_pull.setWorldOrigin( vClaw );
	$tgt_teleport_pull.bindToJoint( entBossMakron, "claw_muzzle", 1);

	$fx_teleport_draw.setWorldOrigin( vClaw );
	$fx_teleport_draw.bindToJoint( entBossMakron, "claw_muzzle", 1);
	$fx_teleport_draw.clearTargetList( 0 );
	$fx_teleport_draw.appendTarget( entBattery);

	$fx_teleport_pull.setWorldOrigin( vOrigin );
	$fx_teleport_pull.bind( entBattery);

	sys.trigger($fx_teleport_pull);
	sys.trigger($fx_teleport_draw);
	
	
	float fGoalTime = sys.getTime() + 7;
	float fTime = sys.getTime();
	float fOldTime = fTime;
	while( fTime < fGoalTime && isValidEntity( entBattery) )	{
		
		float fDelta;
		fTime = sys.getTime();
		fDelta = fTime - fOldTime;
		fOldTime = fTime;

		//move along according to the delta
		entBattery.setWorldOrigin( entBattery.getWorldOrigin() + fDelta * vPath);
		sys.waitFrame();

	}
}

//-------------------------------------------------------------------------------
// void makronInit()
//
// Sets up the Makron battle
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void makronInit()	{
	
	//sys.println("Makron init.");


	if( g_makronForm == 1)	{
		entBossMakron = $monster_makron_1;

		attatchNailableToMakron( "neck" );
		attatchNailableToMakron( "chest" );
		attatchNailableToMakron( "cannon_muzzle" );
/*		attatchNailableToMakron( "r_ankle_R" );
		attatchNailableToMakron( "l_ankle_R" );
		attatchNailableToMakron( "r_ankle_F" );
		attatchNailableToMakron( "r_ankle_f" ); */



		entBossMakron.setHealth( getBossHealthByDifficulty( MAKRON_FORM_1_HEALTH, sys.getcvar("g_skill") ));

		thread maintainMakronSpawner();

		//attack pattern 1 for now
		thread battleStyleFirstForm();
	} else if( g_makronForm == 2) {
		//sink the teleport hider
		//$mvr_hide_teleporter.time(4);
		//$mvr_hide_teleporter.move(DOWN, 256);
		
		sys.trigger($func_door_teleporter_1);
		sys.trigger($func_door_teleporter_2);
		sys.trigger($func_door_teleporter_3);
		sys.trigger($func_door_teleporter_4);
		
		//turn on teleport idle fx
		sys.trigger($func_fx_teleporteridle_1);
		sys.trigger($func_fx_teleporteridle_2);
		sys.trigger($func_fx_teleporteridle_3);
		sys.trigger($func_fx_teleporteridle_4);
		sys.trigger($func_fx_teleporteridle_5);
		sys.trigger($func_fx_teleporteridle_6);
		sys.trigger($func_fx_teleporteridle_7);
		sys.trigger($func_fx_teleporteridle_8);
	
		//turn on teleporter lights (off to save overdraw/tris)
		sys.trigger($light_teleporter_floor1_1);
		sys.trigger($light_teleporter_floor1_2);
		sys.trigger($light_teleporter_floor1_3);
		sys.trigger($light_teleporter_floor1_4);
		sys.trigger($light_teleporter_floor2_1);
		sys.trigger($light_teleporter_floor2_2);
		sys.trigger($light_teleporter_floor2_3);
		sys.trigger($light_teleporter_floor2_4);
		
		//player going through teleporter triggers effect
		//sys.trigger( $fx_teleporter_1);
		//sys.trigger( $fx_teleporter_2);
						
		//start Makron's new pattern
		thread battleStyleSecondForm();
	}

}

//-------------------------------------------------------------------------------
// void makronRecharge()
//
// runs the recharge sequence for the Makron
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void makronRecharge()	{

	//sys.println("Aroof! Makron Recharge!");

	entity entBattery =  grabTorsoBattery();
//	sys.println("waiting to face " + sys.getTime() );
	aiScriptedFaceWait( entBossMakron, entBattery, 1);
//	sys.println("Facing done  " + sys.getTime() );

	aiScriptedAnimWait( entBossMakron, "absorb_battery_start", 4, 0);
	thread maintainSelectedBattery();
	thread moveTorsoBattery( g_targetBattery );
	
	aiScriptedAnimLoop( entBossMakron, "absorb_battery_loop", 1 );
	//now, start playing cool effects.
	thread restoreMakronHealth( MAKRON_RESTORE, 5, "fx_restore" );
	sys.wait(3);
	entBattery.setShaderParm( 7, sys.getTime());
	sys.wait(2);

	clearRestoreEffects();
	
	entBattery.remove();
	sys.killthread( "maintainSelectedBattery" );
	sys.killthread( "moveTorsoBattery" );
	
	//this line moved to maintain battery so we can end the anim on either case (drain or battery destruction)
	//aiScriptedAnimWait( entBossMakron, "absorb_battery_end", 1, 1);

}

//-------------------------------------------------------------------------------
// clearRestoreEffects
//
// Turns off all makron restore fx
//
// jshepard | Jul 2005
//-------------------------------------------------------------------------------
void	clearRestoreEffects()	{

	$fx_teleport_pull.stop();
	$fx_teleport_draw.stop();
	
	$fx_teleport_pull.unbind();
	$fx_teleport_draw.unbind();
	$tgt_teleport_pull.unbind();

	$dmg_batteryshell_1.unbind();
	$dmg_batteryshell_1.setWorldOrigin( $tgt_physics_home.getWorldOrigin() );

}

//-------------------------------------------------------------------------------
// maintainSelectedBattery
//
// Keeps watch over the battery the Makron is pulling out and allows it to be blown up.
//
// jshepard | Jul 2005
//-------------------------------------------------------------------------------
void maintainSelectedBattery()	{
	
	//move the damage shell onto the battery
	$dmg_batteryshell_1.setWorldOrigin( g_targetBattery.getWorldOrigin() );
	$dmg_batteryshell_1.bind( g_targetBattery );

	//restore health
	$dmg_batteryshell_1.setHealth( 2000 );
//	sys.println( "Shell health = " + $dmg_batteryshell_1.getHealth() );
	
	//why are we setting the shell health so high? func_damageables remove themselves when health reaches 0, so we want to 
	//ensure that doesn't happen to us. 

	//watch
	while ( $dmg_batteryshell_1.getHealth() > 1900 && isValidEntity( g_targetBattery )	)	{
		//do nothing.
		sys.waitFrame();
	}

	//if the battery was blown up (health low) then do the blow up stuff.
	if( $dmg_batteryshell_1.getHealth() <= 1900) {
		sys.killthread( "maintainSelectedBattery" );
		sys.killthread( "moveTorsoBattery" );
		sys.killthread( "makronRecharge" );	
		sys.killthread( "restoreMakronHealth" );

		//turning this off should stop the healing process
		g_allowHealthRestore = 0;
		clearRestoreEffects();
		sys.println(" Battery destroyed!! ");

		sys.waitFrame();
		g_targetBattery.remove();	
		//explosion	
	} else {

		//move the shell home
		clearRestoreEffects();

	}
	
	//end the draining anim.
	if( g_makronForm < 3)	{
		aiScriptedAnimWait( entBossMakron, "absorb_battery_end", 1, 1);
	}


}


//-------------------------------------------------------------------------------
// restoreMakronHealth()
//
// restores [amount] health to the makron over [seconds] seconds
//
// jshepard | May 2005
//-------------------------------------------------------------------------------
void restoreMakronHealth( float amount, float seconds, string fx )	{

	if( !seconds )	{
		sys.warning("restoreMakronHealth: Thanks for the divide by zero, tough guy.");
		return;
	}
	//play the restore FX
	entBossMakron.jointCrawlEffect ( fx, seconds );

	float HPS = amount / seconds;
	float fGoalTime = sys.getTime() + seconds;
	float fTime = sys.getTime();
	float fOldTime = fTime;
	g_allowHealthRestore = 1;
	while( fTime < fGoalTime && g_allowHealthRestore == 1)	{
		
		float fDelta;
		fTime = sys.getTime();
		fDelta = fTime - fOldTime;
		fOldTime = fTime;

		//move along according to the delta
		entBossMakron.setHealth( entBossMakron.getHealth() + fDelta * HPS);
		if( entBossMakron.getHealth() > getBossHealthByDifficulty( MAKRON_MAX_HEALTH,  sys.getcvar("g_skill") ))	{
			entBossMakron.setHealth( getBossHealthByDifficulty( MAKRON_MAX_HEALTH,  sys.getcvar("g_skill") ) );
		}
		sys.waitFrame();

	}
	
	g_allowHealthRestore = 0;

}

//-------------------------------------------------------------------------------
// void prepBossRoom()
//
// Makes sure the boss room is dark and ominousy
//
// jshepard | Jun 2005
//-------------------------------------------------------------------------------
void prepBossRoom()
{
	//make the lights all purpley
	thread fadeAllTargets( $tgt_lightfade_1, '0.1 0.1 0.1', $tgt_lightfade_1.getVectorKey( "_color") );
	thread fadeAllTargets( $tgt_lightfade_2, '0.1 0.1 0.1', $tgt_lightfade_2.getVectorKey( "_color") );
	
	$door_brain_1.open();

} //-------------- End void prepBossRoom ---------------


// Checks to see if the Makron is stuck in a corner
void checkMakronCorner()	{

	while( g_makronForm == 1)	{

		//check to see if he's touching any of the four corner triggers.
		float t = 1;
		entity entTrigger;
		float bCorner = 0;

		for( t = 1; t <= 4; t++ )	{
			entTrigger = sys.getEntity("tgr_makron_corner_" + t);
			if( entBossMakron.touches( entTrigger ) == 1)	{
				sys.println("Makron in the corner!");
				entBossMakron.toggleCornerState( 1 );
				t = 10;
				bCorner = 1;
			}
			
		}

		if( bCorner == 0 )	{
			entBossMakron.toggleCornerState( 0 );
		}
		//wait a second
		sys.wait(1);
	}

}

//handles the makron teleportation.
void makronTeleportEffect()	{
	
	sys.playWorldEffect("effects/monsters/teleport_makron.fx", entBossMakron.getWorldOrigin(), '0 0 1');

}
//handles the makron teleportation.
void makronTeleport()	{

	//move him to the center of the map
	entBossMakron.setWorldOrigin( $fx_makron_teleport_big.getWorldOrigin() );

	//play the first teleport effect
	$fx_makron_teleport_little.start();

	//wait a tick or 2
	sys.wait(3);

	$fx_makron_teleport_little.stop();
	$fx_makron_teleport_big.start();

	entBossMakron.show();
	entBossMakron.enablePatternMode();



}


}
/*
$fx_makron_teleport_big
*/

