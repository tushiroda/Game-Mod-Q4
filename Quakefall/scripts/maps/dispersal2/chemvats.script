namespace chemvats
{
float	allowThisSequenceToExecute = 1;
float	moveVatsAgain = 0;
float	vatSpeed = 60;
float	gAllowAcidSpray = 1;

vector g_vOriginalVatPosition;
vector g_vOriginalMoverPosition;



void MoveVatOnDeck(float whichVat, float numVats, vector onDeckPos, entity spkr)
{
	entity	curVatMover;
	string	curVatMoverName;
	
	curVatMoverName = "vatMover_" + (whichVat%numVats);
	curVatMover = sys.getEntity(curVatMoverName);
	curVatMover.accelTime(0);
	curVatMover.decelTime(0);
	curVatMover.speed(20);
	curVatMover.moveToPos(onDeckPos);
	sys.waitFor(curVatMover);
	sys.trigger(spkr);
	//sys.println( curVatMoverName + " is done moving!");
}

void MoveVatOnDeckSilent(float whichVat, float numVats, vector onDeckPos)
{
	entity	curVatMover;
	string	curVatMoverName;
	
	curVatMoverName = "vatMover_" + (whichVat%numVats);
	curVatMover = sys.getEntity(curVatMoverName);
	curVatMover.accelTime(0);
	curVatMover.decelTime(0);
	curVatMover.speed(20);
	curVatMover.moveToPos(onDeckPos);
	sys.waitFor(curVatMover);
}

void NiftyAcidStuff(entity curVat, entity curVatClip, entity curVatMover, entity curVatDoorA, entity curVatDoorB)
{
	// play sound indicating vat has arrived in position to open
	sys.trigger($vatReadyToOpen);
	curVatMover.stopMoving();
	sys.wait(2);
	
	if( gAllowAcidSpray )	{
		// move arm into place to spray acid
		$acidArm.playAnim( ANIMCHANNEL_ALL, "start");
		sys.wait(2.5);

		// trigger acid-spraying effect
		$acidArm.playEffect("fx_acidSpray", "upper_nozzle_effect", false);

		//kill the player if he's there
		if( $tgr_acid_check.touches($player1))	{
			//$player1.kill();
			//$player1.directDamage( $player1, "damageGib");
			$acidDamage.directDamage( $player1, "damage_gib");
		}

		sys.wait(1);
		
		// move arm into place to spray bottom vat. don't wait for this anim to finish...let the vat doors open
		//while arm is moving
		$acidArm.playAnim( ANIMCHANNEL_ALL, "move");
		sys.wait(1);

	}
	
	// open doors for the top vat
	//curVatDoorA.playAnim( ANIMCHANNEL_ALL, "open_doors");
	//curVatDoorB.playAnim( ANIMCHANNEL_ALL, "open_doors");
	curVatClip.setContents(0);
	sys.wait(1);
	//curVatDoorA.playAnim( ANIMCHANNEL_ALL, "close_doors");
	//curVatDoorB.playAnim( ANIMCHANNEL_ALL, "close_doors");
	curVatClip.setContents(CONTENTS_SOLID);
	
	// trigger acid-spraying effect
	sys.wait(3); // the anim to get into the next position is pretty long, hence 6s wait
	if( gAllowAcidSpray )	{
		$acidArm.playEffect("fx_acidSpray", "lower_nozzle_effect", false);
		sys.wait(1);
	}

	// move arm back into intitial position
	$acidArm.playAnim( ANIMCHANNEL_ALL, "finish");
	sys.wait(1);
	
	// open doors for the bottom vat
	//$vat_bottomDoorA.playAnim( ANIMCHANNEL_ALL, "open_doors");
	//$vat_bottomDoorB.playAnim( ANIMCHANNEL_ALL, "open_doors");
	$vat_bottomClip.setContents(0);
	sys.wait(2);
	//$vat_bottomDoorA.playAnim( ANIMCHANNEL_ALL, "close_doors");
	//$vat_bottomDoorB.playAnim( ANIMCHANNEL_ALL, "close_doors");
	$vat_bottomClip.setContents(CONTENTS_SOLID);
	
}

void BottomVatToPosition1()
{
	$vat_bottomMover.speed(vatSpeed*0.75);
	$vat_bottomMover.moveTo($bottomVatPos1);
	sys.waitFor($vat_bottomMover);
	// play sound to indicate vat has reached its destination
	sys.trigger($bottomVatReadyToOpen);
}

void BottomVatToPosition2()
{
	$vat_bottomMover.speed(vatSpeed*0.75);
	$vat_bottomMover.moveTo($bottomVatPos2);
}

void MoveMainVat(float whichVat, float numVats, vector frontPosition, vector initVatPosition, vector vatPosition1, vector vatPosition2,
					vector initialVatAngles)
{	
	entity	curVatMover;
	string	curVatMoverName;
	entity	curVatClip;
	string	curVatClipName;
	string	curVatDoorName;
	entity	curVatDoorA;
	entity	curVatDoorB;
	float	vatHeight;
	float	aTime;
	entity	curVat;
	string	curVatName;
	
	vatHeight = 128;
	
	curVatMoverName = "vatMover_" + whichVat;
	
	curVatMover = sys.getEntity(curVatMoverName);
	curVatClipName = "vatclip" + whichVat;
	curVatClip = sys.getEntity(curVatClipName);
	curVatName = "chemvat" + whichVat;
	curVat = sys.getEntity(curVatName);
	curVatDoorName = "chemVatDoorA" + whichVat;
	curVatDoorA = sys.getEntity(curVatDoorName);
	curVatDoorName = "chemVatDoorB" + whichVat;
	curVatDoorB = sys.getEntity(curVatDoorName);
	
	curVat.setKey("bindConstraint vatConstraint1", "fixed body hook 150000000");
	curVat.bind(curVatMover);

	//turn the warning light on
	$light_vat_warning.On();

	// move front vat into position to be grabbed by overhead tracks
	MoveVatOnDeck(whichVat, numVats, frontPosition, $vatStartOnTracks);
	
	// change the constraint on this vat from "fixed" to "hinge"
	curVat.unbind();
	curVat.setKey("bindConstraint vatConstraint1", "hinge body hook 10"); //150000000");
	curVat.bind(curVatMover);
	
	// start the vat moving forward on the overhead tracks
	curVatMover.speed(vatSpeed);
	curVatMover.accelTime(0);
	curVatMover.decelTime(1);
	//sys.println( curVatMover.getName() + "should be moving now... ");
	curVatMover.moveToPos(vatPosition1);
	
	//curVatMover.setLinearVelocity('0 0 100');
	
	// special timing to open doors for vat
	sys.wait(2.8);//4.4
	sys.trigger($func_door_45);
	
	// the timing here is kind of arbitrary
	thread BottomVatToPosition1();
	
	//StartDraggingSparks();	
	sys.waitFor(curVatMover);

	//turn off warning light
	$light_vat_warning.Off();

	
	//
	// do nifty acid stuff if the heart is still running
	//
	
	NiftyAcidStuff(curVat, curVatClip, curVatMover, curVatDoorA, curVatDoorB);


	// move bottom vat out of view
	thread BottomVatToPosition2();
	
	// move vat out of view
	curVatMover.speed(vatSpeed);
	curVatMover.accelTime(5);
	curVatMover.moveTo($vatPosition2);
	sys.waitFor(curVatMover);	

	//move it up for a few seconds...
	//curVatMover.setLinearVelocity('0 0 200');
	//sys.wait(3);

	//curVatMover.setWorldOrigin($initVatPosition.getWorldOrigin());

	//k that's enough
	//sys.println( curVatMover.getName() + " is runnin' back...");
	
	

	//Screw this noise

	curVatMover.speed(150);//300
	curVatMover.accelTime(0.5);
	curVatMover.decelTime(0.5);
	curVatMover.moveTo($vatRecycle_1);
	sys.waitFor(curVatMover);	
	curVatMover.moveTo($vatRecycle_2);
	sys.waitFor(curVatMover);

	curVat.unbind();
	sys.waitFrame();

	curVatMover.setWorldOrigin(g_vOriginalMoverPosition);
	curVat.setWorldOrigin(g_vOriginalVatPosition);
	curVat.setAngles('0 0 0');	
	curVat.setKey("bindConstraint vatConstraint1", "fixed body hook 150000000");
	curVat.bind(curVatMover);
	//sys.waitFrame();
	//curVat.setAngles('0 0 0');	
	


//	curVatMover.moveTo($initVatPosition);
//	sys.waitFor(curVatMover);
	
	/*
	
	*/

	//sys.println( curVatMover.getName() + " should be back! ");
	
	
	
	moveVatsAgain = 1;
}

void AcidVatProcessing()
{
	// if the AcidVatProcessing function gets called more than once, bad things happen
	if (!allowThisSequenceToExecute)
	{
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		// sys.println("Don't call AcidVatProcessing function more than once!!!!");
		return;
	}
	
	allowThisSequenceToExecute = 0;
	
	vector	initVatPosition;
	vector	vatPosition1;
	vector	vatPosition2;
	vector	vatStartA;
	vector	vatStartB;
	vector	vatStartC;
	vector	vatStartD;
	vector	vatStartE;
	vector	initialVatAngles;
	entity	curVatMover;
	string	curVatMoverName;
	float	i;
	float	numVats;

	//turn off the light
	$light_vat_warning.Off();
	
	//number of vats we use.
	numVats = 3;
	initVatPosition = $initVatPosition.getOrigin();
	vatPosition1 = $vatPosition1.getOrigin();
	vatPosition2 = $vatPosition2.getOrigin();
	
	//bind the vats to their movers!
	$chemvat0.setKey("bindConstraint vatConstraint1", "fixed body hook 150000000");
	$chemvat1.setKey("bindConstraint vatConstraint1", "fixed body hook 150000000");
	$chemvat2.setKey("bindConstraint vatConstraint1", "fixed body hook 150000000");

	$chemvat0.bind($vatMover_0);
	$chemvat1.bind($vatMover_1);
	$chemvat2.bind($vatMover_2);

	//here is where all this stuff needs to start from.
	g_vOriginalVatPosition = $chemvat2.getWorldOrigin();
	g_vOriginalMoverPosition = $vatMover_2.getWorldOrigin();

	sys.trigger($vatLoopingSound1);

	// record position of front vat for future use
	//vatStartA = $vatStartA.getOrigin();
	//vatStartB = $vatStartB.getOrigin();
	//vatStartC = $vatStartC.getOrigin();
	//vatStartD = $vatStartD.getOrigin();

	vatStartA = $tgt_vatStart_1.getOrigin();
	vatStartB = $tgt_vatStart_2.getOrigin();
	vatStartC = $tgt_vatStart_3.getOrigin();
	//vatStartD = $tgt_vatStart_4.getOrigin();
	
	// save angles for resetting purposes later
	initialVatAngles = '0 0 0'; //$vatPitch_0.getAngles();
	
	i = 0;
	while(1)
	{
		thread MoveMainVat(i, numVats, vatStartA, initVatPosition, vatPosition1, vatPosition2, initialVatAngles);
			
		sys.wait(1.5);
		thread MoveVatOnDeckSilent(i+1, numVats, vatStartB);
		sys.wait(.5);
		thread MoveVatOnDeck(i+2, numVats, vatStartC, $vatClunk_2);
		//sys.wait(.5);
		//thread MoveVatOnDeck(i+3, numVats, vatStartD, $vatClunk_3);
		
		while (moveVatsAgain == 0)
		{
			sys.wait(1);
		}
		moveVatsAgain = 0;
		i = (i+1)%numVats;
	}
}

//-------------------------------------------------------------------------------
// void beginGibConveyor()
//
// Starts a treadmill of gib droppings for the acid vats
//
// jshepard | Sep 2004
//-------------------------------------------------------------------------------
void beginGibConveyor()
{
	//f this stupid function
	return;

	//sys.println("void beginGibConveyor::begin");
	
	while(1)	{
		//spawn a gib
		entity e;
		float f = sys.random(3);

		//if(f < 1)
			e = sys.spawn("moveable_gib_pelvis_pork");
		//else if (f < 2)
		//	e = sys.spawn("moveable_gib_rup_leg_pork");
		//else
		//	e = sys.spawn("moveable_gib_rup_arm_pork");
		
		//vector v = $tgt_gibSpawn_1.getWorldOrigin();
		vector v = $initVatPositionBottom.getWorldOrigin();
		e.setWorldOrigin(v);

		//we need an activator to ensure that the gibs hop and melt when they should.
		entity act = sys.spawn("func_activator");
		act.setKey( "stay_on", "1");
		act.setWorldOrigin(v);
		act.bind(e);
		act.setKey("myGib",e.getName());
	
		//wait
		sys.wait(5 + sys.random(3));

	}

	//sys.println("void beginGibConveyor::end");

} //-------------- End void beginGibConveyor ---------------

//-------------------------------------------------------------------------------
// void gibHop()
//
// Hops the gibs into the vats so they can be all mushified
//
// jshepard | Sep 2004
//-------------------------------------------------------------------------------
void gibHop(entity entGib)
{
	//sys.println("void gibHop::begin");
	
	//so whatever touches this trigger gets hopped into the vat.
	//Except Player1.

	if(entGib == $player1)
		return;

	//what we have is an activator-- it should have a gib attatched to it.
	entGib = sys.getEntity(entGib.getKey("myGib"));

	//if not, return out
	if(entGib == $null_entity)
		return;

	entGib.applyImpulse(entGib,entGib.getWorldOrigin(),'400 800 800');

	

	//sys.println("void gibHop::end");

} //-------------- End void gibHop ---------------

//-------------------------------------------------------------------------------
// killFallenGibs()
//
// Cleans up any vat processor gibs that have fallen to the floor
//
// jshepard | Sep 2004
//-------------------------------------------------------------------------------
void killFallenGibs(entity entActivator)
{
	//sys.println("killFallenGibs::begin");
	
	if(entActivator == $player1)
		return;

	//sys.println("Die " + entActivator.getName() + "!");

	entity entGib;
	//what we have is an activator-- it should have a gib attatched to it.
	entGib = sys.getEntity(entActivator.getKey("myGib"));

	//if not, return out
	if(entGib == $null_entity)
		return;

	entGib.remove();
	entActivator.remove();

	//sys.println("killFallenGibs::end");

} //-------------- End killFallenGibs ---------------

void TestGib()
{
	$chemvat3_1.disableAFPush();

	while(1)
	{
		entity e = sys.spawn("moveable_gib_pelvis_pork");
		vector v = $tgt_gibFall.getWorldOrigin();
		e.setWorldOrigin(v);
		sys.waitFrame();
		sys.waitFrame();
		e.applyImpulse(e,e.getWorldOrigin(),'0 0 300');
		e.disableClip();
		sys.wait(1);
	
	}

}
} // namespace chemvats
