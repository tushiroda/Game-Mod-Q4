#include "scripts/doom_defs.script"

namespace map_convoy2b
{

//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// Global variables for magnet area
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

vector maxWest;
vector maxEast;
vector maxNorth;
vector maxSouth;

float inMagnetArea;
float magnetIsDone;
entity previousObject;

float eastWest;			// 0 means player is on west side , 1 means player is on east side , 2 means in the middle

float gladiatorWestNum;
float gladiatorEastNum;

//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// Scripts for magnet area
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
// Magnet area roller monster scripts
//-------------------------------------------------------------------------------------------

// Not used at the moment

/*
void shootBallEast( entity ball )
{
	ball.setLinearVelocity( '320 0 40' );
	//sys.println( "ShootRoller!" );
}

void shootBallWest( entity ball )
{
	ball.setLinearVelocity( '-320 0 40' );
	//sys.println( "ShootRoller!" );
}
*/

//-------------------------------------------------------------------------------------------
// Magnet area gladiator scripts
//-------------------------------------------------------------------------------------------

// Not used at the moment

/*

void gladiatorWestBehavior( entity gladiatorWest )
{
	float gladiatorHealth;

	float dist1 , dist2, dist3;

	float rand;

	entity gotoTether;

	float wanderTime;



	while( 1 )
	{
		gladiatorHealth = gladiatorWest.getHealth( );

		//sys.println( "gladiatorWest health = " + gladiatorHealth );

		if ( gladiatorHealth < 100 )
		// retreat and heal if injured

		{
			//sys.println( "Low health" );

			gladiatorWest.becomePassive( 1 );
			gladiatorWest.setKey( "forceRun" , "1" );

			dist1 = gladiatorWest.distanceTo( $tetherWest_1 );
			dist2 = gladiatorWest.distanceTo( $tetherWest_2 );
			dist3 = gladiatorWest.distanceTo( $tetherWest_3 );

			if ( ( dist1 > dist2 ) && ( dist1 > dist3 ) )
			{
				sys.trigger( $tetherWest_1 );
			}

			else if ( dist2 > dist3 )
			{
				sys.trigger( $tetherWest_2 );
			}

			else
			{
				sys.trigger( $tetherWest_3 );
			}

			sys.wait( 20 );

			gladiatorWest.setHealth( 200 );
		}

		else if ( eastWest == 0 )
		// attack player if he is close

		{
			//sys.println( "Attacking" );

			sys.trigger( $tetherWestBehind );

			gladiatorWest.setKey( "forceRun" , "1" );
			gladiatorWest.becomeAggressive( );
			gladiatorWest.setEnemy( $player1 );

			sys.wait( 5.0 );
		}

		else
		// wander if the player is far away

		{
			//sys.println( "Wandering" );

			gladiatorWest.setKey( "forceWalk" , "1" );
			gladiatorWest.becomePassive( 0 );

			rand = ( sys.randomInt( 6 ) ) + 4;
			gotoTether = sys.getEntity( "$tetherWest_" + rand );

			sys.trigger( gotoTether );

			wanderTime = sys.randomInt( 9 ) + 6;

			while( wanderTime > 0 )
			{
				if ( gladiatorWest.getEnemy( ) == $player1 )
				// attack briefly if interrupted

				{
					//sys.println( "Retaliating" );

					wanderTime = 0;

					sys.trigger( $tetherWestBehind );

					gladiatorWest.setKey( "forceRun" , "1" );
					gladiatorWest.becomeAggressive( );
					gladiatorWest.setEnemy( $player1 );

					sys.wait( 1.5 );
				}

				wanderTime = wanderTime - 1;

				sys.wait( 1.0 );
			}

			sys.trigger( $tetherWestNone );

			sys.wait( 1.0 );
		}
	}
}

void gladiatorWestSpawn( )
{
	sys.wait( sys.randomInt( 10 ) + 5 );

	float pickSpawnPoint = sys.randomInt( 1 ) + 1;

	entity spawnPoint = sys.getEntity( "westGladiator_" + pickSpawnPoint );

	sys.setSpawnArg( "classname", "monster_gladiator" );

	sys.setSpawnArg( "origin", spawnPoint.getWorldOrigin( ) );

	sys.setSpawnArg( "angle" , "0" );

	sys.setSpawnArg( "name" , "gladiatorWest" + gladiatorWestNum );

	sys.setSpawnArg( "script_death" , "gladiatorWestSpawn" );

	entity gladiatorWest = sys.spawn( "monster_gladiator" );

	//sys.println( "Before: " + ( $tetherWestBehind.getKey( "target" ) ) );

	$tetherWest_1.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_2.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_3.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_4.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_5.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_6.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_7.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_8.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_9.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWest_10.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWestNone.setKey( "target" , gladiatorWest.getName( ) );
	$tetherWestBehind.setKey( "target" , gladiatorWest.getName( ) );

	//sys.println( "After: " + ( $tetherWestBehind.getKey( "target" ) ) );

	thread gladiatorWestBehavior( gladiatorWest );

	//sys.println( "Spawned " + gladiatorWest.getName( ) );
}

*/

void bug1()
{
	$bug_1.show();
	setNewTimes( $bugMover_1 , 5 , 0 , 1 );
	$bugMover_1.startSpline( $func_splinemover_3 );
	sys.waitFor( $bugMover_1 );
	sys.waitFrame();
	$bug_1.unbind();
	sys.waitFrame();
	sys.trigger($aggressiveBug_1);
	sys.trigger($bug_1);	
}

void bug2()
{
	$bug_2.show();
	setNewTimes( $bugMover_2 , 7 , 0 , 2 );
	$bugMover_2.startSpline( $func_splinemover_4 );
	sys.waitFor( $bugMover_2 );
	sys.waitFrame();
	$bug_2.unbind();
	sys.waitFrame();
	sys.trigger($aggressiveBug_2);
	sys.trigger($bug_2);	
}

void bug3()
{
	$bug_3.show();
	setNewTimes( $bugMover_3 , 5 , 0 , 1 );
	$bugMover_3.startSpline( $func_splinemover_1 );
	sys.waitFor( $bugMover_3 );
	sys.waitFrame();
	$bug_3.unbind();
	sys.waitFrame();
	sys.trigger($aggressiveBug_3);
	sys.trigger($bug_3);	
}

void bug4()
{
	$bug_4.show();
	setNewTimes( $bugMover_4 , 5 , 0 , 1 );
	$bugMover_4.startSpline( $func_splinemover_2 );
	sys.waitFor( $bugMover_4 );
	sys.waitFrame();
	$bug_4.unbind();
	sys.waitFrame();
	sys.trigger($aggressiveBug_4);
	sys.trigger($bug_4);	
}


void firstBugs()
{
	thread bug1();
	thread bug2();
	sys.wait(2);
	thread bug3();
	sys.wait(.5);
	thread bug4();
}

void jumpBug()
{
	$bug_5.show();
	setNewTimes( $bugMover_5 , 1 , 0 , .5 );
	$bugMover_5.startSpline( $func_splinemover_5 );
	sys.waitFor( $bugMover_5 );
	sys.waitFrame();
	$bug_5.unbind();
	sys.waitFrame();
	sys.trigger($aggressiveBug_5);
	sys.trigger($bug_5);	
}


void toggleEastWest( entity trig )
{
	if ( ( trig.getName( ) == "toggleEastWest_West" ) && ( eastWest != 0 ) )
	{
		eastWest = 0;
		//sys.println( "eastWest = " + eastWest );
	}
	else if ( ( trig.getName( ) == "toggleEastWest_East" ) && ( eastWest != 1 ) )
	{
		eastWest = 1;
		//sys.println( "eastWest = " + eastWest );
	}
	else if ( ( trig.getName( ) == "toggleEastWest_Center" ) && ( eastWest != 2 ) )
	{
		eastWest = 2;
		//sys.println( "eastWest = " + eastWest );
	}
}

void gladWest( )
{
	sys.wait( 10 );
	sys.trigger( $magnet_gladiator_2 );
	sys.wait( 2 );
	sys.trigger( $magnet_relay_6 );
}

void gladEast( )
{
	sys.wait( 10 );
	sys.trigger( $magnet_gladiator_4 );
	sys.wait( 2 );
	sys.trigger( $magnet_relay_14 );
}

//-------------------------------------------------------------------------------------------
// Magnet area roller scripts
//-------------------------------------------------------------------------------------------

void roller1East( entity roller )
{
	vector velo;
	float distance = sys.randomInt( 1000 );
	distance += 2000;
	velo_x = distance;
	velo_z = ( distance / 10 );

	roller.setLinearVelocity( velo );
	sys.wait( 2 );
	roller.becomeAggressive( );
}

void roller1West( entity roller )
{
	vector velo;
	float distance = sys.randomInt( 1000 );
	distance += 2000;
	velo_x = ( distance * -1 );
	velo_z = ( distance / 10 );

	roller.setLinearVelocity( velo );
	sys.wait( 2 );
	roller.becomeAggressive( );
}

void roller1North( entity roller )
{
	vector velo;
	float distance = sys.randomInt( 300 );
	distance += 700;
	velo_y = distance;
	velo_z = ( distance / 7 );

	roller.setLinearVelocity( velo );
	sys.wait( 2 );
	roller.becomeAggressive( );
}

void roller1South( entity roller )
{
	vector velo;
	float distance = sys.randomInt( 300 );
	distance += 700;
	velo_y = ( distance * -1 );
	velo_z = ( distance / 7 );

	roller.setLinearVelocity( velo );
	sys.wait( 2 );
	roller.becomeAggressive( );
}

//-------------------------------------------------------------------------------------------
// Magnet area machine scripts
//-------------------------------------------------------------------------------------------

// This no longer drops it on the player as per the id/ATVI visit.  The old version of this function is
//	commented out below this func.
void dropOnSide( entity objectToDrop )
{
	vector target, head, arm;	// Locations of target, magnet head, and magnet arm
	float armX, headY;		// How far to move arm and head of magnet

	// Calculate movement
	$magnetHead_1.time( 2 );
	$magnetHead_1.accelTime( 0.6 );
	$magnetHead_1.decelTime( 0.6 );

	$magnetArm_1.time( 2 );
	$magnetArm_1.accelTime( 0.6 );
	$magnetArm_1.decelTime( 0.6 );

	//sys.println( "moving to side of aqueduct" );//starting pickupObject" );

	// pick a random point along the length of the aqueduct
	arm = $magnetArm_1.getWorldOrigin();
	armX = arm_x - (sys.random( maxEast_x - maxWest_x) + maxWest_x);

	$magnetArm_1.move(180, armX );

	// pick a random side to drop it onto...
	target = $magnetHead_1.getWorldOrigin();

	if ( sys.random(1) > 0.5 )
	{
		headY = target_y - maxSouth_y;
	}
	else
	{
		headY = target_y - maxNorth_y;
	}

	$magnetHead_1.move(270, headY);
	sys.waitFor( $magnetHead_1 );
	sys.wait( 1.0 );

	objectToDrop.unbind( );
	//sys.println( "object dropped" );//starting pickupObject" );
//	thread noggenBonker( objectToDrop );
}


void pickUpObject( entity objectToPickUp )
{
	vector target, head , arm;	// Locations of target, magnet head, and magnet arm

	float armX , headY;		// How far to move arm and head of magnet

	vector magnetStrength;		// Impulse to apply to objects caught by magnet

	float increment = 0.05;		// Applies magnet strength over time

	//sys.println( "starting pickupObject" );
	// Calculate movement
	$magnetHead_1.time( 2 );
	$magnetHead_1.accelTime( 0.6 );
	$magnetHead_1.decelTime( 0.6 );

	$magnetArm_1.time( 2 );
	$magnetArm_1.accelTime( 0.6 );
	$magnetArm_1.decelTime( 0.6 );

	target = objectToPickUp.getWorldOrigin( );

	head = $magnetHead_1.getWorldOrigin( );
	arm = $magnetArm_1.getWorldOrigin( );

	armX = target_x - arm_x;
	headY = target_y - head_y;

	$magnetHead_1.move( 90 , headY );
	$magnetArm_1.move( 0 ,armX );

	sys.waitFor( $magnetHead_1 );

	while ( increment < 1.0 )
	{
		sys.wait( 0.05 );

		magnetStrength = VectorSubtract( $magnetPullToHere.getWorldOrigin( ) , objectToPickUp.getWorldOrigin( ) );
		magnetStrength = sys.vecNormalize(magnetStrength);

		magnetStrength_x = magnetStrength_x * ( increment * increment ) * 3000;
		magnetStrength_y = magnetStrength_y * ( increment * increment ) * 3000;
		magnetStrength_z = magnetStrength_z * ( increment * increment ) * 3000;

		// //sys.println( magnetStrength );
		objectToPickUp.setLinearVelocity( magnetStrength );
		increment = increment + 0.05;
	}

	//sys.println( "object has been picked up" );
	sys.trigger( $spkr_magnet_attach_1 );
	objectToPickUp.bind( $magnetPullToHere );
	sys.wait(1);
	dropOnSide( objectToPickUp );
}

void magnetsEnd( )
{
	inMagnetArea = 0;
}

void magnetsStart( )
{
	// Initialize some global variables
	inMagnetArea = 1;

	maxWest = $magnetMaxWest.getWorldOrigin( );
	maxEast = $magnetMaxEast.getWorldOrigin( );
	maxNorth = $magnetMaxNorth.getWorldOrigin( );
	maxSouth = $magnetMaxSouth.getWorldOrigin( );

	float objectNumber = 1;
	float numberOfObjects = 9;

	// Main loop
	entity ent;
	while( inMagnetArea == 1 && objectNumber < numberOfObjects )
	{
		ent = sys.getEntity( "magnetTrashBig_" + objectNumber );
		pickUpObject( ent );

		sys.wait( 2.0 );
		objectNumber++;
	}
}

/*void magnetsPreview( )
{
	eastWest = 0;

	magnetIsDone = -1;

	sys.wait( 1.0 );

	thread pickUpObject( $magnetTrashBig_First );

	while ( magnetIsDone == -1 )
	{
		sys.wait( 0.5 );
	}
}
*/
void harveyWalk( entity harvey , entity harveyTarget )
{
	sys.trigger( harvey );
	aiScriptedMoveWait( harvey , harveyTarget , 100 , 0 );
	harvey.remove( );
}

//-------------------------------------------------------------------------------------------
// grabSection
//-------------------------------------------------------------------------------------------

void grabSection( entity roadwayPiece )
{
	vector pieceLocation , armLocation;
	float distance;

	// Get locations

	pieceLocation = roadwayPiece.getWorldOrigin( );
	armLocation = $roadBuilderArm.getWorldOrigin( );

	// Move arm

	distance = ( pieceLocation_x - armLocation_x );

	$roadBuilderArm.time( 8 );
	$roadBuilderArm.accelTime( 3 );
	$roadBuilderArm.decelTime( 4.5 );
	$roadBuilderArm.move( 0 , distance );

	sys.waitFor( $roadBuilderArm );
	sys.wait( 1 );

	// Grab roadwayPiece with hands

	distance = ( armLocation_z - pieceLocation_z );

	$roadBuilderHand4.time( 8 );
	$roadBuilderHand4.accelTime( 1 );
	$roadBuilderHand4.decelTime( 2 );
	$roadBuilderHand4.move( DOWN , distance );

	sys.waitFor( $roadBuilderHand4 );
	sys.wait( 1 );

	roadwayPiece.bind( $roadBuilderHand4 );

	$roadBuilderHand4.move( UP , distance );

	sys.waitFor( $roadBuilderHand4 );
	sys.wait( 1 );
}

//-------------------------------------------------------------------------------------------
// placeSection
//-------------------------------------------------------------------------------------------

void placeSection( entity roadwayPiece , entity roadwayTarget )
{
	vector targetLocation , armLocation;
	float distance;

	// Get locations

	targetLocation = roadwayTarget.getWorldOrigin( );
	armLocation = $roadBuilderArm.getWorldOrigin( );

	// Move arm

	distance = ( targetLocation_x - armLocation_x );

	$roadBuilderArm.time( 8 );
	$roadBuilderArm.accelTime( 3 );
	$roadBuilderArm.decelTime( 4.5 );
	$roadBuilderArm.move( 0 , distance );

	sys.waitFor( $roadBuilderArm );
	sys.wait( 1 );

	// Grab roadwayPiece with hands

	distance = ( armLocation_z - targetLocation_z );

	$roadBuilderHand4.time( 8 );
	$roadBuilderHand4.accelTime( 1 );
	$roadBuilderHand4.decelTime( 2 );
	$roadBuilderHand4.move( DOWN , distance );

	sys.waitFor( $roadBuilderHand4 );
	sys.wait( 1 );

	roadwayPiece.unbind( );

	$roadBuilderHand4.move( UP , distance );

	sys.waitFor( $roadBuilderHand4 );
	sys.wait( 1 );

	// Allow magnet to move 512 units farther east.

	$magnetMaxEast.time( 0.1 );
	$magnetMaxEast.move( 0 , 512 );
	sys.waitFor( $magnetMaxEast );
	maxEast = $magnetMaxEast.getWorldOrigin( );
}

//-------------------------------------------------------------------------------------------
// startRoadbuilder
//-------------------------------------------------------------------------------------------

void startRoadbuilder( )
{
	float currentThread;

	$roadwayPiece_1.bind( $roadBuilderHand4 );

	currentThread = thread placeSection( $roadwayPiece_1 , $roadwayTarget_1 );
	sys.waitForThread( currentThread );

	thread magnetsStart( );

	thread harveyWalk( $harvey_1 , $harveyTarget_1 );

	currentThread = thread grabSection( $roadwayPiece_2 );
	sys.waitForThread( currentThread );

	// Start roller monsters

	sys.trigger( $magnetsBalcony );

	// More roadway

	currentThread = thread placeSection( $roadwayPiece_2 , $roadwayTarget_2 );
	sys.waitForThread( currentThread );

	currentThread = thread grabSection( $roadwayPiece_3 );
	sys.waitForThread( currentThread );

	thread harveyWalk( $harvey_2 , $harveyTarget_2 );

	currentThread = thread placeSection( $roadwayPiece_3 , $roadwayTarget_3 );
	sys.waitForThread( currentThread );

	currentThread = thread grabSection( $roadwayPiece_4 );
	sys.waitForThread( currentThread );

	currentThread = thread placeSection( $roadwayPiece_4 , $roadwayTarget_4 );
	sys.waitForThread( currentThread );

		
}
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// End of scripts for magnet area
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// Scripts for floor doors
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
void floorDoorUp( entity door , entity arms , entity fixture , entity light , entity floorPiece , entity steam1 , entity steam2 )
{
	// change colors and bind entities

	fixture.bind( door );
	light.bind( door );
	steam1.bind( door );
	steam2.bind( door );

	light.setColor( 1 , 0 , 0 );
	fixture.setColor( 1 , 0 , 0 );
	floorPiece.setColor( 1 , 0 , 0 );

	sys.wait( 2 );

	// movement

	door.time( 2 );
	door.accelTime( 0 );
	door.decelTime( 0 );

	arms.time( 2 );
	arms.accelTime( 0.75 );
	arms.decelTime( 0 );

	light.show( );
	sys.trigger( steam1 );
	sys.trigger( steam2 );

	door.rotateOnce( '-30 0 0' );
	arms.rotateOnce( '60 0 0' );

	sys.waitFor( door );

	sys.trigger( steam1 );
	sys.trigger( steam2 );

	sys.wait( 2 );

	// change colors

	light.setColor( 1 , 1 , 1 );
	fixture.setColor( 1 , 1 , 1 );
	floorPiece.setColor( 1 , 1 , 1 );
}

void floorDoorDown( entity door , entity arms , entity fixture , entity light , entity floorPiece , entity steam1 , entity steam2 )
{
	// change colors and bind entities

	fixture.bind( door );
	light.bind( door );
	steam1.bind( door );
	steam2.bind( door );

	light.setColor( 1 , 0 , 0 );
	fixture.setColor( 1 , 0 , 0 );
	floorPiece.setColor( 1 , 0 , 0 );

	sys.wait( 2 );

	// movement

	door.time( 2 );
	door.accelTime( 0 );
	door.decelTime( 0 );

	arms.time( 2 );
	arms.accelTime( 0 );
	arms.decelTime( 0.75 );

	sys.trigger( steam1 );
	sys.trigger( steam2 );

	door.rotateOnce( '30 0 0' );
	arms.rotateOnce( '-60 0 0' );

	sys.waitFor( door );

	sys.trigger( steam1 );
	sys.trigger( steam2 );

	sys.wait( 2 );

	// change colors

	light.hide( );

	light.setColor( 1 , 1 , 1 );
	fixture.setColor( 1 , 1 , 1 );
	floorPiece.setColor( 1 , 1 , 1 );
}

void floorDoorToggle2( entity toggleTrigger , string doorName , string stateName )
{
	entity door;			// door
	entity arms;			// rotating arm underneath door
	entity fixture;			// spotlight fixture and flares
	entity light;			// spotlight attached to door
	entity floorPiece;		// floor piece in front of door
	entity steam1;			// steam effect
	entity steam2;			// steam effect
	

	door = sys.getEntity( ( "floorDoor" + doorName ) );
	arms = sys.getEntity( ( "floorDoorArms" + doorName ) );
	fixture = sys.getEntity( ( "floorDoorFixture" + doorName ) );
	light = sys.getEntity( ( "floorDoorLight" + doorName ) );
	floorPiece = sys.getEntity( ( "floorDoorFloor" + doorName ) );
	steam1 = sys.getEntity( ( "floorDoorFxLeft" + doorName ) );
	steam2 = sys.getEntity( ( "floorDoorFxRight" + doorName ) );



	if ( toggleTrigger.getKey( stateName ) == "down" )
	{
		thread floorDoorUp( door , arms , fixture , light , floorPiece , steam1 , steam2 );

		toggleTrigger.setKey( stateName , "up" );
	}

	else
	{
		thread floorDoorDown( door , arms , fixture , light , floorPiece , steam1 , steam2 );

		toggleTrigger.setKey( stateName , "down" );
	}

}

void floorDoorToggle( entity toggleTrigger )
{
	// Door A

	if ( toggleTrigger.getKey( "doorA" ) != "0" )
	{
		thread floorDoorToggle2( toggleTrigger , toggleTrigger.getKey( "doorA" ) , "stateA" );
	}

	// Door B

	if ( toggleTrigger.getKey( "doorB" ) != "0" )
	{
		thread floorDoorToggle2( toggleTrigger , toggleTrigger.getKey( "doorB" ) , "stateB" );
	}

	// Door C

	if ( toggleTrigger.getKey( "doorC" ) != "0" )
	{
		thread floorDoorToggle2( toggleTrigger , toggleTrigger.getKey( "doorC" ) , "stateC" );
	}

	// Door D

	if ( toggleTrigger.getKey( "doorD" ) != "0" )
	{
		thread floorDoorToggle2( toggleTrigger , toggleTrigger.getKey( "doorD" ) , "stateD" );
	}
}

void floorDoorInit2( entity initTrigger , string doorName , string stateName )
{
	entity door;			// door
	entity arms;			// rotating arm underneath door
	entity fixture;			// spotlight fixture and flares
	entity light;			// spotlight attached to door
	entity floorPiece;		// floor piece in front of door
	entity steam1;			// steam effect
	entity steam2;			// steam effect

	entity toggleTrigger; 		// trigger that is typically used for toggling door states



	door = sys.getEntity( ( "floorDoor" + doorName ) );
	arms = sys.getEntity( ( "floorDoorArms" + doorName ) );
	fixture = sys.getEntity( ( "floorDoorFixture" + doorName ) );
	light = sys.getEntity( ( "floorDoorLight" + doorName ) );
	floorPiece = sys.getEntity( ( "floorDoorFloor" + doorName ) );
	steam1 = sys.getEntity( ( "floorDoorFxLeft" + doorName ) );
	steam2 = sys.getEntity( ( "floorDoorFxRight" + doorName ) );

	toggleTrigger = sys.getEntity( ( "floorDoorTrigger_" + initTrigger.getKey( "triggerNumber" ) ) );



	thread floorDoorUp( door , arms , fixture , light , floorPiece , steam1 , steam2 );

	toggleTrigger.setKey( stateName , "up" );
}

void floorDoorInit( entity initTrigger )
{
	// Door A

	if (	( initTrigger.getKey( "doorA" ) != "0" )	&&	( initTrigger.getKey( "doorsUp" ) == "AC" )	)
	{
		thread floorDoorInit2( initTrigger , initTrigger.getKey( "doorA" ) , "stateA" );
	}

	// Door B

	if (	( initTrigger.getKey( "doorB" ) != "0" )	&&	( initTrigger.getKey( "doorsUp" ) == "BD" )	)
	{
		thread floorDoorInit2( initTrigger , initTrigger.getKey( "doorB" ) , "stateB" );
	}

	// Door C

	if (	( initTrigger.getKey( "doorC" ) != "0" )	&&	( initTrigger.getKey( "doorsUp" ) == "AC" )	)
	{
		thread floorDoorInit2( initTrigger , initTrigger.getKey( "doorC" ) , "stateC" );
	}

	// Door D

	if (	( initTrigger.getKey( "doorD" ) != "0" )	&&	( initTrigger.getKey( "doorsUp" ) == "BD" )	)
	{
		thread floorDoorInit2( initTrigger , initTrigger.getKey( "doorD" ) , "stateD" );
	}
}

//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
// End of scripts for floor doors
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

//--
// Convoy Bridge Puzzle, version 1	aweldon Apr 05
//--

float magnetStatus = 1; // 0 = down, 1 = up.
float nullifyFire = 1; // 0 = allow firing, 1 = disable firing.
float nullifyArm = 0; // 0 = allow arm movement, 1 = disable arm movement.
	
void enterCrane()	{
	$player1.enterVehicle( $convoyCraneVehicle );	
}

void craneStart()	{
	
	sys.wait( 1 );
	nullifyFire = 0;
	
}

void craneEnd()		{

	nullifyFire = 1;
	
}
void craneForward()	{


	if( nullifyArm != 1 )	{
		//sys.println("LOOK MA, I'M MOVING FORWARD!");
		sys.waitFrame();
	}
	
}

void craneBack()	{

	if( nullifyArm != 1 )	{
		//sys.println("LOOK MA, I'M MOVING BACKWARD!");
		sys.waitFrame();
	}
}
// Horribly mangled version of the random magnetizer drop thing for the bridge puzzle. Forgive me!
// Much of this is unnecessary now, but framework for an expanded/polished version after alpha.

entity panelToGrab;
entity pickedUp = $null_entity;
float numPanels;
float distanceToPanel;

void grabPanel()	{

	numPanels = $panelList.numTargets();
	float panelNumber = 1;
	entity nearestPanel = sys.getEntity( "roadPanel_" + panelNumber );

	while( panelNumber < numPanels )	{
		
		panelNumber++;

		// If the distance from the magnet to the selected panel is less than the distance from the magnet to the previously defined panel:
		if ( ( $magnetTarget.distanceTo( sys.getEntity( "roadPanel_" + panelNumber ) ) ) < ( $magnetTarget.distanceTo( nearestPanel) ) )
		{
			nearestPanel = sys.getEntity( "magnetTrashBig_" + panelNumber );
		}
	}

	//Once all panels are cycled, we have a final winner! For now, this is silly, because there is only one!
	
	//sys.println( "Will pick up " + nearestPanel.getName( ) + " if all conditions are met.");
	panelToGrab = nearestPanel;
	vector temp1 = $magnetTarget.getWorldOrigin();
	vector temp2 = panelToGrab.getWorldOrigin();
	distanceToPanel = temp1_x - temp2_x;
	
	//sys.println( "Linear distance between magnet and target is: " + distanceToPanel );
	
}

void manualPickup()	{
	
	if( !isValidEntity( pickedUp ) ){
	
		// Retrieve the nearest panel for all your lifting needs	
		grabPanel();
	
		// If the nearest panel is within range to pick up
		if( -224 < distanceToPanel && distanceToPanel < 224  )	{
			vector magnetStrength;		// Impulse to apply to objects caught by magnet
			float increment;		// Applies magnet strength over time
			vector magnet = $magnetTarget.getWorldOrigin();
			vector panel = panelToGrab.getWorldOrigin();
		
			increment = 0.1;
		
			while ( increment < 1.0 )
			{
				sys.wait( 0.1 );
		
				magnetStrength = VectorSubtract( magnet , panel );
		
				magnetStrength = sys.vecNormalize(magnetStrength);
		
				magnetStrength_x = magnetStrength_x * ( increment * increment ) * 1000;
				magnetStrength_y = magnetStrength_y * ( increment * increment ) * 1000;
				magnetStrength_z = magnetStrength_z * ( increment * increment ) * 1000;
		
				// //sys.println( magnetStrength );
		
				panelToGrab.setLinearVelocity( magnetStrength );
		
				increment = increment + 0.1;
			}
		
			panelToGrab.bind( $magnetTarget );
		sys.trigger( $spkr_magnet_attach_2 );

			pickedUp = panelToGrab;
		
			sys.wait( 0.5 );
		}
	}
	
	// if pickedUp is valid, drop it right here.
	else if( isValidEntity( pickedUp ) )	{
		
	sys.trigger( $spkr_magnet_release_2 );
		pickedUp.unbind();
		pickedUp = $null_entity;
		
	}
}

// New stuff added for vehicle support
void magnetChange()	{
	
	
	if( nullifyFire != 1 )	{
		
		nullifyFire = 1;
		sys.setSpawnArg( "classname", "target_null" );
		sys.setSpawnArg( "origin", $convoyCraneVehicle.getWorldOrigin() );
		entity craneLock = sys.spawn( "target_null" );
		$convoyCraneVehicle.bind( craneLock );
		sys.wait(1);
			
		if( magnetStatus == 1 )	{
			//sys.println("LOOK MA, I'M DROPPING TO DONE PICK STUFF UP!");
			$craneMagnet.time( 4 );
			$craneMagnet.move( DOWN , 256 );
			sys.wait( 4 );
			magnetStatus = 0;
			manualPickup();
		}
		
		else if( magnetStatus == 0 )	{
			manualPickup();
			if( !isValidEntity( pickedUp ) ) {
				//sys.println("I'M MOVING BACK UP!");
				$craneMagnet.time( 4 );
				$craneMagnet.move( UP , 256 );
				sys.wait( 4 );
				magnetStatus = 1;
			}

		}

		nullifyFire = 0;
		$convoyCraneVehicle.unbind();		
		craneLock.remove();
	}	
	
	else	{
		//sys.println("OVERRIDING");
		sys.wait( .25 );
	}
	
}

//--
// End Bridge Puzzle
//--

//creature intros in tunnels

void callElevators()
{
/*
	//move elevator1
	$func_elevator_1.gotoFloor(2);
	
	//move elevator2
	$func_elevator_2.gotoFloor(2);
*/

	setNewTimes( $func_mover_1, .5 , 0 , .5 );
	$func_mover_1.move( UP,128 );

	sys.wait(.2);
	setNewTimes( $func_mover_2, 1 , 0 , .5 );
	$func_mover_2.move( UP,240 );
}

// ======== Locking doors along the way to lead the player along ================
void lockTunnel()
{
	$func_door_357.lock(1);
}
void lockTunnel2()
{
	$func_door_347.lock(1);
}
void lockTunnel2a()
{
	$func_door_371.lock(1);
}
void lockTunnel2b()
{
	$func_door_365.lock(1);
}
void lockTunnel3()
{
	$func_door_344.lock(1);
}
void lockTunnel4()
{
	$func_door_292.lock(1);
}
void lockTunnel5()
{
	$func_door_294.lock(1);
}
void lockTunnel6()
{
	$func_door_306.lock(1);
}
void lockTunnel7()
{
	$func_door_341.lock(1);
}
// ======== Locking doors along the way to lead the player along ================


//introduce harvester
void harvestercin()
{
	sys.trigger($harvesterMusic);

	$func_door_357.lock(1);
	$blockDoorClip.show();

	$introTank1.remove();
	$introTank2.remove();

	sys.fadeOut('0 0 0', 0.2 );
	sys.wait(0.2);
	sys.trigger($cin_cam);
	sys.fadeIn('0 0 0', 0.6 );
	$cin_gev1.playAnim(ANIMCHANNEL_ALL, "convoy2b_tank_smash");
	$cin_gev2.playAnim(ANIMCHANNEL_ALL, "convoy2b_tank2_smash");
	aiScriptedAnimWait($cin_harvester, "convoy2b_intro", 0, 1);

	$cin_gev1.remove();

//	sys.wait( 15 );
//	sys.waitFrame();
	
	$cin_harvester.remove( );
	sys.trigger( $monster_harvester_combat_1 );	
}

void introHarvDead()
{
	sys.trigger($byeRedFence);
	
	// SAVE GAME
//	sys.trigger($func_savegame_2);
}

void towerFlyer1()
{
	while(1)
	{
		$towerFlyer_1.show();
		$towerFlyer_1.startSpline( $hubTowerSpline_1 );
		setNewTimes( $towerFlyer_1 , 12 , 0 , 0 );
		sys.waitFor( $towerFlyer_1 );
		$towerFlyer_1.hide();
		sys.wait(2 + sys.random(5));		
	}
}
void towerFlyer2()
{
	while(1)
	{
		$towerFlyer_2.show();
		$towerFlyer_2.startSpline( $hubTowerSpline_2 );
		setNewTimes( $towerFlyer_2 , 12 , 0 , 0 );
		sys.waitFor( $towerFlyer_2 );
		$towerFlyer_2.hide();
		sys.wait(2 + sys.random(5));		
	}
}

void hubTower()
{
	// random flyers 
//	thread towerFlyer1();
//	thread towerFlyer2();
	
	//sys.println("no more flyers");
}

void hubEntrance()
{
	$hubDoorClip.show();

	$func_door_362.lock(1);
	
	$vehicle_gev_4.lock(0);
	
	sys.sendNamedEvent( GUI_VEHICLEHUD, "hideLockmessage" );
	
	// hide the terrain
	$func_static_53987.hide();
}

void fakeTanks()
{
	$func_door_358.open();

	setNewTimes( $mvr_tank1 , 5 , 0 , 4 );
	$mvr_tank1.startSpline( $tank1Spline );
	
	setNewTimes( $mvr_tank2 , 5.25 , 0 , 4 );
	$mvr_tank2.startSpline( $tank2Spline );
}

void driverShoot()
{
	//sys.println("shooting");
	$func_vehicle_driver_1.fireWeapon(1,.1);
}

/*
void dropOffEnd()
{
	// landing 
	setNewTimes( $drop_ship_null , 4 , .2 , 2 );
	$drop_ship_null.startSpline( $drop_ship_path );
	sys.waitFor( $drop_ship_null );
	strogg_dropship::carrierLand( $drop_ship );

	// take off 
	setNewTimes( $drop_ship_null , 7 , 3 , 0 );
	$drop_ship.bind($drop_ship_null);
	$drop_ship_null.startSpline( $drop_ship_path_out );
	sys.waitFor( $drop_ship_null );
	$drop_ship.hide();
}
*/

void main( )
{
	$player1.enterVehicle( $vehicle_gev_4 );

	// this should prevent the player from taking damage when you get out at the end of the level
	$player1.setKey( "ignore_vehicle_damage", "1" );
	$player1.setKey( "ignore_vehicle_push", "1" );

	sys.sendNamedEvent( GUI_VEHICLEHUD, "showLockmessage" );
	$vehicle_gev_4.lock(1);
	$func_vehicle_driver_1.enterVehicle( $cin_gev2 );
//	$craneBase.bindToJoint( $convoyCraneVehicle , "origin" , 1 );

	thread fakeTanks();
	
	sys.waitFrame();
	sys.trigger($item_objective_1);	
}


} // End of namespace

