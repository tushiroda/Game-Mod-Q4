//-------------------------------------------------
// Choo Choo Tram Object!
//
// Script Object train that rolls along, and intelligently 
// switches tracks. Or clownfully, if the player makes
// bad choices.
//-------------------------------------------------

object objTram {

	//------------------------------------
	// Values

		//"speed" of the tram, number of seconds to cross the current spline
		float fTime;

		//track number to jump to next 
		float trackSegment;

		//current track - it will be a single letter.
		string currentTrack;

		//the next track to jump to-- will be the same as the current track unless changed by an outside force.
		string nextTrack;

		//current spline, the one we're moving on
		entity currentSpline;

		//NOTE! Splines that are to be used as tram tracks must be named like this
		//
		// spline_tram[letter]_[segment]
		//
		// The letter is to indicate splits in the track.
		//
		// spline_tramA_1, spline_tramA_2,  ** here comes a fork **  spline_tramA_3, spline_tramB_3
	//------------------------------------
	// Methods

		//sets up the tram on it's inital track
		void init();

		//waits for f seconds then continues the spline adventure
		void pauseBeforeMovement(float f);

		//moves the tram onto a new track-- called at the end of every spline movement 
		void moveToNewTrack();

		//keeps track of when we finish our movement
		void waitForTrack(float f);

		//alerts the train that it should move to a new track
		void setNewTrack(string s);

		// twhitaker : October 6 - added functionality to set the next track segment
		// set the next track segment (e.g. spline_tramA_* <-- sets the asterisk directly)
		void setNewTrackSegment(float f);

		//rock the tram back and forth
		void rock();

		// Set up the movement before we move.
		void setupMovement();

		// triggered move
		void triggeredMove();
};

void objTram::setupMovement()
{
	//sys.println("objTram::setupMovement begin");

	//catch all float variable
	float f;

	//sys.println("Current spline is " + currentSpline.getName());

	// Determine if we should wait at a beginning of a spline
	f = currentSpline.getFloatKey("waitTime");

	if(f)
	{		
		wait(f);
	}

//	THIS WASN'T SO F&@#ING HARD NOW WAS IT?

//	speed(getFloatKey("speed"));
	float tramSpeed = getFloatKey("speed");
	if(tramSpeed) 
	{
		speed(tramSpeed);
	}
	else
	{
		//sys.println("objtram::No speed set, defaulting to time.");
		// Determine how long it should take to travel this spline.
		fTime = 0;
		fTime = currentSpline.getFloatKey("trackTime");

		if(fTime == 0)
		{
			fTime = 4;
		}
		//sys.println("objtram::time set to " + fTime);
		time(fTime);
	}


/*
	float a = currentSpline.getFloatKey("accelTime");
	float d = currentSpline.getFloatKey("decelTime");

	accelTime(a);
	decelTime(d);
*/
	//sys.println("objTram::setupMovement end");
}

void objTram::init()
{
	//sys.println("objTram::init begin");

		// Get starting track.
		currentTrack = getKey("startTrack");
		nextTrack = currentTrack;
		trackSegment = 1;

		//set our speed
		fTime = 4;

		currentSpline = sys.getEntity("spline_tram" + nextTrack + "_" + trackSegment);

		//sys.println("Init: currentSpline be '" + currentSpline.getName() + "' and I'm looking for spline_tram" + nextTrack + "_" + trackSegment);

		// Don't move yet if we are triggered later.
		if(getFloatKey("triggeredMove") == 1)
			return;

		float f = getFloatKey("waitBeforeMove");
		
		// See if we should wait initially before moving.		
		if(f)
		{
			thread pauseBeforeMovement(f);
		}
		
		setupMovement();

		//go go
		startSpline(currentSpline);
		
		//get ready to jump!
		//sys.println("  threading waitForTrack(" + f + ") from init");
		thread waitForTrack(f);

	//sys.println("objTram::init end");

}

void objTram::pauseBeforeMovement(float f)
{
	//sys.println("objTram::pauseBeforeMovement begin");

	float fGoal;

	fGoal = sys.getTime() + f;
	
	while(sys.getTime() < fGoal)	
	{
		startSpline(currentSpline);
		sys.waitFrame();
	}

	//sys.println("objTram::pauseBeforeMovement end");
}

void objTram::waitForTrack(float f)
{
	//sys.println("objTram::waitForTrack begin -- waiting " + (fTime + f) + " seconds.");
	float fWaitness = fTime + f;
//	sys.wait(fTime + f);
	
	sys.waitFor ( self );
	
	//go!
	moveToNewTrack();

	//sys.println("objTram::waitForTrack end -- I waited " + (fWaitness) + " seconds.");
}

void objTram::rock()
{
	//sys.println("objTram::rock begin");

	return;
	vector v = getAngles();

	v_x = 180;
	v_y = 0;
	v_z = 0;
	setAngles(v);
	//sys.println("Angles " + v_x + " " + v_y + " " + v_z);

	//sys.println("objTram::rock begin");
}

void objTram::setNewTrack(string s)
{
	//sys.println("objTram::setNewTrack begin");
	
	nextTrack = s;
	//sys.println("As soon as I can, move to track '" + s + "'");

	//sys.println("objTram::setNewTrack end");	
}

void objTram::setNewTrackSegment(float f)
{
	//sys.println("objTram::setNewTrackSegment begin");
	
	// s - 1 because moveToNewTrack() adds 1 to trackSegment before it uses it
	trackSegment = f - 1;
	//sys.println("As soon as I can, move to track segment: " + f + ", but really " + trackSegment);

	//sys.println("objTram::setNewTrackSegment end");	
}

void objTram::moveToNewTrack()
{
	//sys.println("objTram::moveToNewTrack begin");

	float f;
	//sys.println("   Next track segment: " + trackSegment);

	//if this is the end of the line, then stop and don't worry about it
	f = currentSpline.getFloatKey("trackEnd");
	if(f == 1)
	{
		//sys.println("End of the line!");
		return;
	}

	//check our current spline for the trackLoop key value
	f = currentSpline.getFloatKey("trackLoop");
	
	//if the trackLoop is 1, then loop around
	if(f == 1)
	{		
		trackSegment = 0;
	}

	//sys.println("   Next track segment: " + trackSegment);
	
	//increment the tracksegment and get the spline
	trackSegment++;

	//sys.println("   Next track segment: " + trackSegment);

	//if this current track is flagged as a junction, try to go to the nextTrack.
	//nextTrack is usually the same as currentTrack, unless it's been changed by 
	//an outside effect.
	f = 0;
	f = currentSpline.getFloatKey("trackJunction");
	entity nextSpline;
	
	//try to jump to the next spline-- junction version
	if(f == 1)
	{
		//passing a junction
		sys.println("Passing a track junction...");

		//try the new track
		nextSpline = sys.getEntity("spline_tram" + nextTrack + "_" + trackSegment);
		//error check
		if(nextSpline == $null_entity)
		{
			//error! All your map are crash! 
			sys.error("objTrain " + getName() + " tried to move from spline '" + currentSpline.getName() + "' to nonexistent spline 'spline_tram" + nextTrack + "_" + trackSegment + "' ");
		}
		//if it worked, then set the currentTrack value to the next track
		sys.println("Moved from track '" + currentTrack + "' to '" + nextTrack + "'!");
		currentTrack = nextTrack;
		
	}
	else
	{
		nextSpline = sys.getEntity("spline_tram" + currentTrack + "_" + trackSegment);
		//error check
		if(nextSpline == $null_entity)
		{
			//error! All your map are crash! 
			sys.error("\n\nobjTrain " + getName() + " tried to move from spline '" + currentSpline.getName() + "' \nto nonexistent spline 'spline_tram" + nextTrack + "_" + trackSegment + "' ");
		}

	}

	//update the current spline
	currentSpline = nextSpline;

	// Set up the movement.
	setupMovement();
	
	//get up on it!
	startSpline(currentSpline);

	//wait
	//sys.println("  threading waitForTrack(0) from moveToNewTrack");
	thread waitForTrack(0);

	//sys.println("objTram::moveToNewTrack end");
}

void objTram::triggeredMove()
{
	float f = getFloatKey("waitBeforeMove");
	
	// See if we should wait initially before moving.		
	if(f)
	{
		thread pauseBeforeMovement(f);
	}
	
	setupMovement();

	//go go
	startSpline(currentSpline);
	
	//get ready to jump!
	//sys.println("  threading waitForTrack(" + f + ") from triggeredMove");
	thread waitForTrack(f);
}